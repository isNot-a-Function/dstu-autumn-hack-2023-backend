
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model ExecutorInfo
 * 
 */
export type ExecutorInfo = $Result.DefaultSelection<Prisma.$ExecutorInfoPayload>
/**
 * Model CustomerInfo
 * 
 */
export type CustomerInfo = $Result.DefaultSelection<Prisma.$CustomerInfoPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model Response
 * 
 */
export type Response = $Result.DefaultSelection<Prisma.$ResponsePayload>
/**
 * Model Specialization
 * 
 */
export type Specialization = $Result.DefaultSelection<Prisma.$SpecializationPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model TopUpBalance
 * 
 */
export type TopUpBalance = $Result.DefaultSelection<Prisma.$TopUpBalancePayload>
/**
 * Model DecreaseBalance
 * 
 */
export type DecreaseBalance = $Result.DefaultSelection<Prisma.$DecreaseBalancePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRoleEnum: {
  executor: 'executor',
  customer: 'customer'
};

export type UserRoleEnum = (typeof UserRoleEnum)[keyof typeof UserRoleEnum]


export const ExpirienceEnum: {
  lessYear: 'lessYear',
  overYear: 'overYear',
  overThreeYear: 'overThreeYear',
  overFiveYear: 'overFiveYear',
  overTeenYear: 'overTeenYear'
};

export type ExpirienceEnum = (typeof ExpirienceEnum)[keyof typeof ExpirienceEnum]


export const CostTypeEnum: {
  none: 'none',
  contract: 'contract',
  inHour: 'inHour',
  inOrder: 'inOrder'
};

export type CostTypeEnum = (typeof CostTypeEnum)[keyof typeof CostTypeEnum]


export const OrderStatusEnum: {
  active: 'active',
  inProcess: 'inProcess',
  inCheck: 'inCheck',
  archived: 'archived',
  done: 'done'
};

export type OrderStatusEnum = (typeof OrderStatusEnum)[keyof typeof OrderStatusEnum]

}

export type UserRoleEnum = $Enums.UserRoleEnum

export const UserRoleEnum: typeof $Enums.UserRoleEnum

export type ExpirienceEnum = $Enums.ExpirienceEnum

export const ExpirienceEnum: typeof $Enums.ExpirienceEnum

export type CostTypeEnum = $Enums.CostTypeEnum

export const CostTypeEnum: typeof $Enums.CostTypeEnum

export type OrderStatusEnum = $Enums.OrderStatusEnum

export const OrderStatusEnum: typeof $Enums.OrderStatusEnum

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.executorInfo`: Exposes CRUD operations for the **ExecutorInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExecutorInfos
    * const executorInfos = await prisma.executorInfo.findMany()
    * ```
    */
  get executorInfo(): Prisma.ExecutorInfoDelegate<ExtArgs>;

  /**
   * `prisma.customerInfo`: Exposes CRUD operations for the **CustomerInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerInfos
    * const customerInfos = await prisma.customerInfo.findMany()
    * ```
    */
  get customerInfo(): Prisma.CustomerInfoDelegate<ExtArgs>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs>;

  /**
   * `prisma.response`: Exposes CRUD operations for the **Response** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Responses
    * const responses = await prisma.response.findMany()
    * ```
    */
  get response(): Prisma.ResponseDelegate<ExtArgs>;

  /**
   * `prisma.specialization`: Exposes CRUD operations for the **Specialization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Specializations
    * const specializations = await prisma.specialization.findMany()
    * ```
    */
  get specialization(): Prisma.SpecializationDelegate<ExtArgs>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs>;

  /**
   * `prisma.topUpBalance`: Exposes CRUD operations for the **TopUpBalance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TopUpBalances
    * const topUpBalances = await prisma.topUpBalance.findMany()
    * ```
    */
  get topUpBalance(): Prisma.TopUpBalanceDelegate<ExtArgs>;

  /**
   * `prisma.decreaseBalance`: Exposes CRUD operations for the **DecreaseBalance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DecreaseBalances
    * const decreaseBalances = await prisma.decreaseBalance.findMany()
    * ```
    */
  get decreaseBalance(): Prisma.DecreaseBalanceDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    ExecutorInfo: 'ExecutorInfo',
    CustomerInfo: 'CustomerInfo',
    Order: 'Order',
    Response: 'Response',
    Specialization: 'Specialization',
    Contact: 'Contact',
    TopUpBalance: 'TopUpBalance',
    DecreaseBalance: 'DecreaseBalance'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'executorInfo' | 'customerInfo' | 'order' | 'response' | 'specialization' | 'contact' | 'topUpBalance' | 'decreaseBalance'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      ExecutorInfo: {
        payload: Prisma.$ExecutorInfoPayload<ExtArgs>
        fields: Prisma.ExecutorInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExecutorInfoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExecutorInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExecutorInfoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExecutorInfoPayload>
          }
          findFirst: {
            args: Prisma.ExecutorInfoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExecutorInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExecutorInfoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExecutorInfoPayload>
          }
          findMany: {
            args: Prisma.ExecutorInfoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExecutorInfoPayload>[]
          }
          create: {
            args: Prisma.ExecutorInfoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExecutorInfoPayload>
          }
          createMany: {
            args: Prisma.ExecutorInfoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExecutorInfoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExecutorInfoPayload>
          }
          update: {
            args: Prisma.ExecutorInfoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExecutorInfoPayload>
          }
          deleteMany: {
            args: Prisma.ExecutorInfoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExecutorInfoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExecutorInfoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExecutorInfoPayload>
          }
          aggregate: {
            args: Prisma.ExecutorInfoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExecutorInfo>
          }
          groupBy: {
            args: Prisma.ExecutorInfoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExecutorInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExecutorInfoCountArgs<ExtArgs>,
            result: $Utils.Optional<ExecutorInfoCountAggregateOutputType> | number
          }
        }
      }
      CustomerInfo: {
        payload: Prisma.$CustomerInfoPayload<ExtArgs>
        fields: Prisma.CustomerInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerInfoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerInfoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload>
          }
          findFirst: {
            args: Prisma.CustomerInfoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerInfoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload>
          }
          findMany: {
            args: Prisma.CustomerInfoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload>[]
          }
          create: {
            args: Prisma.CustomerInfoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload>
          }
          createMany: {
            args: Prisma.CustomerInfoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CustomerInfoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload>
          }
          update: {
            args: Prisma.CustomerInfoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload>
          }
          deleteMany: {
            args: Prisma.CustomerInfoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerInfoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CustomerInfoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload>
          }
          aggregate: {
            args: Prisma.CustomerInfoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCustomerInfo>
          }
          groupBy: {
            args: Prisma.CustomerInfoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CustomerInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerInfoCountArgs<ExtArgs>,
            result: $Utils.Optional<CustomerInfoCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>,
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      Response: {
        payload: Prisma.$ResponsePayload<ExtArgs>
        fields: Prisma.ResponseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResponseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResponseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>
          }
          findFirst: {
            args: Prisma.ResponseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResponseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>
          }
          findMany: {
            args: Prisma.ResponseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>[]
          }
          create: {
            args: Prisma.ResponseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>
          }
          createMany: {
            args: Prisma.ResponseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ResponseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>
          }
          update: {
            args: Prisma.ResponseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>
          }
          deleteMany: {
            args: Prisma.ResponseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ResponseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ResponseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>
          }
          aggregate: {
            args: Prisma.ResponseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateResponse>
          }
          groupBy: {
            args: Prisma.ResponseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResponseCountArgs<ExtArgs>,
            result: $Utils.Optional<ResponseCountAggregateOutputType> | number
          }
        }
      }
      Specialization: {
        payload: Prisma.$SpecializationPayload<ExtArgs>
        fields: Prisma.SpecializationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpecializationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecializationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpecializationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecializationPayload>
          }
          findFirst: {
            args: Prisma.SpecializationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecializationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpecializationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecializationPayload>
          }
          findMany: {
            args: Prisma.SpecializationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecializationPayload>[]
          }
          create: {
            args: Prisma.SpecializationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecializationPayload>
          }
          createMany: {
            args: Prisma.SpecializationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SpecializationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecializationPayload>
          }
          update: {
            args: Prisma.SpecializationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecializationPayload>
          }
          deleteMany: {
            args: Prisma.SpecializationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SpecializationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SpecializationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecializationPayload>
          }
          aggregate: {
            args: Prisma.SpecializationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSpecialization>
          }
          groupBy: {
            args: Prisma.SpecializationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SpecializationGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpecializationCountArgs<ExtArgs>,
            result: $Utils.Optional<SpecializationCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>,
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      TopUpBalance: {
        payload: Prisma.$TopUpBalancePayload<ExtArgs>
        fields: Prisma.TopUpBalanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TopUpBalanceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TopUpBalancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TopUpBalanceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TopUpBalancePayload>
          }
          findFirst: {
            args: Prisma.TopUpBalanceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TopUpBalancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TopUpBalanceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TopUpBalancePayload>
          }
          findMany: {
            args: Prisma.TopUpBalanceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TopUpBalancePayload>[]
          }
          create: {
            args: Prisma.TopUpBalanceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TopUpBalancePayload>
          }
          createMany: {
            args: Prisma.TopUpBalanceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TopUpBalanceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TopUpBalancePayload>
          }
          update: {
            args: Prisma.TopUpBalanceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TopUpBalancePayload>
          }
          deleteMany: {
            args: Prisma.TopUpBalanceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TopUpBalanceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TopUpBalanceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TopUpBalancePayload>
          }
          aggregate: {
            args: Prisma.TopUpBalanceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTopUpBalance>
          }
          groupBy: {
            args: Prisma.TopUpBalanceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TopUpBalanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.TopUpBalanceCountArgs<ExtArgs>,
            result: $Utils.Optional<TopUpBalanceCountAggregateOutputType> | number
          }
        }
      }
      DecreaseBalance: {
        payload: Prisma.$DecreaseBalancePayload<ExtArgs>
        fields: Prisma.DecreaseBalanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DecreaseBalanceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DecreaseBalancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DecreaseBalanceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DecreaseBalancePayload>
          }
          findFirst: {
            args: Prisma.DecreaseBalanceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DecreaseBalancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DecreaseBalanceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DecreaseBalancePayload>
          }
          findMany: {
            args: Prisma.DecreaseBalanceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DecreaseBalancePayload>[]
          }
          create: {
            args: Prisma.DecreaseBalanceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DecreaseBalancePayload>
          }
          createMany: {
            args: Prisma.DecreaseBalanceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DecreaseBalanceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DecreaseBalancePayload>
          }
          update: {
            args: Prisma.DecreaseBalanceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DecreaseBalancePayload>
          }
          deleteMany: {
            args: Prisma.DecreaseBalanceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DecreaseBalanceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DecreaseBalanceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DecreaseBalancePayload>
          }
          aggregate: {
            args: Prisma.DecreaseBalanceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDecreaseBalance>
          }
          groupBy: {
            args: Prisma.DecreaseBalanceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DecreaseBalanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.DecreaseBalanceCountArgs<ExtArgs>,
            result: $Utils.Optional<DecreaseBalanceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    topUpBalance: number
    decreaseBalance: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    topUpBalance?: boolean | UserCountOutputTypeCountTopUpBalanceArgs
    decreaseBalance?: boolean | UserCountOutputTypeCountDecreaseBalanceArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTopUpBalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopUpBalanceWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDecreaseBalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DecreaseBalanceWhereInput
  }



  /**
   * Count Type ExecutorInfoCountOutputType
   */

  export type ExecutorInfoCountOutputType = {
    responses: number
    specializations: number
    activeOrders: number
    doneOrders: number
  }

  export type ExecutorInfoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    responses?: boolean | ExecutorInfoCountOutputTypeCountResponsesArgs
    specializations?: boolean | ExecutorInfoCountOutputTypeCountSpecializationsArgs
    activeOrders?: boolean | ExecutorInfoCountOutputTypeCountActiveOrdersArgs
    doneOrders?: boolean | ExecutorInfoCountOutputTypeCountDoneOrdersArgs
  }

  // Custom InputTypes

  /**
   * ExecutorInfoCountOutputType without action
   */
  export type ExecutorInfoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfoCountOutputType
     */
    select?: ExecutorInfoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ExecutorInfoCountOutputType without action
   */
  export type ExecutorInfoCountOutputTypeCountResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResponseWhereInput
  }


  /**
   * ExecutorInfoCountOutputType without action
   */
  export type ExecutorInfoCountOutputTypeCountSpecializationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpecializationWhereInput
  }


  /**
   * ExecutorInfoCountOutputType without action
   */
  export type ExecutorInfoCountOutputTypeCountActiveOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * ExecutorInfoCountOutputType without action
   */
  export type ExecutorInfoCountOutputTypeCountDoneOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }



  /**
   * Count Type CustomerInfoCountOutputType
   */

  export type CustomerInfoCountOutputType = {
    orders: number
  }

  export type CustomerInfoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | CustomerInfoCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes

  /**
   * CustomerInfoCountOutputType without action
   */
  export type CustomerInfoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfoCountOutputType
     */
    select?: CustomerInfoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CustomerInfoCountOutputType without action
   */
  export type CustomerInfoCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }



  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    responses: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    responses?: boolean | OrderCountOutputTypeCountResponsesArgs
  }

  // Custom InputTypes

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResponseWhereInput
  }



  /**
   * Count Type SpecializationCountOutputType
   */

  export type SpecializationCountOutputType = {
    orders: number
    executors: number
  }

  export type SpecializationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | SpecializationCountOutputTypeCountOrdersArgs
    executors?: boolean | SpecializationCountOutputTypeCountExecutorsArgs
  }

  // Custom InputTypes

  /**
   * SpecializationCountOutputType without action
   */
  export type SpecializationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecializationCountOutputType
     */
    select?: SpecializationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SpecializationCountOutputType without action
   */
  export type SpecializationCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * SpecializationCountOutputType without action
   */
  export type SpecializationCountOutputTypeCountExecutorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExecutorInfoWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    balance: number | null
  }

  export type UserSumAggregateOutputType = {
    balance: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.UserRoleEnum | null
    name: string | null
    family: string | null
    dateOfBirth: Date | null
    city: string | null
    logo: string | null
    balance: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.UserRoleEnum | null
    name: string | null
    family: string | null
    dateOfBirth: Date | null
    city: string | null
    logo: string | null
    balance: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    role: number
    name: number
    family: number
    dateOfBirth: number
    city: number
    logo: number
    balance: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    balance?: true
  }

  export type UserSumAggregateInputType = {
    balance?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    name?: true
    family?: true
    dateOfBirth?: true
    city?: true
    logo?: true
    balance?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    name?: true
    family?: true
    dateOfBirth?: true
    city?: true
    logo?: true
    balance?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    name?: true
    family?: true
    dateOfBirth?: true
    city?: true
    logo?: true
    balance?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationAndSearchRelevanceInput | UserOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    role: $Enums.UserRoleEnum
    name: string | null
    family: string | null
    dateOfBirth: Date | null
    city: string | null
    logo: string | null
    balance: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    name?: boolean
    family?: boolean
    dateOfBirth?: boolean
    city?: boolean
    logo?: boolean
    balance?: boolean
    executorInfo?: boolean | User$executorInfoArgs<ExtArgs>
    custoremInfo?: boolean | User$custoremInfoArgs<ExtArgs>
    contact?: boolean | User$contactArgs<ExtArgs>
    topUpBalance?: boolean | User$topUpBalanceArgs<ExtArgs>
    decreaseBalance?: boolean | User$decreaseBalanceArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    name?: boolean
    family?: boolean
    dateOfBirth?: boolean
    city?: boolean
    logo?: boolean
    balance?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    executorInfo?: boolean | User$executorInfoArgs<ExtArgs>
    custoremInfo?: boolean | User$custoremInfoArgs<ExtArgs>
    contact?: boolean | User$contactArgs<ExtArgs>
    topUpBalance?: boolean | User$topUpBalanceArgs<ExtArgs>
    decreaseBalance?: boolean | User$decreaseBalanceArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      executorInfo: Prisma.$ExecutorInfoPayload<ExtArgs> | null
      custoremInfo: Prisma.$CustomerInfoPayload<ExtArgs> | null
      contact: Prisma.$ContactPayload<ExtArgs> | null
      topUpBalance: Prisma.$TopUpBalancePayload<ExtArgs>[]
      decreaseBalance: Prisma.$DecreaseBalancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      role: $Enums.UserRoleEnum
      name: string | null
      family: string | null
      dateOfBirth: Date | null
      city: string | null
      logo: string | null
      balance: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    executorInfo<T extends User$executorInfoArgs<ExtArgs> = {}>(args?: Subset<T, User$executorInfoArgs<ExtArgs>>): Prisma__ExecutorInfoClient<$Result.GetResult<Prisma.$ExecutorInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    custoremInfo<T extends User$custoremInfoArgs<ExtArgs> = {}>(args?: Subset<T, User$custoremInfoArgs<ExtArgs>>): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    contact<T extends User$contactArgs<ExtArgs> = {}>(args?: Subset<T, User$contactArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    topUpBalance<T extends User$topUpBalanceArgs<ExtArgs> = {}>(args?: Subset<T, User$topUpBalanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopUpBalancePayload<ExtArgs>, T, 'findMany'> | Null>;

    decreaseBalance<T extends User$decreaseBalanceArgs<ExtArgs> = {}>(args?: Subset<T, User$decreaseBalanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DecreaseBalancePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRoleEnum'>
    readonly name: FieldRef<"User", 'String'>
    readonly family: FieldRef<"User", 'String'>
    readonly dateOfBirth: FieldRef<"User", 'DateTime'>
    readonly city: FieldRef<"User", 'String'>
    readonly logo: FieldRef<"User", 'String'>
    readonly balance: FieldRef<"User", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationAndSearchRelevanceInput | UserOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationAndSearchRelevanceInput | UserOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationAndSearchRelevanceInput | UserOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.executorInfo
   */
  export type User$executorInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfo
     */
    select?: ExecutorInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutorInfoInclude<ExtArgs> | null
    where?: ExecutorInfoWhereInput
  }


  /**
   * User.custoremInfo
   */
  export type User$custoremInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    where?: CustomerInfoWhereInput
  }


  /**
   * User.contact
   */
  export type User$contactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
  }


  /**
   * User.topUpBalance
   */
  export type User$topUpBalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpBalance
     */
    select?: TopUpBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TopUpBalanceInclude<ExtArgs> | null
    where?: TopUpBalanceWhereInput
    orderBy?: TopUpBalanceOrderByWithRelationAndSearchRelevanceInput | TopUpBalanceOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: TopUpBalanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TopUpBalanceScalarFieldEnum | TopUpBalanceScalarFieldEnum[]
  }


  /**
   * User.decreaseBalance
   */
  export type User$decreaseBalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecreaseBalance
     */
    select?: DecreaseBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DecreaseBalanceInclude<ExtArgs> | null
    where?: DecreaseBalanceWhereInput
    orderBy?: DecreaseBalanceOrderByWithRelationAndSearchRelevanceInput | DecreaseBalanceOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: DecreaseBalanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DecreaseBalanceScalarFieldEnum | DecreaseBalanceScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model ExecutorInfo
   */

  export type AggregateExecutorInfo = {
    _count: ExecutorInfoCountAggregateOutputType | null
    _avg: ExecutorInfoAvgAggregateOutputType | null
    _sum: ExecutorInfoSumAggregateOutputType | null
    _min: ExecutorInfoMinAggregateOutputType | null
    _max: ExecutorInfoMaxAggregateOutputType | null
  }

  export type ExecutorInfoAvgAggregateOutputType = {
    rating: number | null
    ratingCount: number | null
    cost: number | null
  }

  export type ExecutorInfoSumAggregateOutputType = {
    rating: number | null
    ratingCount: number | null
    cost: number | null
  }

  export type ExecutorInfoMinAggregateOutputType = {
    id: string | null
    userId: string | null
    rating: number | null
    ratingCount: number | null
    description: string | null
    classification: string | null
    expirience: $Enums.ExpirienceEnum | null
    costType: $Enums.CostTypeEnum | null
    cost: number | null
  }

  export type ExecutorInfoMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    rating: number | null
    ratingCount: number | null
    description: string | null
    classification: string | null
    expirience: $Enums.ExpirienceEnum | null
    costType: $Enums.CostTypeEnum | null
    cost: number | null
  }

  export type ExecutorInfoCountAggregateOutputType = {
    id: number
    userId: number
    rating: number
    ratingCount: number
    description: number
    classification: number
    tags: number
    expirience: number
    costType: number
    cost: number
    _all: number
  }


  export type ExecutorInfoAvgAggregateInputType = {
    rating?: true
    ratingCount?: true
    cost?: true
  }

  export type ExecutorInfoSumAggregateInputType = {
    rating?: true
    ratingCount?: true
    cost?: true
  }

  export type ExecutorInfoMinAggregateInputType = {
    id?: true
    userId?: true
    rating?: true
    ratingCount?: true
    description?: true
    classification?: true
    expirience?: true
    costType?: true
    cost?: true
  }

  export type ExecutorInfoMaxAggregateInputType = {
    id?: true
    userId?: true
    rating?: true
    ratingCount?: true
    description?: true
    classification?: true
    expirience?: true
    costType?: true
    cost?: true
  }

  export type ExecutorInfoCountAggregateInputType = {
    id?: true
    userId?: true
    rating?: true
    ratingCount?: true
    description?: true
    classification?: true
    tags?: true
    expirience?: true
    costType?: true
    cost?: true
    _all?: true
  }

  export type ExecutorInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExecutorInfo to aggregate.
     */
    where?: ExecutorInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExecutorInfos to fetch.
     */
    orderBy?: ExecutorInfoOrderByWithRelationAndSearchRelevanceInput | ExecutorInfoOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExecutorInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExecutorInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExecutorInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExecutorInfos
    **/
    _count?: true | ExecutorInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExecutorInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExecutorInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExecutorInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExecutorInfoMaxAggregateInputType
  }

  export type GetExecutorInfoAggregateType<T extends ExecutorInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateExecutorInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExecutorInfo[P]>
      : GetScalarType<T[P], AggregateExecutorInfo[P]>
  }




  export type ExecutorInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExecutorInfoWhereInput
    orderBy?: ExecutorInfoOrderByWithAggregationInput | ExecutorInfoOrderByWithAggregationInput[]
    by: ExecutorInfoScalarFieldEnum[] | ExecutorInfoScalarFieldEnum
    having?: ExecutorInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExecutorInfoCountAggregateInputType | true
    _avg?: ExecutorInfoAvgAggregateInputType
    _sum?: ExecutorInfoSumAggregateInputType
    _min?: ExecutorInfoMinAggregateInputType
    _max?: ExecutorInfoMaxAggregateInputType
  }

  export type ExecutorInfoGroupByOutputType = {
    id: string
    userId: string
    rating: number | null
    ratingCount: number
    description: string | null
    classification: string | null
    tags: string[]
    expirience: $Enums.ExpirienceEnum
    costType: $Enums.CostTypeEnum
    cost: number | null
    _count: ExecutorInfoCountAggregateOutputType | null
    _avg: ExecutorInfoAvgAggregateOutputType | null
    _sum: ExecutorInfoSumAggregateOutputType | null
    _min: ExecutorInfoMinAggregateOutputType | null
    _max: ExecutorInfoMaxAggregateOutputType | null
  }

  type GetExecutorInfoGroupByPayload<T extends ExecutorInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExecutorInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExecutorInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExecutorInfoGroupByOutputType[P]>
            : GetScalarType<T[P], ExecutorInfoGroupByOutputType[P]>
        }
      >
    >


  export type ExecutorInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    rating?: boolean
    ratingCount?: boolean
    description?: boolean
    classification?: boolean
    tags?: boolean
    expirience?: boolean
    costType?: boolean
    cost?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    responses?: boolean | ExecutorInfo$responsesArgs<ExtArgs>
    specializations?: boolean | ExecutorInfo$specializationsArgs<ExtArgs>
    activeOrders?: boolean | ExecutorInfo$activeOrdersArgs<ExtArgs>
    doneOrders?: boolean | ExecutorInfo$doneOrdersArgs<ExtArgs>
    _count?: boolean | ExecutorInfoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["executorInfo"]>

  export type ExecutorInfoSelectScalar = {
    id?: boolean
    userId?: boolean
    rating?: boolean
    ratingCount?: boolean
    description?: boolean
    classification?: boolean
    tags?: boolean
    expirience?: boolean
    costType?: boolean
    cost?: boolean
  }

  export type ExecutorInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    responses?: boolean | ExecutorInfo$responsesArgs<ExtArgs>
    specializations?: boolean | ExecutorInfo$specializationsArgs<ExtArgs>
    activeOrders?: boolean | ExecutorInfo$activeOrdersArgs<ExtArgs>
    doneOrders?: boolean | ExecutorInfo$doneOrdersArgs<ExtArgs>
    _count?: boolean | ExecutorInfoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ExecutorInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExecutorInfo"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      responses: Prisma.$ResponsePayload<ExtArgs>[]
      specializations: Prisma.$SpecializationPayload<ExtArgs>[]
      activeOrders: Prisma.$OrderPayload<ExtArgs>[]
      doneOrders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      rating: number | null
      ratingCount: number
      description: string | null
      classification: string | null
      tags: string[]
      expirience: $Enums.ExpirienceEnum
      costType: $Enums.CostTypeEnum
      cost: number | null
    }, ExtArgs["result"]["executorInfo"]>
    composites: {}
  }


  type ExecutorInfoGetPayload<S extends boolean | null | undefined | ExecutorInfoDefaultArgs> = $Result.GetResult<Prisma.$ExecutorInfoPayload, S>

  type ExecutorInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExecutorInfoFindManyArgs, 'select' | 'include'> & {
      select?: ExecutorInfoCountAggregateInputType | true
    }

  export interface ExecutorInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExecutorInfo'], meta: { name: 'ExecutorInfo' } }
    /**
     * Find zero or one ExecutorInfo that matches the filter.
     * @param {ExecutorInfoFindUniqueArgs} args - Arguments to find a ExecutorInfo
     * @example
     * // Get one ExecutorInfo
     * const executorInfo = await prisma.executorInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExecutorInfoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExecutorInfoFindUniqueArgs<ExtArgs>>
    ): Prisma__ExecutorInfoClient<$Result.GetResult<Prisma.$ExecutorInfoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ExecutorInfo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExecutorInfoFindUniqueOrThrowArgs} args - Arguments to find a ExecutorInfo
     * @example
     * // Get one ExecutorInfo
     * const executorInfo = await prisma.executorInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExecutorInfoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExecutorInfoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExecutorInfoClient<$Result.GetResult<Prisma.$ExecutorInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ExecutorInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutorInfoFindFirstArgs} args - Arguments to find a ExecutorInfo
     * @example
     * // Get one ExecutorInfo
     * const executorInfo = await prisma.executorInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExecutorInfoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExecutorInfoFindFirstArgs<ExtArgs>>
    ): Prisma__ExecutorInfoClient<$Result.GetResult<Prisma.$ExecutorInfoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ExecutorInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutorInfoFindFirstOrThrowArgs} args - Arguments to find a ExecutorInfo
     * @example
     * // Get one ExecutorInfo
     * const executorInfo = await prisma.executorInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExecutorInfoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExecutorInfoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExecutorInfoClient<$Result.GetResult<Prisma.$ExecutorInfoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ExecutorInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutorInfoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExecutorInfos
     * const executorInfos = await prisma.executorInfo.findMany()
     * 
     * // Get first 10 ExecutorInfos
     * const executorInfos = await prisma.executorInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const executorInfoWithIdOnly = await prisma.executorInfo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExecutorInfoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExecutorInfoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExecutorInfoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ExecutorInfo.
     * @param {ExecutorInfoCreateArgs} args - Arguments to create a ExecutorInfo.
     * @example
     * // Create one ExecutorInfo
     * const ExecutorInfo = await prisma.executorInfo.create({
     *   data: {
     *     // ... data to create a ExecutorInfo
     *   }
     * })
     * 
    **/
    create<T extends ExecutorInfoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExecutorInfoCreateArgs<ExtArgs>>
    ): Prisma__ExecutorInfoClient<$Result.GetResult<Prisma.$ExecutorInfoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ExecutorInfos.
     *     @param {ExecutorInfoCreateManyArgs} args - Arguments to create many ExecutorInfos.
     *     @example
     *     // Create many ExecutorInfos
     *     const executorInfo = await prisma.executorInfo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExecutorInfoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExecutorInfoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ExecutorInfo.
     * @param {ExecutorInfoDeleteArgs} args - Arguments to delete one ExecutorInfo.
     * @example
     * // Delete one ExecutorInfo
     * const ExecutorInfo = await prisma.executorInfo.delete({
     *   where: {
     *     // ... filter to delete one ExecutorInfo
     *   }
     * })
     * 
    **/
    delete<T extends ExecutorInfoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExecutorInfoDeleteArgs<ExtArgs>>
    ): Prisma__ExecutorInfoClient<$Result.GetResult<Prisma.$ExecutorInfoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ExecutorInfo.
     * @param {ExecutorInfoUpdateArgs} args - Arguments to update one ExecutorInfo.
     * @example
     * // Update one ExecutorInfo
     * const executorInfo = await prisma.executorInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExecutorInfoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExecutorInfoUpdateArgs<ExtArgs>>
    ): Prisma__ExecutorInfoClient<$Result.GetResult<Prisma.$ExecutorInfoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ExecutorInfos.
     * @param {ExecutorInfoDeleteManyArgs} args - Arguments to filter ExecutorInfos to delete.
     * @example
     * // Delete a few ExecutorInfos
     * const { count } = await prisma.executorInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExecutorInfoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExecutorInfoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExecutorInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutorInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExecutorInfos
     * const executorInfo = await prisma.executorInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExecutorInfoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExecutorInfoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExecutorInfo.
     * @param {ExecutorInfoUpsertArgs} args - Arguments to update or create a ExecutorInfo.
     * @example
     * // Update or create a ExecutorInfo
     * const executorInfo = await prisma.executorInfo.upsert({
     *   create: {
     *     // ... data to create a ExecutorInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExecutorInfo we want to update
     *   }
     * })
    **/
    upsert<T extends ExecutorInfoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExecutorInfoUpsertArgs<ExtArgs>>
    ): Prisma__ExecutorInfoClient<$Result.GetResult<Prisma.$ExecutorInfoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ExecutorInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutorInfoCountArgs} args - Arguments to filter ExecutorInfos to count.
     * @example
     * // Count the number of ExecutorInfos
     * const count = await prisma.executorInfo.count({
     *   where: {
     *     // ... the filter for the ExecutorInfos we want to count
     *   }
     * })
    **/
    count<T extends ExecutorInfoCountArgs>(
      args?: Subset<T, ExecutorInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExecutorInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExecutorInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutorInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExecutorInfoAggregateArgs>(args: Subset<T, ExecutorInfoAggregateArgs>): Prisma.PrismaPromise<GetExecutorInfoAggregateType<T>>

    /**
     * Group by ExecutorInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutorInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExecutorInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExecutorInfoGroupByArgs['orderBy'] }
        : { orderBy?: ExecutorInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExecutorInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExecutorInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExecutorInfo model
   */
  readonly fields: ExecutorInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExecutorInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExecutorInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    responses<T extends ExecutorInfo$responsesArgs<ExtArgs> = {}>(args?: Subset<T, ExecutorInfo$responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, 'findMany'> | Null>;

    specializations<T extends ExecutorInfo$specializationsArgs<ExtArgs> = {}>(args?: Subset<T, ExecutorInfo$specializationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecializationPayload<ExtArgs>, T, 'findMany'> | Null>;

    activeOrders<T extends ExecutorInfo$activeOrdersArgs<ExtArgs> = {}>(args?: Subset<T, ExecutorInfo$activeOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'> | Null>;

    doneOrders<T extends ExecutorInfo$doneOrdersArgs<ExtArgs> = {}>(args?: Subset<T, ExecutorInfo$doneOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ExecutorInfo model
   */ 
  interface ExecutorInfoFieldRefs {
    readonly id: FieldRef<"ExecutorInfo", 'String'>
    readonly userId: FieldRef<"ExecutorInfo", 'String'>
    readonly rating: FieldRef<"ExecutorInfo", 'Float'>
    readonly ratingCount: FieldRef<"ExecutorInfo", 'Int'>
    readonly description: FieldRef<"ExecutorInfo", 'String'>
    readonly classification: FieldRef<"ExecutorInfo", 'String'>
    readonly tags: FieldRef<"ExecutorInfo", 'String[]'>
    readonly expirience: FieldRef<"ExecutorInfo", 'ExpirienceEnum'>
    readonly costType: FieldRef<"ExecutorInfo", 'CostTypeEnum'>
    readonly cost: FieldRef<"ExecutorInfo", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * ExecutorInfo findUnique
   */
  export type ExecutorInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfo
     */
    select?: ExecutorInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutorInfoInclude<ExtArgs> | null
    /**
     * Filter, which ExecutorInfo to fetch.
     */
    where: ExecutorInfoWhereUniqueInput
  }


  /**
   * ExecutorInfo findUniqueOrThrow
   */
  export type ExecutorInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfo
     */
    select?: ExecutorInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutorInfoInclude<ExtArgs> | null
    /**
     * Filter, which ExecutorInfo to fetch.
     */
    where: ExecutorInfoWhereUniqueInput
  }


  /**
   * ExecutorInfo findFirst
   */
  export type ExecutorInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfo
     */
    select?: ExecutorInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutorInfoInclude<ExtArgs> | null
    /**
     * Filter, which ExecutorInfo to fetch.
     */
    where?: ExecutorInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExecutorInfos to fetch.
     */
    orderBy?: ExecutorInfoOrderByWithRelationAndSearchRelevanceInput | ExecutorInfoOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExecutorInfos.
     */
    cursor?: ExecutorInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExecutorInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExecutorInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExecutorInfos.
     */
    distinct?: ExecutorInfoScalarFieldEnum | ExecutorInfoScalarFieldEnum[]
  }


  /**
   * ExecutorInfo findFirstOrThrow
   */
  export type ExecutorInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfo
     */
    select?: ExecutorInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutorInfoInclude<ExtArgs> | null
    /**
     * Filter, which ExecutorInfo to fetch.
     */
    where?: ExecutorInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExecutorInfos to fetch.
     */
    orderBy?: ExecutorInfoOrderByWithRelationAndSearchRelevanceInput | ExecutorInfoOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExecutorInfos.
     */
    cursor?: ExecutorInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExecutorInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExecutorInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExecutorInfos.
     */
    distinct?: ExecutorInfoScalarFieldEnum | ExecutorInfoScalarFieldEnum[]
  }


  /**
   * ExecutorInfo findMany
   */
  export type ExecutorInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfo
     */
    select?: ExecutorInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutorInfoInclude<ExtArgs> | null
    /**
     * Filter, which ExecutorInfos to fetch.
     */
    where?: ExecutorInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExecutorInfos to fetch.
     */
    orderBy?: ExecutorInfoOrderByWithRelationAndSearchRelevanceInput | ExecutorInfoOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExecutorInfos.
     */
    cursor?: ExecutorInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExecutorInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExecutorInfos.
     */
    skip?: number
    distinct?: ExecutorInfoScalarFieldEnum | ExecutorInfoScalarFieldEnum[]
  }


  /**
   * ExecutorInfo create
   */
  export type ExecutorInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfo
     */
    select?: ExecutorInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutorInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a ExecutorInfo.
     */
    data: XOR<ExecutorInfoCreateInput, ExecutorInfoUncheckedCreateInput>
  }


  /**
   * ExecutorInfo createMany
   */
  export type ExecutorInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExecutorInfos.
     */
    data: ExecutorInfoCreateManyInput | ExecutorInfoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ExecutorInfo update
   */
  export type ExecutorInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfo
     */
    select?: ExecutorInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutorInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a ExecutorInfo.
     */
    data: XOR<ExecutorInfoUpdateInput, ExecutorInfoUncheckedUpdateInput>
    /**
     * Choose, which ExecutorInfo to update.
     */
    where: ExecutorInfoWhereUniqueInput
  }


  /**
   * ExecutorInfo updateMany
   */
  export type ExecutorInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExecutorInfos.
     */
    data: XOR<ExecutorInfoUpdateManyMutationInput, ExecutorInfoUncheckedUpdateManyInput>
    /**
     * Filter which ExecutorInfos to update
     */
    where?: ExecutorInfoWhereInput
  }


  /**
   * ExecutorInfo upsert
   */
  export type ExecutorInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfo
     */
    select?: ExecutorInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutorInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the ExecutorInfo to update in case it exists.
     */
    where: ExecutorInfoWhereUniqueInput
    /**
     * In case the ExecutorInfo found by the `where` argument doesn't exist, create a new ExecutorInfo with this data.
     */
    create: XOR<ExecutorInfoCreateInput, ExecutorInfoUncheckedCreateInput>
    /**
     * In case the ExecutorInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExecutorInfoUpdateInput, ExecutorInfoUncheckedUpdateInput>
  }


  /**
   * ExecutorInfo delete
   */
  export type ExecutorInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfo
     */
    select?: ExecutorInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutorInfoInclude<ExtArgs> | null
    /**
     * Filter which ExecutorInfo to delete.
     */
    where: ExecutorInfoWhereUniqueInput
  }


  /**
   * ExecutorInfo deleteMany
   */
  export type ExecutorInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExecutorInfos to delete
     */
    where?: ExecutorInfoWhereInput
  }


  /**
   * ExecutorInfo.responses
   */
  export type ExecutorInfo$responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude<ExtArgs> | null
    where?: ResponseWhereInput
    orderBy?: ResponseOrderByWithRelationAndSearchRelevanceInput | ResponseOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: ResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResponseScalarFieldEnum | ResponseScalarFieldEnum[]
  }


  /**
   * ExecutorInfo.specializations
   */
  export type ExecutorInfo$specializationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialization
     */
    select?: SpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecializationInclude<ExtArgs> | null
    where?: SpecializationWhereInput
    orderBy?: SpecializationOrderByWithRelationAndSearchRelevanceInput | SpecializationOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: SpecializationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpecializationScalarFieldEnum | SpecializationScalarFieldEnum[]
  }


  /**
   * ExecutorInfo.activeOrders
   */
  export type ExecutorInfo$activeOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationAndSearchRelevanceInput | OrderOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * ExecutorInfo.doneOrders
   */
  export type ExecutorInfo$doneOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationAndSearchRelevanceInput | OrderOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * ExecutorInfo without action
   */
  export type ExecutorInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfo
     */
    select?: ExecutorInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutorInfoInclude<ExtArgs> | null
  }



  /**
   * Model CustomerInfo
   */

  export type AggregateCustomerInfo = {
    _count: CustomerInfoCountAggregateOutputType | null
    _avg: CustomerInfoAvgAggregateOutputType | null
    _sum: CustomerInfoSumAggregateOutputType | null
    _min: CustomerInfoMinAggregateOutputType | null
    _max: CustomerInfoMaxAggregateOutputType | null
  }

  export type CustomerInfoAvgAggregateOutputType = {
    rating: number | null
    ratingCount: number | null
  }

  export type CustomerInfoSumAggregateOutputType = {
    rating: number | null
    ratingCount: number | null
  }

  export type CustomerInfoMinAggregateOutputType = {
    id: string | null
    userId: string | null
    rating: number | null
    ratingCount: number | null
  }

  export type CustomerInfoMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    rating: number | null
    ratingCount: number | null
  }

  export type CustomerInfoCountAggregateOutputType = {
    id: number
    userId: number
    rating: number
    ratingCount: number
    _all: number
  }


  export type CustomerInfoAvgAggregateInputType = {
    rating?: true
    ratingCount?: true
  }

  export type CustomerInfoSumAggregateInputType = {
    rating?: true
    ratingCount?: true
  }

  export type CustomerInfoMinAggregateInputType = {
    id?: true
    userId?: true
    rating?: true
    ratingCount?: true
  }

  export type CustomerInfoMaxAggregateInputType = {
    id?: true
    userId?: true
    rating?: true
    ratingCount?: true
  }

  export type CustomerInfoCountAggregateInputType = {
    id?: true
    userId?: true
    rating?: true
    ratingCount?: true
    _all?: true
  }

  export type CustomerInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerInfo to aggregate.
     */
    where?: CustomerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerInfos to fetch.
     */
    orderBy?: CustomerInfoOrderByWithRelationAndSearchRelevanceInput | CustomerInfoOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerInfos
    **/
    _count?: true | CustomerInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerInfoMaxAggregateInputType
  }

  export type GetCustomerInfoAggregateType<T extends CustomerInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerInfo[P]>
      : GetScalarType<T[P], AggregateCustomerInfo[P]>
  }




  export type CustomerInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerInfoWhereInput
    orderBy?: CustomerInfoOrderByWithAggregationInput | CustomerInfoOrderByWithAggregationInput[]
    by: CustomerInfoScalarFieldEnum[] | CustomerInfoScalarFieldEnum
    having?: CustomerInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerInfoCountAggregateInputType | true
    _avg?: CustomerInfoAvgAggregateInputType
    _sum?: CustomerInfoSumAggregateInputType
    _min?: CustomerInfoMinAggregateInputType
    _max?: CustomerInfoMaxAggregateInputType
  }

  export type CustomerInfoGroupByOutputType = {
    id: string
    userId: string
    rating: number | null
    ratingCount: number
    _count: CustomerInfoCountAggregateOutputType | null
    _avg: CustomerInfoAvgAggregateOutputType | null
    _sum: CustomerInfoSumAggregateOutputType | null
    _min: CustomerInfoMinAggregateOutputType | null
    _max: CustomerInfoMaxAggregateOutputType | null
  }

  type GetCustomerInfoGroupByPayload<T extends CustomerInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerInfoGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerInfoGroupByOutputType[P]>
        }
      >
    >


  export type CustomerInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    rating?: boolean
    ratingCount?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    orders?: boolean | CustomerInfo$ordersArgs<ExtArgs>
    _count?: boolean | CustomerInfoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerInfo"]>

  export type CustomerInfoSelectScalar = {
    id?: boolean
    userId?: boolean
    rating?: boolean
    ratingCount?: boolean
  }

  export type CustomerInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    orders?: boolean | CustomerInfo$ordersArgs<ExtArgs>
    _count?: boolean | CustomerInfoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CustomerInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerInfo"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      rating: number | null
      ratingCount: number
    }, ExtArgs["result"]["customerInfo"]>
    composites: {}
  }


  type CustomerInfoGetPayload<S extends boolean | null | undefined | CustomerInfoDefaultArgs> = $Result.GetResult<Prisma.$CustomerInfoPayload, S>

  type CustomerInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomerInfoFindManyArgs, 'select' | 'include'> & {
      select?: CustomerInfoCountAggregateInputType | true
    }

  export interface CustomerInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerInfo'], meta: { name: 'CustomerInfo' } }
    /**
     * Find zero or one CustomerInfo that matches the filter.
     * @param {CustomerInfoFindUniqueArgs} args - Arguments to find a CustomerInfo
     * @example
     * // Get one CustomerInfo
     * const customerInfo = await prisma.customerInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CustomerInfoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerInfoFindUniqueArgs<ExtArgs>>
    ): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CustomerInfo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CustomerInfoFindUniqueOrThrowArgs} args - Arguments to find a CustomerInfo
     * @example
     * // Get one CustomerInfo
     * const customerInfo = await prisma.customerInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CustomerInfoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerInfoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CustomerInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerInfoFindFirstArgs} args - Arguments to find a CustomerInfo
     * @example
     * // Get one CustomerInfo
     * const customerInfo = await prisma.customerInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CustomerInfoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerInfoFindFirstArgs<ExtArgs>>
    ): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CustomerInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerInfoFindFirstOrThrowArgs} args - Arguments to find a CustomerInfo
     * @example
     * // Get one CustomerInfo
     * const customerInfo = await prisma.customerInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CustomerInfoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerInfoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CustomerInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerInfoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerInfos
     * const customerInfos = await prisma.customerInfo.findMany()
     * 
     * // Get first 10 CustomerInfos
     * const customerInfos = await prisma.customerInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerInfoWithIdOnly = await prisma.customerInfo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CustomerInfoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerInfoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CustomerInfo.
     * @param {CustomerInfoCreateArgs} args - Arguments to create a CustomerInfo.
     * @example
     * // Create one CustomerInfo
     * const CustomerInfo = await prisma.customerInfo.create({
     *   data: {
     *     // ... data to create a CustomerInfo
     *   }
     * })
     * 
    **/
    create<T extends CustomerInfoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerInfoCreateArgs<ExtArgs>>
    ): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CustomerInfos.
     *     @param {CustomerInfoCreateManyArgs} args - Arguments to create many CustomerInfos.
     *     @example
     *     // Create many CustomerInfos
     *     const customerInfo = await prisma.customerInfo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CustomerInfoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerInfoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CustomerInfo.
     * @param {CustomerInfoDeleteArgs} args - Arguments to delete one CustomerInfo.
     * @example
     * // Delete one CustomerInfo
     * const CustomerInfo = await prisma.customerInfo.delete({
     *   where: {
     *     // ... filter to delete one CustomerInfo
     *   }
     * })
     * 
    **/
    delete<T extends CustomerInfoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerInfoDeleteArgs<ExtArgs>>
    ): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CustomerInfo.
     * @param {CustomerInfoUpdateArgs} args - Arguments to update one CustomerInfo.
     * @example
     * // Update one CustomerInfo
     * const customerInfo = await prisma.customerInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CustomerInfoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerInfoUpdateArgs<ExtArgs>>
    ): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CustomerInfos.
     * @param {CustomerInfoDeleteManyArgs} args - Arguments to filter CustomerInfos to delete.
     * @example
     * // Delete a few CustomerInfos
     * const { count } = await prisma.customerInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CustomerInfoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerInfoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerInfos
     * const customerInfo = await prisma.customerInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CustomerInfoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerInfoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CustomerInfo.
     * @param {CustomerInfoUpsertArgs} args - Arguments to update or create a CustomerInfo.
     * @example
     * // Update or create a CustomerInfo
     * const customerInfo = await prisma.customerInfo.upsert({
     *   create: {
     *     // ... data to create a CustomerInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerInfo we want to update
     *   }
     * })
    **/
    upsert<T extends CustomerInfoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerInfoUpsertArgs<ExtArgs>>
    ): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CustomerInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerInfoCountArgs} args - Arguments to filter CustomerInfos to count.
     * @example
     * // Count the number of CustomerInfos
     * const count = await prisma.customerInfo.count({
     *   where: {
     *     // ... the filter for the CustomerInfos we want to count
     *   }
     * })
    **/
    count<T extends CustomerInfoCountArgs>(
      args?: Subset<T, CustomerInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerInfoAggregateArgs>(args: Subset<T, CustomerInfoAggregateArgs>): Prisma.PrismaPromise<GetCustomerInfoAggregateType<T>>

    /**
     * Group by CustomerInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerInfoGroupByArgs['orderBy'] }
        : { orderBy?: CustomerInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerInfo model
   */
  readonly fields: CustomerInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    orders<T extends CustomerInfo$ordersArgs<ExtArgs> = {}>(args?: Subset<T, CustomerInfo$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CustomerInfo model
   */ 
  interface CustomerInfoFieldRefs {
    readonly id: FieldRef<"CustomerInfo", 'String'>
    readonly userId: FieldRef<"CustomerInfo", 'String'>
    readonly rating: FieldRef<"CustomerInfo", 'Float'>
    readonly ratingCount: FieldRef<"CustomerInfo", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * CustomerInfo findUnique
   */
  export type CustomerInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * Filter, which CustomerInfo to fetch.
     */
    where: CustomerInfoWhereUniqueInput
  }


  /**
   * CustomerInfo findUniqueOrThrow
   */
  export type CustomerInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * Filter, which CustomerInfo to fetch.
     */
    where: CustomerInfoWhereUniqueInput
  }


  /**
   * CustomerInfo findFirst
   */
  export type CustomerInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * Filter, which CustomerInfo to fetch.
     */
    where?: CustomerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerInfos to fetch.
     */
    orderBy?: CustomerInfoOrderByWithRelationAndSearchRelevanceInput | CustomerInfoOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerInfos.
     */
    cursor?: CustomerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerInfos.
     */
    distinct?: CustomerInfoScalarFieldEnum | CustomerInfoScalarFieldEnum[]
  }


  /**
   * CustomerInfo findFirstOrThrow
   */
  export type CustomerInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * Filter, which CustomerInfo to fetch.
     */
    where?: CustomerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerInfos to fetch.
     */
    orderBy?: CustomerInfoOrderByWithRelationAndSearchRelevanceInput | CustomerInfoOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerInfos.
     */
    cursor?: CustomerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerInfos.
     */
    distinct?: CustomerInfoScalarFieldEnum | CustomerInfoScalarFieldEnum[]
  }


  /**
   * CustomerInfo findMany
   */
  export type CustomerInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * Filter, which CustomerInfos to fetch.
     */
    where?: CustomerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerInfos to fetch.
     */
    orderBy?: CustomerInfoOrderByWithRelationAndSearchRelevanceInput | CustomerInfoOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerInfos.
     */
    cursor?: CustomerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerInfos.
     */
    skip?: number
    distinct?: CustomerInfoScalarFieldEnum | CustomerInfoScalarFieldEnum[]
  }


  /**
   * CustomerInfo create
   */
  export type CustomerInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerInfo.
     */
    data: XOR<CustomerInfoCreateInput, CustomerInfoUncheckedCreateInput>
  }


  /**
   * CustomerInfo createMany
   */
  export type CustomerInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerInfos.
     */
    data: CustomerInfoCreateManyInput | CustomerInfoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CustomerInfo update
   */
  export type CustomerInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerInfo.
     */
    data: XOR<CustomerInfoUpdateInput, CustomerInfoUncheckedUpdateInput>
    /**
     * Choose, which CustomerInfo to update.
     */
    where: CustomerInfoWhereUniqueInput
  }


  /**
   * CustomerInfo updateMany
   */
  export type CustomerInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerInfos.
     */
    data: XOR<CustomerInfoUpdateManyMutationInput, CustomerInfoUncheckedUpdateManyInput>
    /**
     * Filter which CustomerInfos to update
     */
    where?: CustomerInfoWhereInput
  }


  /**
   * CustomerInfo upsert
   */
  export type CustomerInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerInfo to update in case it exists.
     */
    where: CustomerInfoWhereUniqueInput
    /**
     * In case the CustomerInfo found by the `where` argument doesn't exist, create a new CustomerInfo with this data.
     */
    create: XOR<CustomerInfoCreateInput, CustomerInfoUncheckedCreateInput>
    /**
     * In case the CustomerInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerInfoUpdateInput, CustomerInfoUncheckedUpdateInput>
  }


  /**
   * CustomerInfo delete
   */
  export type CustomerInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * Filter which CustomerInfo to delete.
     */
    where: CustomerInfoWhereUniqueInput
  }


  /**
   * CustomerInfo deleteMany
   */
  export type CustomerInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerInfos to delete
     */
    where?: CustomerInfoWhereInput
  }


  /**
   * CustomerInfo.orders
   */
  export type CustomerInfo$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationAndSearchRelevanceInput | OrderOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * CustomerInfo without action
   */
  export type CustomerInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInfoInclude<ExtArgs> | null
  }



  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    views: number | null
    cost: number | null
    responsesCount: number | null
  }

  export type OrderSumAggregateOutputType = {
    views: number | null
    cost: number | null
    responsesCount: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    customerId: string | null
    status: $Enums.OrderStatusEnum | null
    title: string | null
    description: string | null
    views: number | null
    costType: $Enums.CostTypeEnum | null
    cost: number | null
    comment: string | null
    responsesCount: number | null
    specializationId: string | null
    executorId: string | null
    doneExecutorId: string | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    customerId: string | null
    status: $Enums.OrderStatusEnum | null
    title: string | null
    description: string | null
    views: number | null
    costType: $Enums.CostTypeEnum | null
    cost: number | null
    comment: string | null
    responsesCount: number | null
    specializationId: string | null
    executorId: string | null
    doneExecutorId: string | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    customerId: number
    status: number
    title: number
    description: number
    files: number
    tags: number
    views: number
    costType: number
    cost: number
    comment: number
    responsesCount: number
    specializationId: number
    executorId: number
    doneExecutorId: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    views?: true
    cost?: true
    responsesCount?: true
  }

  export type OrderSumAggregateInputType = {
    views?: true
    cost?: true
    responsesCount?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    customerId?: true
    status?: true
    title?: true
    description?: true
    views?: true
    costType?: true
    cost?: true
    comment?: true
    responsesCount?: true
    specializationId?: true
    executorId?: true
    doneExecutorId?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    customerId?: true
    status?: true
    title?: true
    description?: true
    views?: true
    costType?: true
    cost?: true
    comment?: true
    responsesCount?: true
    specializationId?: true
    executorId?: true
    doneExecutorId?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    customerId?: true
    status?: true
    title?: true
    description?: true
    files?: true
    tags?: true
    views?: true
    costType?: true
    cost?: true
    comment?: true
    responsesCount?: true
    specializationId?: true
    executorId?: true
    doneExecutorId?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationAndSearchRelevanceInput | OrderOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    customerId: string
    status: $Enums.OrderStatusEnum
    title: string
    description: string | null
    files: string[]
    tags: string[]
    views: number
    costType: $Enums.CostTypeEnum
    cost: number | null
    comment: string | null
    responsesCount: number
    specializationId: string
    executorId: string | null
    doneExecutorId: string | null
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customerId?: boolean
    status?: boolean
    title?: boolean
    description?: boolean
    files?: boolean
    tags?: boolean
    views?: boolean
    costType?: boolean
    cost?: boolean
    comment?: boolean
    responsesCount?: boolean
    specializationId?: boolean
    executorId?: boolean
    doneExecutorId?: boolean
    customer?: boolean | CustomerInfoDefaultArgs<ExtArgs>
    responses?: boolean | Order$responsesArgs<ExtArgs>
    specialization?: boolean | SpecializationDefaultArgs<ExtArgs>
    executor?: boolean | Order$executorArgs<ExtArgs>
    doneExecutor?: boolean | Order$doneExecutorArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customerId?: boolean
    status?: boolean
    title?: boolean
    description?: boolean
    files?: boolean
    tags?: boolean
    views?: boolean
    costType?: boolean
    cost?: boolean
    comment?: boolean
    responsesCount?: boolean
    specializationId?: boolean
    executorId?: boolean
    doneExecutorId?: boolean
  }

  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerInfoDefaultArgs<ExtArgs>
    responses?: boolean | Order$responsesArgs<ExtArgs>
    specialization?: boolean | SpecializationDefaultArgs<ExtArgs>
    executor?: boolean | Order$executorArgs<ExtArgs>
    doneExecutor?: boolean | Order$doneExecutorArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      customer: Prisma.$CustomerInfoPayload<ExtArgs>
      responses: Prisma.$ResponsePayload<ExtArgs>[]
      specialization: Prisma.$SpecializationPayload<ExtArgs>
      executor: Prisma.$ExecutorInfoPayload<ExtArgs> | null
      doneExecutor: Prisma.$ExecutorInfoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      customerId: string
      status: $Enums.OrderStatusEnum
      title: string
      description: string | null
      files: string[]
      tags: string[]
      views: number
      costType: $Enums.CostTypeEnum
      cost: number | null
      comment: string | null
      responsesCount: number
      specializationId: string
      executorId: string | null
      doneExecutorId: string | null
    }, ExtArgs["result"]["order"]>
    composites: {}
  }


  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderFindManyArgs, 'select' | 'include'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Order that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
    **/
    create<T extends OrderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderCreateArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Orders.
     *     @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const order = await prisma.order.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
    **/
    delete<T extends OrderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
    **/
    upsert<T extends OrderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>
    ): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    customer<T extends CustomerInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerInfoDefaultArgs<ExtArgs>>): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    responses<T extends Order$responsesArgs<ExtArgs> = {}>(args?: Subset<T, Order$responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, 'findMany'> | Null>;

    specialization<T extends SpecializationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpecializationDefaultArgs<ExtArgs>>): Prisma__SpecializationClient<$Result.GetResult<Prisma.$SpecializationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    executor<T extends Order$executorArgs<ExtArgs> = {}>(args?: Subset<T, Order$executorArgs<ExtArgs>>): Prisma__ExecutorInfoClient<$Result.GetResult<Prisma.$ExecutorInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    doneExecutor<T extends Order$doneExecutorArgs<ExtArgs> = {}>(args?: Subset<T, Order$doneExecutorArgs<ExtArgs>>): Prisma__ExecutorInfoClient<$Result.GetResult<Prisma.$ExecutorInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Order model
   */ 
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'String'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
    readonly customerId: FieldRef<"Order", 'String'>
    readonly status: FieldRef<"Order", 'OrderStatusEnum'>
    readonly title: FieldRef<"Order", 'String'>
    readonly description: FieldRef<"Order", 'String'>
    readonly files: FieldRef<"Order", 'String[]'>
    readonly tags: FieldRef<"Order", 'String[]'>
    readonly views: FieldRef<"Order", 'Int'>
    readonly costType: FieldRef<"Order", 'CostTypeEnum'>
    readonly cost: FieldRef<"Order", 'Float'>
    readonly comment: FieldRef<"Order", 'String'>
    readonly responsesCount: FieldRef<"Order", 'Int'>
    readonly specializationId: FieldRef<"Order", 'String'>
    readonly executorId: FieldRef<"Order", 'String'>
    readonly doneExecutorId: FieldRef<"Order", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationAndSearchRelevanceInput | OrderOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationAndSearchRelevanceInput | OrderOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationAndSearchRelevanceInput | OrderOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }


  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
  }


  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }


  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
  }


  /**
   * Order.responses
   */
  export type Order$responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude<ExtArgs> | null
    where?: ResponseWhereInput
    orderBy?: ResponseOrderByWithRelationAndSearchRelevanceInput | ResponseOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: ResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResponseScalarFieldEnum | ResponseScalarFieldEnum[]
  }


  /**
   * Order.executor
   */
  export type Order$executorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfo
     */
    select?: ExecutorInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutorInfoInclude<ExtArgs> | null
    where?: ExecutorInfoWhereInput
  }


  /**
   * Order.doneExecutor
   */
  export type Order$doneExecutorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfo
     */
    select?: ExecutorInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutorInfoInclude<ExtArgs> | null
    where?: ExecutorInfoWhereInput
  }


  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
  }



  /**
   * Model Response
   */

  export type AggregateResponse = {
    _count: ResponseCountAggregateOutputType | null
    _min: ResponseMinAggregateOutputType | null
    _max: ResponseMaxAggregateOutputType | null
  }

  export type ResponseMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    orderId: string | null
    executorId: string | null
    comment: string | null
  }

  export type ResponseMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    orderId: string | null
    executorId: string | null
    comment: string | null
  }

  export type ResponseCountAggregateOutputType = {
    id: number
    createdAt: number
    orderId: number
    executorId: number
    comment: number
    _all: number
  }


  export type ResponseMinAggregateInputType = {
    id?: true
    createdAt?: true
    orderId?: true
    executorId?: true
    comment?: true
  }

  export type ResponseMaxAggregateInputType = {
    id?: true
    createdAt?: true
    orderId?: true
    executorId?: true
    comment?: true
  }

  export type ResponseCountAggregateInputType = {
    id?: true
    createdAt?: true
    orderId?: true
    executorId?: true
    comment?: true
    _all?: true
  }

  export type ResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Response to aggregate.
     */
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     */
    orderBy?: ResponseOrderByWithRelationAndSearchRelevanceInput | ResponseOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Responses
    **/
    _count?: true | ResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResponseMaxAggregateInputType
  }

  export type GetResponseAggregateType<T extends ResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResponse[P]>
      : GetScalarType<T[P], AggregateResponse[P]>
  }




  export type ResponseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResponseWhereInput
    orderBy?: ResponseOrderByWithAggregationInput | ResponseOrderByWithAggregationInput[]
    by: ResponseScalarFieldEnum[] | ResponseScalarFieldEnum
    having?: ResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResponseCountAggregateInputType | true
    _min?: ResponseMinAggregateInputType
    _max?: ResponseMaxAggregateInputType
  }

  export type ResponseGroupByOutputType = {
    id: string
    createdAt: Date
    orderId: string
    executorId: string
    comment: string
    _count: ResponseCountAggregateOutputType | null
    _min: ResponseMinAggregateOutputType | null
    _max: ResponseMaxAggregateOutputType | null
  }

  type GetResponseGroupByPayload<T extends ResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResponseGroupByOutputType[P]>
            : GetScalarType<T[P], ResponseGroupByOutputType[P]>
        }
      >
    >


  export type ResponseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    orderId?: boolean
    executorId?: boolean
    comment?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    executor?: boolean | ExecutorInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["response"]>

  export type ResponseSelectScalar = {
    id?: boolean
    createdAt?: boolean
    orderId?: boolean
    executorId?: boolean
    comment?: boolean
  }

  export type ResponseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    executor?: boolean | ExecutorInfoDefaultArgs<ExtArgs>
  }


  export type $ResponsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Response"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      executor: Prisma.$ExecutorInfoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      orderId: string
      executorId: string
      comment: string
    }, ExtArgs["result"]["response"]>
    composites: {}
  }


  type ResponseGetPayload<S extends boolean | null | undefined | ResponseDefaultArgs> = $Result.GetResult<Prisma.$ResponsePayload, S>

  type ResponseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResponseFindManyArgs, 'select' | 'include'> & {
      select?: ResponseCountAggregateInputType | true
    }

  export interface ResponseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Response'], meta: { name: 'Response' } }
    /**
     * Find zero or one Response that matches the filter.
     * @param {ResponseFindUniqueArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResponseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ResponseFindUniqueArgs<ExtArgs>>
    ): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Response that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ResponseFindUniqueOrThrowArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResponseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResponseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Response that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindFirstArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResponseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ResponseFindFirstArgs<ExtArgs>>
    ): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Response that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindFirstOrThrowArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResponseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResponseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Responses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Responses
     * const responses = await prisma.response.findMany()
     * 
     * // Get first 10 Responses
     * const responses = await prisma.response.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const responseWithIdOnly = await prisma.response.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResponseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResponseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Response.
     * @param {ResponseCreateArgs} args - Arguments to create a Response.
     * @example
     * // Create one Response
     * const Response = await prisma.response.create({
     *   data: {
     *     // ... data to create a Response
     *   }
     * })
     * 
    **/
    create<T extends ResponseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ResponseCreateArgs<ExtArgs>>
    ): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Responses.
     *     @param {ResponseCreateManyArgs} args - Arguments to create many Responses.
     *     @example
     *     // Create many Responses
     *     const response = await prisma.response.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResponseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResponseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Response.
     * @param {ResponseDeleteArgs} args - Arguments to delete one Response.
     * @example
     * // Delete one Response
     * const Response = await prisma.response.delete({
     *   where: {
     *     // ... filter to delete one Response
     *   }
     * })
     * 
    **/
    delete<T extends ResponseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ResponseDeleteArgs<ExtArgs>>
    ): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Response.
     * @param {ResponseUpdateArgs} args - Arguments to update one Response.
     * @example
     * // Update one Response
     * const response = await prisma.response.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResponseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ResponseUpdateArgs<ExtArgs>>
    ): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Responses.
     * @param {ResponseDeleteManyArgs} args - Arguments to filter Responses to delete.
     * @example
     * // Delete a few Responses
     * const { count } = await prisma.response.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResponseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResponseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Responses
     * const response = await prisma.response.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResponseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ResponseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Response.
     * @param {ResponseUpsertArgs} args - Arguments to update or create a Response.
     * @example
     * // Update or create a Response
     * const response = await prisma.response.upsert({
     *   create: {
     *     // ... data to create a Response
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Response we want to update
     *   }
     * })
    **/
    upsert<T extends ResponseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ResponseUpsertArgs<ExtArgs>>
    ): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseCountArgs} args - Arguments to filter Responses to count.
     * @example
     * // Count the number of Responses
     * const count = await prisma.response.count({
     *   where: {
     *     // ... the filter for the Responses we want to count
     *   }
     * })
    **/
    count<T extends ResponseCountArgs>(
      args?: Subset<T, ResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Response.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResponseAggregateArgs>(args: Subset<T, ResponseAggregateArgs>): Prisma.PrismaPromise<GetResponseAggregateType<T>>

    /**
     * Group by Response.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResponseGroupByArgs['orderBy'] }
        : { orderBy?: ResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Response model
   */
  readonly fields: ResponseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Response.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResponseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    executor<T extends ExecutorInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExecutorInfoDefaultArgs<ExtArgs>>): Prisma__ExecutorInfoClient<$Result.GetResult<Prisma.$ExecutorInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Response model
   */ 
  interface ResponseFieldRefs {
    readonly id: FieldRef<"Response", 'String'>
    readonly createdAt: FieldRef<"Response", 'DateTime'>
    readonly orderId: FieldRef<"Response", 'String'>
    readonly executorId: FieldRef<"Response", 'String'>
    readonly comment: FieldRef<"Response", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Response findUnique
   */
  export type ResponseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * Filter, which Response to fetch.
     */
    where: ResponseWhereUniqueInput
  }


  /**
   * Response findUniqueOrThrow
   */
  export type ResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * Filter, which Response to fetch.
     */
    where: ResponseWhereUniqueInput
  }


  /**
   * Response findFirst
   */
  export type ResponseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * Filter, which Response to fetch.
     */
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     */
    orderBy?: ResponseOrderByWithRelationAndSearchRelevanceInput | ResponseOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Responses.
     */
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Responses.
     */
    distinct?: ResponseScalarFieldEnum | ResponseScalarFieldEnum[]
  }


  /**
   * Response findFirstOrThrow
   */
  export type ResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * Filter, which Response to fetch.
     */
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     */
    orderBy?: ResponseOrderByWithRelationAndSearchRelevanceInput | ResponseOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Responses.
     */
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Responses.
     */
    distinct?: ResponseScalarFieldEnum | ResponseScalarFieldEnum[]
  }


  /**
   * Response findMany
   */
  export type ResponseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * Filter, which Responses to fetch.
     */
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     */
    orderBy?: ResponseOrderByWithRelationAndSearchRelevanceInput | ResponseOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Responses.
     */
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     */
    skip?: number
    distinct?: ResponseScalarFieldEnum | ResponseScalarFieldEnum[]
  }


  /**
   * Response create
   */
  export type ResponseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a Response.
     */
    data: XOR<ResponseCreateInput, ResponseUncheckedCreateInput>
  }


  /**
   * Response createMany
   */
  export type ResponseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Responses.
     */
    data: ResponseCreateManyInput | ResponseCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Response update
   */
  export type ResponseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a Response.
     */
    data: XOR<ResponseUpdateInput, ResponseUncheckedUpdateInput>
    /**
     * Choose, which Response to update.
     */
    where: ResponseWhereUniqueInput
  }


  /**
   * Response updateMany
   */
  export type ResponseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Responses.
     */
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyInput>
    /**
     * Filter which Responses to update
     */
    where?: ResponseWhereInput
  }


  /**
   * Response upsert
   */
  export type ResponseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the Response to update in case it exists.
     */
    where: ResponseWhereUniqueInput
    /**
     * In case the Response found by the `where` argument doesn't exist, create a new Response with this data.
     */
    create: XOR<ResponseCreateInput, ResponseUncheckedCreateInput>
    /**
     * In case the Response was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResponseUpdateInput, ResponseUncheckedUpdateInput>
  }


  /**
   * Response delete
   */
  export type ResponseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * Filter which Response to delete.
     */
    where: ResponseWhereUniqueInput
  }


  /**
   * Response deleteMany
   */
  export type ResponseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Responses to delete
     */
    where?: ResponseWhereInput
  }


  /**
   * Response without action
   */
  export type ResponseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResponseInclude<ExtArgs> | null
  }



  /**
   * Model Specialization
   */

  export type AggregateSpecialization = {
    _count: SpecializationCountAggregateOutputType | null
    _min: SpecializationMinAggregateOutputType | null
    _max: SpecializationMaxAggregateOutputType | null
  }

  export type SpecializationMinAggregateOutputType = {
    id: string | null
    title: string | null
    topLevelTitle: string | null
  }

  export type SpecializationMaxAggregateOutputType = {
    id: string | null
    title: string | null
    topLevelTitle: string | null
  }

  export type SpecializationCountAggregateOutputType = {
    id: number
    title: number
    topLevelTitle: number
    _all: number
  }


  export type SpecializationMinAggregateInputType = {
    id?: true
    title?: true
    topLevelTitle?: true
  }

  export type SpecializationMaxAggregateInputType = {
    id?: true
    title?: true
    topLevelTitle?: true
  }

  export type SpecializationCountAggregateInputType = {
    id?: true
    title?: true
    topLevelTitle?: true
    _all?: true
  }

  export type SpecializationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Specialization to aggregate.
     */
    where?: SpecializationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specializations to fetch.
     */
    orderBy?: SpecializationOrderByWithRelationAndSearchRelevanceInput | SpecializationOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpecializationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specializations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specializations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Specializations
    **/
    _count?: true | SpecializationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpecializationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpecializationMaxAggregateInputType
  }

  export type GetSpecializationAggregateType<T extends SpecializationAggregateArgs> = {
        [P in keyof T & keyof AggregateSpecialization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpecialization[P]>
      : GetScalarType<T[P], AggregateSpecialization[P]>
  }




  export type SpecializationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpecializationWhereInput
    orderBy?: SpecializationOrderByWithAggregationInput | SpecializationOrderByWithAggregationInput[]
    by: SpecializationScalarFieldEnum[] | SpecializationScalarFieldEnum
    having?: SpecializationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpecializationCountAggregateInputType | true
    _min?: SpecializationMinAggregateInputType
    _max?: SpecializationMaxAggregateInputType
  }

  export type SpecializationGroupByOutputType = {
    id: string
    title: string
    topLevelTitle: string
    _count: SpecializationCountAggregateOutputType | null
    _min: SpecializationMinAggregateOutputType | null
    _max: SpecializationMaxAggregateOutputType | null
  }

  type GetSpecializationGroupByPayload<T extends SpecializationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpecializationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpecializationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpecializationGroupByOutputType[P]>
            : GetScalarType<T[P], SpecializationGroupByOutputType[P]>
        }
      >
    >


  export type SpecializationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    topLevelTitle?: boolean
    orders?: boolean | Specialization$ordersArgs<ExtArgs>
    executors?: boolean | Specialization$executorsArgs<ExtArgs>
    _count?: boolean | SpecializationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["specialization"]>

  export type SpecializationSelectScalar = {
    id?: boolean
    title?: boolean
    topLevelTitle?: boolean
  }

  export type SpecializationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | Specialization$ordersArgs<ExtArgs>
    executors?: boolean | Specialization$executorsArgs<ExtArgs>
    _count?: boolean | SpecializationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SpecializationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Specialization"
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[]
      executors: Prisma.$ExecutorInfoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      topLevelTitle: string
    }, ExtArgs["result"]["specialization"]>
    composites: {}
  }


  type SpecializationGetPayload<S extends boolean | null | undefined | SpecializationDefaultArgs> = $Result.GetResult<Prisma.$SpecializationPayload, S>

  type SpecializationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SpecializationFindManyArgs, 'select' | 'include'> & {
      select?: SpecializationCountAggregateInputType | true
    }

  export interface SpecializationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Specialization'], meta: { name: 'Specialization' } }
    /**
     * Find zero or one Specialization that matches the filter.
     * @param {SpecializationFindUniqueArgs} args - Arguments to find a Specialization
     * @example
     * // Get one Specialization
     * const specialization = await prisma.specialization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SpecializationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SpecializationFindUniqueArgs<ExtArgs>>
    ): Prisma__SpecializationClient<$Result.GetResult<Prisma.$SpecializationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Specialization that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SpecializationFindUniqueOrThrowArgs} args - Arguments to find a Specialization
     * @example
     * // Get one Specialization
     * const specialization = await prisma.specialization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SpecializationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecializationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SpecializationClient<$Result.GetResult<Prisma.$SpecializationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Specialization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecializationFindFirstArgs} args - Arguments to find a Specialization
     * @example
     * // Get one Specialization
     * const specialization = await prisma.specialization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SpecializationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecializationFindFirstArgs<ExtArgs>>
    ): Prisma__SpecializationClient<$Result.GetResult<Prisma.$SpecializationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Specialization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecializationFindFirstOrThrowArgs} args - Arguments to find a Specialization
     * @example
     * // Get one Specialization
     * const specialization = await prisma.specialization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SpecializationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecializationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SpecializationClient<$Result.GetResult<Prisma.$SpecializationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Specializations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecializationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Specializations
     * const specializations = await prisma.specialization.findMany()
     * 
     * // Get first 10 Specializations
     * const specializations = await prisma.specialization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const specializationWithIdOnly = await prisma.specialization.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SpecializationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecializationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecializationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Specialization.
     * @param {SpecializationCreateArgs} args - Arguments to create a Specialization.
     * @example
     * // Create one Specialization
     * const Specialization = await prisma.specialization.create({
     *   data: {
     *     // ... data to create a Specialization
     *   }
     * })
     * 
    **/
    create<T extends SpecializationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SpecializationCreateArgs<ExtArgs>>
    ): Prisma__SpecializationClient<$Result.GetResult<Prisma.$SpecializationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Specializations.
     *     @param {SpecializationCreateManyArgs} args - Arguments to create many Specializations.
     *     @example
     *     // Create many Specializations
     *     const specialization = await prisma.specialization.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SpecializationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecializationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Specialization.
     * @param {SpecializationDeleteArgs} args - Arguments to delete one Specialization.
     * @example
     * // Delete one Specialization
     * const Specialization = await prisma.specialization.delete({
     *   where: {
     *     // ... filter to delete one Specialization
     *   }
     * })
     * 
    **/
    delete<T extends SpecializationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SpecializationDeleteArgs<ExtArgs>>
    ): Prisma__SpecializationClient<$Result.GetResult<Prisma.$SpecializationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Specialization.
     * @param {SpecializationUpdateArgs} args - Arguments to update one Specialization.
     * @example
     * // Update one Specialization
     * const specialization = await prisma.specialization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SpecializationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SpecializationUpdateArgs<ExtArgs>>
    ): Prisma__SpecializationClient<$Result.GetResult<Prisma.$SpecializationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Specializations.
     * @param {SpecializationDeleteManyArgs} args - Arguments to filter Specializations to delete.
     * @example
     * // Delete a few Specializations
     * const { count } = await prisma.specialization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SpecializationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecializationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Specializations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecializationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Specializations
     * const specialization = await prisma.specialization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SpecializationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SpecializationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Specialization.
     * @param {SpecializationUpsertArgs} args - Arguments to update or create a Specialization.
     * @example
     * // Update or create a Specialization
     * const specialization = await prisma.specialization.upsert({
     *   create: {
     *     // ... data to create a Specialization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Specialization we want to update
     *   }
     * })
    **/
    upsert<T extends SpecializationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SpecializationUpsertArgs<ExtArgs>>
    ): Prisma__SpecializationClient<$Result.GetResult<Prisma.$SpecializationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Specializations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecializationCountArgs} args - Arguments to filter Specializations to count.
     * @example
     * // Count the number of Specializations
     * const count = await prisma.specialization.count({
     *   where: {
     *     // ... the filter for the Specializations we want to count
     *   }
     * })
    **/
    count<T extends SpecializationCountArgs>(
      args?: Subset<T, SpecializationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpecializationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Specialization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecializationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpecializationAggregateArgs>(args: Subset<T, SpecializationAggregateArgs>): Prisma.PrismaPromise<GetSpecializationAggregateType<T>>

    /**
     * Group by Specialization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecializationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpecializationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpecializationGroupByArgs['orderBy'] }
        : { orderBy?: SpecializationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpecializationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpecializationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Specialization model
   */
  readonly fields: SpecializationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Specialization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpecializationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    orders<T extends Specialization$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Specialization$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, 'findMany'> | Null>;

    executors<T extends Specialization$executorsArgs<ExtArgs> = {}>(args?: Subset<T, Specialization$executorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExecutorInfoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Specialization model
   */ 
  interface SpecializationFieldRefs {
    readonly id: FieldRef<"Specialization", 'String'>
    readonly title: FieldRef<"Specialization", 'String'>
    readonly topLevelTitle: FieldRef<"Specialization", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Specialization findUnique
   */
  export type SpecializationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialization
     */
    select?: SpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecializationInclude<ExtArgs> | null
    /**
     * Filter, which Specialization to fetch.
     */
    where: SpecializationWhereUniqueInput
  }


  /**
   * Specialization findUniqueOrThrow
   */
  export type SpecializationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialization
     */
    select?: SpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecializationInclude<ExtArgs> | null
    /**
     * Filter, which Specialization to fetch.
     */
    where: SpecializationWhereUniqueInput
  }


  /**
   * Specialization findFirst
   */
  export type SpecializationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialization
     */
    select?: SpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecializationInclude<ExtArgs> | null
    /**
     * Filter, which Specialization to fetch.
     */
    where?: SpecializationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specializations to fetch.
     */
    orderBy?: SpecializationOrderByWithRelationAndSearchRelevanceInput | SpecializationOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Specializations.
     */
    cursor?: SpecializationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specializations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specializations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Specializations.
     */
    distinct?: SpecializationScalarFieldEnum | SpecializationScalarFieldEnum[]
  }


  /**
   * Specialization findFirstOrThrow
   */
  export type SpecializationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialization
     */
    select?: SpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecializationInclude<ExtArgs> | null
    /**
     * Filter, which Specialization to fetch.
     */
    where?: SpecializationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specializations to fetch.
     */
    orderBy?: SpecializationOrderByWithRelationAndSearchRelevanceInput | SpecializationOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Specializations.
     */
    cursor?: SpecializationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specializations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specializations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Specializations.
     */
    distinct?: SpecializationScalarFieldEnum | SpecializationScalarFieldEnum[]
  }


  /**
   * Specialization findMany
   */
  export type SpecializationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialization
     */
    select?: SpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecializationInclude<ExtArgs> | null
    /**
     * Filter, which Specializations to fetch.
     */
    where?: SpecializationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specializations to fetch.
     */
    orderBy?: SpecializationOrderByWithRelationAndSearchRelevanceInput | SpecializationOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Specializations.
     */
    cursor?: SpecializationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specializations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specializations.
     */
    skip?: number
    distinct?: SpecializationScalarFieldEnum | SpecializationScalarFieldEnum[]
  }


  /**
   * Specialization create
   */
  export type SpecializationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialization
     */
    select?: SpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecializationInclude<ExtArgs> | null
    /**
     * The data needed to create a Specialization.
     */
    data: XOR<SpecializationCreateInput, SpecializationUncheckedCreateInput>
  }


  /**
   * Specialization createMany
   */
  export type SpecializationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Specializations.
     */
    data: SpecializationCreateManyInput | SpecializationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Specialization update
   */
  export type SpecializationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialization
     */
    select?: SpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecializationInclude<ExtArgs> | null
    /**
     * The data needed to update a Specialization.
     */
    data: XOR<SpecializationUpdateInput, SpecializationUncheckedUpdateInput>
    /**
     * Choose, which Specialization to update.
     */
    where: SpecializationWhereUniqueInput
  }


  /**
   * Specialization updateMany
   */
  export type SpecializationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Specializations.
     */
    data: XOR<SpecializationUpdateManyMutationInput, SpecializationUncheckedUpdateManyInput>
    /**
     * Filter which Specializations to update
     */
    where?: SpecializationWhereInput
  }


  /**
   * Specialization upsert
   */
  export type SpecializationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialization
     */
    select?: SpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecializationInclude<ExtArgs> | null
    /**
     * The filter to search for the Specialization to update in case it exists.
     */
    where: SpecializationWhereUniqueInput
    /**
     * In case the Specialization found by the `where` argument doesn't exist, create a new Specialization with this data.
     */
    create: XOR<SpecializationCreateInput, SpecializationUncheckedCreateInput>
    /**
     * In case the Specialization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpecializationUpdateInput, SpecializationUncheckedUpdateInput>
  }


  /**
   * Specialization delete
   */
  export type SpecializationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialization
     */
    select?: SpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecializationInclude<ExtArgs> | null
    /**
     * Filter which Specialization to delete.
     */
    where: SpecializationWhereUniqueInput
  }


  /**
   * Specialization deleteMany
   */
  export type SpecializationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Specializations to delete
     */
    where?: SpecializationWhereInput
  }


  /**
   * Specialization.orders
   */
  export type Specialization$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationAndSearchRelevanceInput | OrderOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }


  /**
   * Specialization.executors
   */
  export type Specialization$executorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutorInfo
     */
    select?: ExecutorInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutorInfoInclude<ExtArgs> | null
    where?: ExecutorInfoWhereInput
    orderBy?: ExecutorInfoOrderByWithRelationAndSearchRelevanceInput | ExecutorInfoOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: ExecutorInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExecutorInfoScalarFieldEnum | ExecutorInfoScalarFieldEnum[]
  }


  /**
   * Specialization without action
   */
  export type SpecializationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Specialization
     */
    select?: SpecializationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpecializationInclude<ExtArgs> | null
  }



  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactMinAggregateOutputType = {
    id: string | null
    userId: string | null
    site: string | null
    phone: string | null
    mail: string | null
    telegram: string | null
  }

  export type ContactMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    site: string | null
    phone: string | null
    mail: string | null
    telegram: string | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    userId: number
    site: number
    phone: number
    mail: number
    telegram: number
    _all: number
  }


  export type ContactMinAggregateInputType = {
    id?: true
    userId?: true
    site?: true
    phone?: true
    mail?: true
    telegram?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    userId?: true
    site?: true
    phone?: true
    mail?: true
    telegram?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    userId?: true
    site?: true
    phone?: true
    mail?: true
    telegram?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationAndSearchRelevanceInput | ContactOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: string
    userId: string
    site: string | null
    phone: string | null
    mail: string | null
    telegram: string | null
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    site?: boolean
    phone?: boolean
    mail?: boolean
    telegram?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    userId?: boolean
    site?: boolean
    phone?: boolean
    mail?: boolean
    telegram?: boolean
  }

  export type ContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      site: string | null
      phone: string | null
      mail: string | null
      telegram: string | null
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }


  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContactFindManyArgs, 'select' | 'include'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContactFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Contact that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContactFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContactFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
    **/
    create<T extends ContactCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactCreateArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Contacts.
     *     @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     *     @example
     *     // Create many Contacts
     *     const contact = await prisma.contact.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContactCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
    **/
    delete<T extends ContactDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContactUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContactDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContactUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
    **/
    upsert<T extends ContactUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Contact model
   */ 
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'String'>
    readonly userId: FieldRef<"Contact", 'String'>
    readonly site: FieldRef<"Contact", 'String'>
    readonly phone: FieldRef<"Contact", 'String'>
    readonly mail: FieldRef<"Contact", 'String'>
    readonly telegram: FieldRef<"Contact", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }


  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }


  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationAndSearchRelevanceInput | ContactOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }


  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationAndSearchRelevanceInput | ContactOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }


  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationAndSearchRelevanceInput | ContactOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }


  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }


  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }


  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
  }


  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }


  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }


  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
  }


  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
  }



  /**
   * Model TopUpBalance
   */

  export type AggregateTopUpBalance = {
    _count: TopUpBalanceCountAggregateOutputType | null
    _avg: TopUpBalanceAvgAggregateOutputType | null
    _sum: TopUpBalanceSumAggregateOutputType | null
    _min: TopUpBalanceMinAggregateOutputType | null
    _max: TopUpBalanceMaxAggregateOutputType | null
  }

  export type TopUpBalanceAvgAggregateOutputType = {
    sum: number | null
  }

  export type TopUpBalanceSumAggregateOutputType = {
    sum: number | null
  }

  export type TopUpBalanceMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    sum: number | null
    reason: string | null
    toUserId: string | null
  }

  export type TopUpBalanceMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    sum: number | null
    reason: string | null
    toUserId: string | null
  }

  export type TopUpBalanceCountAggregateOutputType = {
    id: number
    createdAt: number
    sum: number
    reason: number
    toUserId: number
    _all: number
  }


  export type TopUpBalanceAvgAggregateInputType = {
    sum?: true
  }

  export type TopUpBalanceSumAggregateInputType = {
    sum?: true
  }

  export type TopUpBalanceMinAggregateInputType = {
    id?: true
    createdAt?: true
    sum?: true
    reason?: true
    toUserId?: true
  }

  export type TopUpBalanceMaxAggregateInputType = {
    id?: true
    createdAt?: true
    sum?: true
    reason?: true
    toUserId?: true
  }

  export type TopUpBalanceCountAggregateInputType = {
    id?: true
    createdAt?: true
    sum?: true
    reason?: true
    toUserId?: true
    _all?: true
  }

  export type TopUpBalanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TopUpBalance to aggregate.
     */
    where?: TopUpBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopUpBalances to fetch.
     */
    orderBy?: TopUpBalanceOrderByWithRelationAndSearchRelevanceInput | TopUpBalanceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TopUpBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopUpBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopUpBalances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TopUpBalances
    **/
    _count?: true | TopUpBalanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TopUpBalanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TopUpBalanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TopUpBalanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TopUpBalanceMaxAggregateInputType
  }

  export type GetTopUpBalanceAggregateType<T extends TopUpBalanceAggregateArgs> = {
        [P in keyof T & keyof AggregateTopUpBalance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTopUpBalance[P]>
      : GetScalarType<T[P], AggregateTopUpBalance[P]>
  }




  export type TopUpBalanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopUpBalanceWhereInput
    orderBy?: TopUpBalanceOrderByWithAggregationInput | TopUpBalanceOrderByWithAggregationInput[]
    by: TopUpBalanceScalarFieldEnum[] | TopUpBalanceScalarFieldEnum
    having?: TopUpBalanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TopUpBalanceCountAggregateInputType | true
    _avg?: TopUpBalanceAvgAggregateInputType
    _sum?: TopUpBalanceSumAggregateInputType
    _min?: TopUpBalanceMinAggregateInputType
    _max?: TopUpBalanceMaxAggregateInputType
  }

  export type TopUpBalanceGroupByOutputType = {
    id: string
    createdAt: Date
    sum: number
    reason: string
    toUserId: string | null
    _count: TopUpBalanceCountAggregateOutputType | null
    _avg: TopUpBalanceAvgAggregateOutputType | null
    _sum: TopUpBalanceSumAggregateOutputType | null
    _min: TopUpBalanceMinAggregateOutputType | null
    _max: TopUpBalanceMaxAggregateOutputType | null
  }

  type GetTopUpBalanceGroupByPayload<T extends TopUpBalanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TopUpBalanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TopUpBalanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TopUpBalanceGroupByOutputType[P]>
            : GetScalarType<T[P], TopUpBalanceGroupByOutputType[P]>
        }
      >
    >


  export type TopUpBalanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    sum?: boolean
    reason?: boolean
    toUserId?: boolean
    toUser?: boolean | TopUpBalance$toUserArgs<ExtArgs>
  }, ExtArgs["result"]["topUpBalance"]>

  export type TopUpBalanceSelectScalar = {
    id?: boolean
    createdAt?: boolean
    sum?: boolean
    reason?: boolean
    toUserId?: boolean
  }

  export type TopUpBalanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    toUser?: boolean | TopUpBalance$toUserArgs<ExtArgs>
  }


  export type $TopUpBalancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TopUpBalance"
    objects: {
      toUser: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      sum: number
      reason: string
      toUserId: string | null
    }, ExtArgs["result"]["topUpBalance"]>
    composites: {}
  }


  type TopUpBalanceGetPayload<S extends boolean | null | undefined | TopUpBalanceDefaultArgs> = $Result.GetResult<Prisma.$TopUpBalancePayload, S>

  type TopUpBalanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TopUpBalanceFindManyArgs, 'select' | 'include'> & {
      select?: TopUpBalanceCountAggregateInputType | true
    }

  export interface TopUpBalanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TopUpBalance'], meta: { name: 'TopUpBalance' } }
    /**
     * Find zero or one TopUpBalance that matches the filter.
     * @param {TopUpBalanceFindUniqueArgs} args - Arguments to find a TopUpBalance
     * @example
     * // Get one TopUpBalance
     * const topUpBalance = await prisma.topUpBalance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TopUpBalanceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TopUpBalanceFindUniqueArgs<ExtArgs>>
    ): Prisma__TopUpBalanceClient<$Result.GetResult<Prisma.$TopUpBalancePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TopUpBalance that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TopUpBalanceFindUniqueOrThrowArgs} args - Arguments to find a TopUpBalance
     * @example
     * // Get one TopUpBalance
     * const topUpBalance = await prisma.topUpBalance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TopUpBalanceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TopUpBalanceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TopUpBalanceClient<$Result.GetResult<Prisma.$TopUpBalancePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TopUpBalance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopUpBalanceFindFirstArgs} args - Arguments to find a TopUpBalance
     * @example
     * // Get one TopUpBalance
     * const topUpBalance = await prisma.topUpBalance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TopUpBalanceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TopUpBalanceFindFirstArgs<ExtArgs>>
    ): Prisma__TopUpBalanceClient<$Result.GetResult<Prisma.$TopUpBalancePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TopUpBalance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopUpBalanceFindFirstOrThrowArgs} args - Arguments to find a TopUpBalance
     * @example
     * // Get one TopUpBalance
     * const topUpBalance = await prisma.topUpBalance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TopUpBalanceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TopUpBalanceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TopUpBalanceClient<$Result.GetResult<Prisma.$TopUpBalancePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TopUpBalances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopUpBalanceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TopUpBalances
     * const topUpBalances = await prisma.topUpBalance.findMany()
     * 
     * // Get first 10 TopUpBalances
     * const topUpBalances = await prisma.topUpBalance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const topUpBalanceWithIdOnly = await prisma.topUpBalance.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TopUpBalanceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TopUpBalanceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopUpBalancePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TopUpBalance.
     * @param {TopUpBalanceCreateArgs} args - Arguments to create a TopUpBalance.
     * @example
     * // Create one TopUpBalance
     * const TopUpBalance = await prisma.topUpBalance.create({
     *   data: {
     *     // ... data to create a TopUpBalance
     *   }
     * })
     * 
    **/
    create<T extends TopUpBalanceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TopUpBalanceCreateArgs<ExtArgs>>
    ): Prisma__TopUpBalanceClient<$Result.GetResult<Prisma.$TopUpBalancePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TopUpBalances.
     *     @param {TopUpBalanceCreateManyArgs} args - Arguments to create many TopUpBalances.
     *     @example
     *     // Create many TopUpBalances
     *     const topUpBalance = await prisma.topUpBalance.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TopUpBalanceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TopUpBalanceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TopUpBalance.
     * @param {TopUpBalanceDeleteArgs} args - Arguments to delete one TopUpBalance.
     * @example
     * // Delete one TopUpBalance
     * const TopUpBalance = await prisma.topUpBalance.delete({
     *   where: {
     *     // ... filter to delete one TopUpBalance
     *   }
     * })
     * 
    **/
    delete<T extends TopUpBalanceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TopUpBalanceDeleteArgs<ExtArgs>>
    ): Prisma__TopUpBalanceClient<$Result.GetResult<Prisma.$TopUpBalancePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TopUpBalance.
     * @param {TopUpBalanceUpdateArgs} args - Arguments to update one TopUpBalance.
     * @example
     * // Update one TopUpBalance
     * const topUpBalance = await prisma.topUpBalance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TopUpBalanceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TopUpBalanceUpdateArgs<ExtArgs>>
    ): Prisma__TopUpBalanceClient<$Result.GetResult<Prisma.$TopUpBalancePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TopUpBalances.
     * @param {TopUpBalanceDeleteManyArgs} args - Arguments to filter TopUpBalances to delete.
     * @example
     * // Delete a few TopUpBalances
     * const { count } = await prisma.topUpBalance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TopUpBalanceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TopUpBalanceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TopUpBalances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopUpBalanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TopUpBalances
     * const topUpBalance = await prisma.topUpBalance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TopUpBalanceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TopUpBalanceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TopUpBalance.
     * @param {TopUpBalanceUpsertArgs} args - Arguments to update or create a TopUpBalance.
     * @example
     * // Update or create a TopUpBalance
     * const topUpBalance = await prisma.topUpBalance.upsert({
     *   create: {
     *     // ... data to create a TopUpBalance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TopUpBalance we want to update
     *   }
     * })
    **/
    upsert<T extends TopUpBalanceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TopUpBalanceUpsertArgs<ExtArgs>>
    ): Prisma__TopUpBalanceClient<$Result.GetResult<Prisma.$TopUpBalancePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TopUpBalances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopUpBalanceCountArgs} args - Arguments to filter TopUpBalances to count.
     * @example
     * // Count the number of TopUpBalances
     * const count = await prisma.topUpBalance.count({
     *   where: {
     *     // ... the filter for the TopUpBalances we want to count
     *   }
     * })
    **/
    count<T extends TopUpBalanceCountArgs>(
      args?: Subset<T, TopUpBalanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TopUpBalanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TopUpBalance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopUpBalanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TopUpBalanceAggregateArgs>(args: Subset<T, TopUpBalanceAggregateArgs>): Prisma.PrismaPromise<GetTopUpBalanceAggregateType<T>>

    /**
     * Group by TopUpBalance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopUpBalanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TopUpBalanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TopUpBalanceGroupByArgs['orderBy'] }
        : { orderBy?: TopUpBalanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TopUpBalanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopUpBalanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TopUpBalance model
   */
  readonly fields: TopUpBalanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TopUpBalance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TopUpBalanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    toUser<T extends TopUpBalance$toUserArgs<ExtArgs> = {}>(args?: Subset<T, TopUpBalance$toUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TopUpBalance model
   */ 
  interface TopUpBalanceFieldRefs {
    readonly id: FieldRef<"TopUpBalance", 'String'>
    readonly createdAt: FieldRef<"TopUpBalance", 'DateTime'>
    readonly sum: FieldRef<"TopUpBalance", 'Float'>
    readonly reason: FieldRef<"TopUpBalance", 'String'>
    readonly toUserId: FieldRef<"TopUpBalance", 'String'>
  }
    

  // Custom InputTypes

  /**
   * TopUpBalance findUnique
   */
  export type TopUpBalanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpBalance
     */
    select?: TopUpBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TopUpBalanceInclude<ExtArgs> | null
    /**
     * Filter, which TopUpBalance to fetch.
     */
    where: TopUpBalanceWhereUniqueInput
  }


  /**
   * TopUpBalance findUniqueOrThrow
   */
  export type TopUpBalanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpBalance
     */
    select?: TopUpBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TopUpBalanceInclude<ExtArgs> | null
    /**
     * Filter, which TopUpBalance to fetch.
     */
    where: TopUpBalanceWhereUniqueInput
  }


  /**
   * TopUpBalance findFirst
   */
  export type TopUpBalanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpBalance
     */
    select?: TopUpBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TopUpBalanceInclude<ExtArgs> | null
    /**
     * Filter, which TopUpBalance to fetch.
     */
    where?: TopUpBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopUpBalances to fetch.
     */
    orderBy?: TopUpBalanceOrderByWithRelationAndSearchRelevanceInput | TopUpBalanceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TopUpBalances.
     */
    cursor?: TopUpBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopUpBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopUpBalances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TopUpBalances.
     */
    distinct?: TopUpBalanceScalarFieldEnum | TopUpBalanceScalarFieldEnum[]
  }


  /**
   * TopUpBalance findFirstOrThrow
   */
  export type TopUpBalanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpBalance
     */
    select?: TopUpBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TopUpBalanceInclude<ExtArgs> | null
    /**
     * Filter, which TopUpBalance to fetch.
     */
    where?: TopUpBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopUpBalances to fetch.
     */
    orderBy?: TopUpBalanceOrderByWithRelationAndSearchRelevanceInput | TopUpBalanceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TopUpBalances.
     */
    cursor?: TopUpBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopUpBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopUpBalances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TopUpBalances.
     */
    distinct?: TopUpBalanceScalarFieldEnum | TopUpBalanceScalarFieldEnum[]
  }


  /**
   * TopUpBalance findMany
   */
  export type TopUpBalanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpBalance
     */
    select?: TopUpBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TopUpBalanceInclude<ExtArgs> | null
    /**
     * Filter, which TopUpBalances to fetch.
     */
    where?: TopUpBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopUpBalances to fetch.
     */
    orderBy?: TopUpBalanceOrderByWithRelationAndSearchRelevanceInput | TopUpBalanceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TopUpBalances.
     */
    cursor?: TopUpBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopUpBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopUpBalances.
     */
    skip?: number
    distinct?: TopUpBalanceScalarFieldEnum | TopUpBalanceScalarFieldEnum[]
  }


  /**
   * TopUpBalance create
   */
  export type TopUpBalanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpBalance
     */
    select?: TopUpBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TopUpBalanceInclude<ExtArgs> | null
    /**
     * The data needed to create a TopUpBalance.
     */
    data: XOR<TopUpBalanceCreateInput, TopUpBalanceUncheckedCreateInput>
  }


  /**
   * TopUpBalance createMany
   */
  export type TopUpBalanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TopUpBalances.
     */
    data: TopUpBalanceCreateManyInput | TopUpBalanceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * TopUpBalance update
   */
  export type TopUpBalanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpBalance
     */
    select?: TopUpBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TopUpBalanceInclude<ExtArgs> | null
    /**
     * The data needed to update a TopUpBalance.
     */
    data: XOR<TopUpBalanceUpdateInput, TopUpBalanceUncheckedUpdateInput>
    /**
     * Choose, which TopUpBalance to update.
     */
    where: TopUpBalanceWhereUniqueInput
  }


  /**
   * TopUpBalance updateMany
   */
  export type TopUpBalanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TopUpBalances.
     */
    data: XOR<TopUpBalanceUpdateManyMutationInput, TopUpBalanceUncheckedUpdateManyInput>
    /**
     * Filter which TopUpBalances to update
     */
    where?: TopUpBalanceWhereInput
  }


  /**
   * TopUpBalance upsert
   */
  export type TopUpBalanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpBalance
     */
    select?: TopUpBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TopUpBalanceInclude<ExtArgs> | null
    /**
     * The filter to search for the TopUpBalance to update in case it exists.
     */
    where: TopUpBalanceWhereUniqueInput
    /**
     * In case the TopUpBalance found by the `where` argument doesn't exist, create a new TopUpBalance with this data.
     */
    create: XOR<TopUpBalanceCreateInput, TopUpBalanceUncheckedCreateInput>
    /**
     * In case the TopUpBalance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TopUpBalanceUpdateInput, TopUpBalanceUncheckedUpdateInput>
  }


  /**
   * TopUpBalance delete
   */
  export type TopUpBalanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpBalance
     */
    select?: TopUpBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TopUpBalanceInclude<ExtArgs> | null
    /**
     * Filter which TopUpBalance to delete.
     */
    where: TopUpBalanceWhereUniqueInput
  }


  /**
   * TopUpBalance deleteMany
   */
  export type TopUpBalanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TopUpBalances to delete
     */
    where?: TopUpBalanceWhereInput
  }


  /**
   * TopUpBalance.toUser
   */
  export type TopUpBalance$toUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * TopUpBalance without action
   */
  export type TopUpBalanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpBalance
     */
    select?: TopUpBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TopUpBalanceInclude<ExtArgs> | null
  }



  /**
   * Model DecreaseBalance
   */

  export type AggregateDecreaseBalance = {
    _count: DecreaseBalanceCountAggregateOutputType | null
    _avg: DecreaseBalanceAvgAggregateOutputType | null
    _sum: DecreaseBalanceSumAggregateOutputType | null
    _min: DecreaseBalanceMinAggregateOutputType | null
    _max: DecreaseBalanceMaxAggregateOutputType | null
  }

  export type DecreaseBalanceAvgAggregateOutputType = {
    sum: number | null
  }

  export type DecreaseBalanceSumAggregateOutputType = {
    sum: number | null
  }

  export type DecreaseBalanceMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    sum: number | null
    reason: string | null
    fromUserId: string | null
  }

  export type DecreaseBalanceMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    sum: number | null
    reason: string | null
    fromUserId: string | null
  }

  export type DecreaseBalanceCountAggregateOutputType = {
    id: number
    createdAt: number
    sum: number
    reason: number
    fromUserId: number
    _all: number
  }


  export type DecreaseBalanceAvgAggregateInputType = {
    sum?: true
  }

  export type DecreaseBalanceSumAggregateInputType = {
    sum?: true
  }

  export type DecreaseBalanceMinAggregateInputType = {
    id?: true
    createdAt?: true
    sum?: true
    reason?: true
    fromUserId?: true
  }

  export type DecreaseBalanceMaxAggregateInputType = {
    id?: true
    createdAt?: true
    sum?: true
    reason?: true
    fromUserId?: true
  }

  export type DecreaseBalanceCountAggregateInputType = {
    id?: true
    createdAt?: true
    sum?: true
    reason?: true
    fromUserId?: true
    _all?: true
  }

  export type DecreaseBalanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DecreaseBalance to aggregate.
     */
    where?: DecreaseBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DecreaseBalances to fetch.
     */
    orderBy?: DecreaseBalanceOrderByWithRelationAndSearchRelevanceInput | DecreaseBalanceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DecreaseBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DecreaseBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DecreaseBalances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DecreaseBalances
    **/
    _count?: true | DecreaseBalanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DecreaseBalanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DecreaseBalanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DecreaseBalanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DecreaseBalanceMaxAggregateInputType
  }

  export type GetDecreaseBalanceAggregateType<T extends DecreaseBalanceAggregateArgs> = {
        [P in keyof T & keyof AggregateDecreaseBalance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDecreaseBalance[P]>
      : GetScalarType<T[P], AggregateDecreaseBalance[P]>
  }




  export type DecreaseBalanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DecreaseBalanceWhereInput
    orderBy?: DecreaseBalanceOrderByWithAggregationInput | DecreaseBalanceOrderByWithAggregationInput[]
    by: DecreaseBalanceScalarFieldEnum[] | DecreaseBalanceScalarFieldEnum
    having?: DecreaseBalanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DecreaseBalanceCountAggregateInputType | true
    _avg?: DecreaseBalanceAvgAggregateInputType
    _sum?: DecreaseBalanceSumAggregateInputType
    _min?: DecreaseBalanceMinAggregateInputType
    _max?: DecreaseBalanceMaxAggregateInputType
  }

  export type DecreaseBalanceGroupByOutputType = {
    id: string
    createdAt: Date
    sum: number
    reason: string
    fromUserId: string | null
    _count: DecreaseBalanceCountAggregateOutputType | null
    _avg: DecreaseBalanceAvgAggregateOutputType | null
    _sum: DecreaseBalanceSumAggregateOutputType | null
    _min: DecreaseBalanceMinAggregateOutputType | null
    _max: DecreaseBalanceMaxAggregateOutputType | null
  }

  type GetDecreaseBalanceGroupByPayload<T extends DecreaseBalanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DecreaseBalanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DecreaseBalanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DecreaseBalanceGroupByOutputType[P]>
            : GetScalarType<T[P], DecreaseBalanceGroupByOutputType[P]>
        }
      >
    >


  export type DecreaseBalanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    sum?: boolean
    reason?: boolean
    fromUserId?: boolean
    fromUser?: boolean | DecreaseBalance$fromUserArgs<ExtArgs>
  }, ExtArgs["result"]["decreaseBalance"]>

  export type DecreaseBalanceSelectScalar = {
    id?: boolean
    createdAt?: boolean
    sum?: boolean
    reason?: boolean
    fromUserId?: boolean
  }

  export type DecreaseBalanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromUser?: boolean | DecreaseBalance$fromUserArgs<ExtArgs>
  }


  export type $DecreaseBalancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DecreaseBalance"
    objects: {
      fromUser: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      sum: number
      reason: string
      fromUserId: string | null
    }, ExtArgs["result"]["decreaseBalance"]>
    composites: {}
  }


  type DecreaseBalanceGetPayload<S extends boolean | null | undefined | DecreaseBalanceDefaultArgs> = $Result.GetResult<Prisma.$DecreaseBalancePayload, S>

  type DecreaseBalanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DecreaseBalanceFindManyArgs, 'select' | 'include'> & {
      select?: DecreaseBalanceCountAggregateInputType | true
    }

  export interface DecreaseBalanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DecreaseBalance'], meta: { name: 'DecreaseBalance' } }
    /**
     * Find zero or one DecreaseBalance that matches the filter.
     * @param {DecreaseBalanceFindUniqueArgs} args - Arguments to find a DecreaseBalance
     * @example
     * // Get one DecreaseBalance
     * const decreaseBalance = await prisma.decreaseBalance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DecreaseBalanceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DecreaseBalanceFindUniqueArgs<ExtArgs>>
    ): Prisma__DecreaseBalanceClient<$Result.GetResult<Prisma.$DecreaseBalancePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DecreaseBalance that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DecreaseBalanceFindUniqueOrThrowArgs} args - Arguments to find a DecreaseBalance
     * @example
     * // Get one DecreaseBalance
     * const decreaseBalance = await prisma.decreaseBalance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DecreaseBalanceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DecreaseBalanceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DecreaseBalanceClient<$Result.GetResult<Prisma.$DecreaseBalancePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DecreaseBalance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecreaseBalanceFindFirstArgs} args - Arguments to find a DecreaseBalance
     * @example
     * // Get one DecreaseBalance
     * const decreaseBalance = await prisma.decreaseBalance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DecreaseBalanceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DecreaseBalanceFindFirstArgs<ExtArgs>>
    ): Prisma__DecreaseBalanceClient<$Result.GetResult<Prisma.$DecreaseBalancePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DecreaseBalance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecreaseBalanceFindFirstOrThrowArgs} args - Arguments to find a DecreaseBalance
     * @example
     * // Get one DecreaseBalance
     * const decreaseBalance = await prisma.decreaseBalance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DecreaseBalanceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DecreaseBalanceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DecreaseBalanceClient<$Result.GetResult<Prisma.$DecreaseBalancePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DecreaseBalances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecreaseBalanceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DecreaseBalances
     * const decreaseBalances = await prisma.decreaseBalance.findMany()
     * 
     * // Get first 10 DecreaseBalances
     * const decreaseBalances = await prisma.decreaseBalance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const decreaseBalanceWithIdOnly = await prisma.decreaseBalance.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DecreaseBalanceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DecreaseBalanceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DecreaseBalancePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DecreaseBalance.
     * @param {DecreaseBalanceCreateArgs} args - Arguments to create a DecreaseBalance.
     * @example
     * // Create one DecreaseBalance
     * const DecreaseBalance = await prisma.decreaseBalance.create({
     *   data: {
     *     // ... data to create a DecreaseBalance
     *   }
     * })
     * 
    **/
    create<T extends DecreaseBalanceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DecreaseBalanceCreateArgs<ExtArgs>>
    ): Prisma__DecreaseBalanceClient<$Result.GetResult<Prisma.$DecreaseBalancePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DecreaseBalances.
     *     @param {DecreaseBalanceCreateManyArgs} args - Arguments to create many DecreaseBalances.
     *     @example
     *     // Create many DecreaseBalances
     *     const decreaseBalance = await prisma.decreaseBalance.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DecreaseBalanceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DecreaseBalanceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DecreaseBalance.
     * @param {DecreaseBalanceDeleteArgs} args - Arguments to delete one DecreaseBalance.
     * @example
     * // Delete one DecreaseBalance
     * const DecreaseBalance = await prisma.decreaseBalance.delete({
     *   where: {
     *     // ... filter to delete one DecreaseBalance
     *   }
     * })
     * 
    **/
    delete<T extends DecreaseBalanceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DecreaseBalanceDeleteArgs<ExtArgs>>
    ): Prisma__DecreaseBalanceClient<$Result.GetResult<Prisma.$DecreaseBalancePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DecreaseBalance.
     * @param {DecreaseBalanceUpdateArgs} args - Arguments to update one DecreaseBalance.
     * @example
     * // Update one DecreaseBalance
     * const decreaseBalance = await prisma.decreaseBalance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DecreaseBalanceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DecreaseBalanceUpdateArgs<ExtArgs>>
    ): Prisma__DecreaseBalanceClient<$Result.GetResult<Prisma.$DecreaseBalancePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DecreaseBalances.
     * @param {DecreaseBalanceDeleteManyArgs} args - Arguments to filter DecreaseBalances to delete.
     * @example
     * // Delete a few DecreaseBalances
     * const { count } = await prisma.decreaseBalance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DecreaseBalanceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DecreaseBalanceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DecreaseBalances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecreaseBalanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DecreaseBalances
     * const decreaseBalance = await prisma.decreaseBalance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DecreaseBalanceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DecreaseBalanceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DecreaseBalance.
     * @param {DecreaseBalanceUpsertArgs} args - Arguments to update or create a DecreaseBalance.
     * @example
     * // Update or create a DecreaseBalance
     * const decreaseBalance = await prisma.decreaseBalance.upsert({
     *   create: {
     *     // ... data to create a DecreaseBalance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DecreaseBalance we want to update
     *   }
     * })
    **/
    upsert<T extends DecreaseBalanceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DecreaseBalanceUpsertArgs<ExtArgs>>
    ): Prisma__DecreaseBalanceClient<$Result.GetResult<Prisma.$DecreaseBalancePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DecreaseBalances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecreaseBalanceCountArgs} args - Arguments to filter DecreaseBalances to count.
     * @example
     * // Count the number of DecreaseBalances
     * const count = await prisma.decreaseBalance.count({
     *   where: {
     *     // ... the filter for the DecreaseBalances we want to count
     *   }
     * })
    **/
    count<T extends DecreaseBalanceCountArgs>(
      args?: Subset<T, DecreaseBalanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DecreaseBalanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DecreaseBalance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecreaseBalanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DecreaseBalanceAggregateArgs>(args: Subset<T, DecreaseBalanceAggregateArgs>): Prisma.PrismaPromise<GetDecreaseBalanceAggregateType<T>>

    /**
     * Group by DecreaseBalance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecreaseBalanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DecreaseBalanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DecreaseBalanceGroupByArgs['orderBy'] }
        : { orderBy?: DecreaseBalanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DecreaseBalanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDecreaseBalanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DecreaseBalance model
   */
  readonly fields: DecreaseBalanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DecreaseBalance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DecreaseBalanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    fromUser<T extends DecreaseBalance$fromUserArgs<ExtArgs> = {}>(args?: Subset<T, DecreaseBalance$fromUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DecreaseBalance model
   */ 
  interface DecreaseBalanceFieldRefs {
    readonly id: FieldRef<"DecreaseBalance", 'String'>
    readonly createdAt: FieldRef<"DecreaseBalance", 'DateTime'>
    readonly sum: FieldRef<"DecreaseBalance", 'Float'>
    readonly reason: FieldRef<"DecreaseBalance", 'String'>
    readonly fromUserId: FieldRef<"DecreaseBalance", 'String'>
  }
    

  // Custom InputTypes

  /**
   * DecreaseBalance findUnique
   */
  export type DecreaseBalanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecreaseBalance
     */
    select?: DecreaseBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DecreaseBalanceInclude<ExtArgs> | null
    /**
     * Filter, which DecreaseBalance to fetch.
     */
    where: DecreaseBalanceWhereUniqueInput
  }


  /**
   * DecreaseBalance findUniqueOrThrow
   */
  export type DecreaseBalanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecreaseBalance
     */
    select?: DecreaseBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DecreaseBalanceInclude<ExtArgs> | null
    /**
     * Filter, which DecreaseBalance to fetch.
     */
    where: DecreaseBalanceWhereUniqueInput
  }


  /**
   * DecreaseBalance findFirst
   */
  export type DecreaseBalanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecreaseBalance
     */
    select?: DecreaseBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DecreaseBalanceInclude<ExtArgs> | null
    /**
     * Filter, which DecreaseBalance to fetch.
     */
    where?: DecreaseBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DecreaseBalances to fetch.
     */
    orderBy?: DecreaseBalanceOrderByWithRelationAndSearchRelevanceInput | DecreaseBalanceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DecreaseBalances.
     */
    cursor?: DecreaseBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DecreaseBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DecreaseBalances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DecreaseBalances.
     */
    distinct?: DecreaseBalanceScalarFieldEnum | DecreaseBalanceScalarFieldEnum[]
  }


  /**
   * DecreaseBalance findFirstOrThrow
   */
  export type DecreaseBalanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecreaseBalance
     */
    select?: DecreaseBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DecreaseBalanceInclude<ExtArgs> | null
    /**
     * Filter, which DecreaseBalance to fetch.
     */
    where?: DecreaseBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DecreaseBalances to fetch.
     */
    orderBy?: DecreaseBalanceOrderByWithRelationAndSearchRelevanceInput | DecreaseBalanceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DecreaseBalances.
     */
    cursor?: DecreaseBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DecreaseBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DecreaseBalances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DecreaseBalances.
     */
    distinct?: DecreaseBalanceScalarFieldEnum | DecreaseBalanceScalarFieldEnum[]
  }


  /**
   * DecreaseBalance findMany
   */
  export type DecreaseBalanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecreaseBalance
     */
    select?: DecreaseBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DecreaseBalanceInclude<ExtArgs> | null
    /**
     * Filter, which DecreaseBalances to fetch.
     */
    where?: DecreaseBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DecreaseBalances to fetch.
     */
    orderBy?: DecreaseBalanceOrderByWithRelationAndSearchRelevanceInput | DecreaseBalanceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DecreaseBalances.
     */
    cursor?: DecreaseBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DecreaseBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DecreaseBalances.
     */
    skip?: number
    distinct?: DecreaseBalanceScalarFieldEnum | DecreaseBalanceScalarFieldEnum[]
  }


  /**
   * DecreaseBalance create
   */
  export type DecreaseBalanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecreaseBalance
     */
    select?: DecreaseBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DecreaseBalanceInclude<ExtArgs> | null
    /**
     * The data needed to create a DecreaseBalance.
     */
    data: XOR<DecreaseBalanceCreateInput, DecreaseBalanceUncheckedCreateInput>
  }


  /**
   * DecreaseBalance createMany
   */
  export type DecreaseBalanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DecreaseBalances.
     */
    data: DecreaseBalanceCreateManyInput | DecreaseBalanceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * DecreaseBalance update
   */
  export type DecreaseBalanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecreaseBalance
     */
    select?: DecreaseBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DecreaseBalanceInclude<ExtArgs> | null
    /**
     * The data needed to update a DecreaseBalance.
     */
    data: XOR<DecreaseBalanceUpdateInput, DecreaseBalanceUncheckedUpdateInput>
    /**
     * Choose, which DecreaseBalance to update.
     */
    where: DecreaseBalanceWhereUniqueInput
  }


  /**
   * DecreaseBalance updateMany
   */
  export type DecreaseBalanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DecreaseBalances.
     */
    data: XOR<DecreaseBalanceUpdateManyMutationInput, DecreaseBalanceUncheckedUpdateManyInput>
    /**
     * Filter which DecreaseBalances to update
     */
    where?: DecreaseBalanceWhereInput
  }


  /**
   * DecreaseBalance upsert
   */
  export type DecreaseBalanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecreaseBalance
     */
    select?: DecreaseBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DecreaseBalanceInclude<ExtArgs> | null
    /**
     * The filter to search for the DecreaseBalance to update in case it exists.
     */
    where: DecreaseBalanceWhereUniqueInput
    /**
     * In case the DecreaseBalance found by the `where` argument doesn't exist, create a new DecreaseBalance with this data.
     */
    create: XOR<DecreaseBalanceCreateInput, DecreaseBalanceUncheckedCreateInput>
    /**
     * In case the DecreaseBalance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DecreaseBalanceUpdateInput, DecreaseBalanceUncheckedUpdateInput>
  }


  /**
   * DecreaseBalance delete
   */
  export type DecreaseBalanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecreaseBalance
     */
    select?: DecreaseBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DecreaseBalanceInclude<ExtArgs> | null
    /**
     * Filter which DecreaseBalance to delete.
     */
    where: DecreaseBalanceWhereUniqueInput
  }


  /**
   * DecreaseBalance deleteMany
   */
  export type DecreaseBalanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DecreaseBalances to delete
     */
    where?: DecreaseBalanceWhereInput
  }


  /**
   * DecreaseBalance.fromUser
   */
  export type DecreaseBalance$fromUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * DecreaseBalance without action
   */
  export type DecreaseBalanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecreaseBalance
     */
    select?: DecreaseBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DecreaseBalanceInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    name: 'name',
    family: 'family',
    dateOfBirth: 'dateOfBirth',
    city: 'city',
    logo: 'logo',
    balance: 'balance'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ExecutorInfoScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    rating: 'rating',
    ratingCount: 'ratingCount',
    description: 'description',
    classification: 'classification',
    tags: 'tags',
    expirience: 'expirience',
    costType: 'costType',
    cost: 'cost'
  };

  export type ExecutorInfoScalarFieldEnum = (typeof ExecutorInfoScalarFieldEnum)[keyof typeof ExecutorInfoScalarFieldEnum]


  export const CustomerInfoScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    rating: 'rating',
    ratingCount: 'ratingCount'
  };

  export type CustomerInfoScalarFieldEnum = (typeof CustomerInfoScalarFieldEnum)[keyof typeof CustomerInfoScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    customerId: 'customerId',
    status: 'status',
    title: 'title',
    description: 'description',
    files: 'files',
    tags: 'tags',
    views: 'views',
    costType: 'costType',
    cost: 'cost',
    comment: 'comment',
    responsesCount: 'responsesCount',
    specializationId: 'specializationId',
    executorId: 'executorId',
    doneExecutorId: 'doneExecutorId'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const ResponseScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    orderId: 'orderId',
    executorId: 'executorId',
    comment: 'comment'
  };

  export type ResponseScalarFieldEnum = (typeof ResponseScalarFieldEnum)[keyof typeof ResponseScalarFieldEnum]


  export const SpecializationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    topLevelTitle: 'topLevelTitle'
  };

  export type SpecializationScalarFieldEnum = (typeof SpecializationScalarFieldEnum)[keyof typeof SpecializationScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    site: 'site',
    phone: 'phone',
    mail: 'mail',
    telegram: 'telegram'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const TopUpBalanceScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    sum: 'sum',
    reason: 'reason',
    toUserId: 'toUserId'
  };

  export type TopUpBalanceScalarFieldEnum = (typeof TopUpBalanceScalarFieldEnum)[keyof typeof TopUpBalanceScalarFieldEnum]


  export const DecreaseBalanceScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    sum: 'sum',
    reason: 'reason',
    fromUserId: 'fromUserId'
  };

  export type DecreaseBalanceScalarFieldEnum = (typeof DecreaseBalanceScalarFieldEnum)[keyof typeof DecreaseBalanceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    name: 'name',
    family: 'family',
    city: 'city',
    logo: 'logo'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const ExecutorInfoOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    description: 'description',
    classification: 'classification',
    tags: 'tags'
  };

  export type ExecutorInfoOrderByRelevanceFieldEnum = (typeof ExecutorInfoOrderByRelevanceFieldEnum)[keyof typeof ExecutorInfoOrderByRelevanceFieldEnum]


  export const CustomerInfoOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type CustomerInfoOrderByRelevanceFieldEnum = (typeof CustomerInfoOrderByRelevanceFieldEnum)[keyof typeof CustomerInfoOrderByRelevanceFieldEnum]


  export const OrderOrderByRelevanceFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    title: 'title',
    description: 'description',
    files: 'files',
    tags: 'tags',
    comment: 'comment',
    specializationId: 'specializationId',
    executorId: 'executorId',
    doneExecutorId: 'doneExecutorId'
  };

  export type OrderOrderByRelevanceFieldEnum = (typeof OrderOrderByRelevanceFieldEnum)[keyof typeof OrderOrderByRelevanceFieldEnum]


  export const ResponseOrderByRelevanceFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    executorId: 'executorId',
    comment: 'comment'
  };

  export type ResponseOrderByRelevanceFieldEnum = (typeof ResponseOrderByRelevanceFieldEnum)[keyof typeof ResponseOrderByRelevanceFieldEnum]


  export const SpecializationOrderByRelevanceFieldEnum: {
    id: 'id',
    title: 'title',
    topLevelTitle: 'topLevelTitle'
  };

  export type SpecializationOrderByRelevanceFieldEnum = (typeof SpecializationOrderByRelevanceFieldEnum)[keyof typeof SpecializationOrderByRelevanceFieldEnum]


  export const ContactOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    site: 'site',
    phone: 'phone',
    mail: 'mail',
    telegram: 'telegram'
  };

  export type ContactOrderByRelevanceFieldEnum = (typeof ContactOrderByRelevanceFieldEnum)[keyof typeof ContactOrderByRelevanceFieldEnum]


  export const TopUpBalanceOrderByRelevanceFieldEnum: {
    id: 'id',
    reason: 'reason',
    toUserId: 'toUserId'
  };

  export type TopUpBalanceOrderByRelevanceFieldEnum = (typeof TopUpBalanceOrderByRelevanceFieldEnum)[keyof typeof TopUpBalanceOrderByRelevanceFieldEnum]


  export const DecreaseBalanceOrderByRelevanceFieldEnum: {
    id: 'id',
    reason: 'reason',
    fromUserId: 'fromUserId'
  };

  export type DecreaseBalanceOrderByRelevanceFieldEnum = (typeof DecreaseBalanceOrderByRelevanceFieldEnum)[keyof typeof DecreaseBalanceOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRoleEnum'
   */
  export type EnumUserRoleEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRoleEnum'>
    


  /**
   * Reference to a field of type 'UserRoleEnum[]'
   */
  export type ListEnumUserRoleEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRoleEnum[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'ExpirienceEnum'
   */
  export type EnumExpirienceEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExpirienceEnum'>
    


  /**
   * Reference to a field of type 'ExpirienceEnum[]'
   */
  export type ListEnumExpirienceEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExpirienceEnum[]'>
    


  /**
   * Reference to a field of type 'CostTypeEnum'
   */
  export type EnumCostTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CostTypeEnum'>
    


  /**
   * Reference to a field of type 'CostTypeEnum[]'
   */
  export type ListEnumCostTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CostTypeEnum[]'>
    


  /**
   * Reference to a field of type 'OrderStatusEnum'
   */
  export type EnumOrderStatusEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatusEnum'>
    


  /**
   * Reference to a field of type 'OrderStatusEnum[]'
   */
  export type ListEnumOrderStatusEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatusEnum[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumUserRoleEnumFilter<"User"> | $Enums.UserRoleEnum
    name?: StringNullableFilter<"User"> | string | null
    family?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    city?: StringNullableFilter<"User"> | string | null
    logo?: StringNullableFilter<"User"> | string | null
    balance?: FloatNullableFilter<"User"> | number | null
    executorInfo?: XOR<ExecutorInfoNullableRelationFilter, ExecutorInfoWhereInput> | null
    custoremInfo?: XOR<CustomerInfoNullableRelationFilter, CustomerInfoWhereInput> | null
    contact?: XOR<ContactNullableRelationFilter, ContactWhereInput> | null
    topUpBalance?: TopUpBalanceListRelationFilter
    decreaseBalance?: DecreaseBalanceListRelationFilter
  }

  export type UserOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    name?: SortOrderInput | SortOrder
    family?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    balance?: SortOrderInput | SortOrder
    executorInfo?: ExecutorInfoOrderByWithRelationAndSearchRelevanceInput
    custoremInfo?: CustomerInfoOrderByWithRelationAndSearchRelevanceInput
    contact?: ContactOrderByWithRelationAndSearchRelevanceInput
    topUpBalance?: TopUpBalanceOrderByRelationAggregateInput
    decreaseBalance?: DecreaseBalanceOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    role?: EnumUserRoleEnumFilter<"User"> | $Enums.UserRoleEnum
    name?: StringNullableFilter<"User"> | string | null
    family?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    city?: StringNullableFilter<"User"> | string | null
    logo?: StringNullableFilter<"User"> | string | null
    balance?: FloatNullableFilter<"User"> | number | null
    executorInfo?: XOR<ExecutorInfoNullableRelationFilter, ExecutorInfoWhereInput> | null
    custoremInfo?: XOR<CustomerInfoNullableRelationFilter, CustomerInfoWhereInput> | null
    contact?: XOR<ContactNullableRelationFilter, ContactWhereInput> | null
    topUpBalance?: TopUpBalanceListRelationFilter
    decreaseBalance?: DecreaseBalanceListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    name?: SortOrderInput | SortOrder
    family?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    balance?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleEnumWithAggregatesFilter<"User"> | $Enums.UserRoleEnum
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    family?: StringNullableWithAggregatesFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    city?: StringNullableWithAggregatesFilter<"User"> | string | null
    logo?: StringNullableWithAggregatesFilter<"User"> | string | null
    balance?: FloatNullableWithAggregatesFilter<"User"> | number | null
  }

  export type ExecutorInfoWhereInput = {
    AND?: ExecutorInfoWhereInput | ExecutorInfoWhereInput[]
    OR?: ExecutorInfoWhereInput[]
    NOT?: ExecutorInfoWhereInput | ExecutorInfoWhereInput[]
    id?: StringFilter<"ExecutorInfo"> | string
    userId?: StringFilter<"ExecutorInfo"> | string
    rating?: FloatNullableFilter<"ExecutorInfo"> | number | null
    ratingCount?: IntFilter<"ExecutorInfo"> | number
    description?: StringNullableFilter<"ExecutorInfo"> | string | null
    classification?: StringNullableFilter<"ExecutorInfo"> | string | null
    tags?: StringNullableListFilter<"ExecutorInfo">
    expirience?: EnumExpirienceEnumFilter<"ExecutorInfo"> | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFilter<"ExecutorInfo"> | $Enums.CostTypeEnum
    cost?: FloatNullableFilter<"ExecutorInfo"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    responses?: ResponseListRelationFilter
    specializations?: SpecializationListRelationFilter
    activeOrders?: OrderListRelationFilter
    doneOrders?: OrderListRelationFilter
  }

  export type ExecutorInfoOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrderInput | SortOrder
    ratingCount?: SortOrder
    description?: SortOrderInput | SortOrder
    classification?: SortOrderInput | SortOrder
    tags?: SortOrder
    expirience?: SortOrder
    costType?: SortOrder
    cost?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationAndSearchRelevanceInput
    responses?: ResponseOrderByRelationAggregateInput
    specializations?: SpecializationOrderByRelationAggregateInput
    activeOrders?: OrderOrderByRelationAggregateInput
    doneOrders?: OrderOrderByRelationAggregateInput
    _relevance?: ExecutorInfoOrderByRelevanceInput
  }

  export type ExecutorInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ExecutorInfoWhereInput | ExecutorInfoWhereInput[]
    OR?: ExecutorInfoWhereInput[]
    NOT?: ExecutorInfoWhereInput | ExecutorInfoWhereInput[]
    rating?: FloatNullableFilter<"ExecutorInfo"> | number | null
    ratingCount?: IntFilter<"ExecutorInfo"> | number
    description?: StringNullableFilter<"ExecutorInfo"> | string | null
    classification?: StringNullableFilter<"ExecutorInfo"> | string | null
    tags?: StringNullableListFilter<"ExecutorInfo">
    expirience?: EnumExpirienceEnumFilter<"ExecutorInfo"> | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFilter<"ExecutorInfo"> | $Enums.CostTypeEnum
    cost?: FloatNullableFilter<"ExecutorInfo"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    responses?: ResponseListRelationFilter
    specializations?: SpecializationListRelationFilter
    activeOrders?: OrderListRelationFilter
    doneOrders?: OrderListRelationFilter
  }, "id" | "userId">

  export type ExecutorInfoOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrderInput | SortOrder
    ratingCount?: SortOrder
    description?: SortOrderInput | SortOrder
    classification?: SortOrderInput | SortOrder
    tags?: SortOrder
    expirience?: SortOrder
    costType?: SortOrder
    cost?: SortOrderInput | SortOrder
    _count?: ExecutorInfoCountOrderByAggregateInput
    _avg?: ExecutorInfoAvgOrderByAggregateInput
    _max?: ExecutorInfoMaxOrderByAggregateInput
    _min?: ExecutorInfoMinOrderByAggregateInput
    _sum?: ExecutorInfoSumOrderByAggregateInput
  }

  export type ExecutorInfoScalarWhereWithAggregatesInput = {
    AND?: ExecutorInfoScalarWhereWithAggregatesInput | ExecutorInfoScalarWhereWithAggregatesInput[]
    OR?: ExecutorInfoScalarWhereWithAggregatesInput[]
    NOT?: ExecutorInfoScalarWhereWithAggregatesInput | ExecutorInfoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExecutorInfo"> | string
    userId?: StringWithAggregatesFilter<"ExecutorInfo"> | string
    rating?: FloatNullableWithAggregatesFilter<"ExecutorInfo"> | number | null
    ratingCount?: IntWithAggregatesFilter<"ExecutorInfo"> | number
    description?: StringNullableWithAggregatesFilter<"ExecutorInfo"> | string | null
    classification?: StringNullableWithAggregatesFilter<"ExecutorInfo"> | string | null
    tags?: StringNullableListFilter<"ExecutorInfo">
    expirience?: EnumExpirienceEnumWithAggregatesFilter<"ExecutorInfo"> | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumWithAggregatesFilter<"ExecutorInfo"> | $Enums.CostTypeEnum
    cost?: FloatNullableWithAggregatesFilter<"ExecutorInfo"> | number | null
  }

  export type CustomerInfoWhereInput = {
    AND?: CustomerInfoWhereInput | CustomerInfoWhereInput[]
    OR?: CustomerInfoWhereInput[]
    NOT?: CustomerInfoWhereInput | CustomerInfoWhereInput[]
    id?: StringFilter<"CustomerInfo"> | string
    userId?: StringFilter<"CustomerInfo"> | string
    rating?: FloatNullableFilter<"CustomerInfo"> | number | null
    ratingCount?: IntFilter<"CustomerInfo"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    orders?: OrderListRelationFilter
  }

  export type CustomerInfoOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrderInput | SortOrder
    ratingCount?: SortOrder
    user?: UserOrderByWithRelationAndSearchRelevanceInput
    orders?: OrderOrderByRelationAggregateInput
    _relevance?: CustomerInfoOrderByRelevanceInput
  }

  export type CustomerInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: CustomerInfoWhereInput | CustomerInfoWhereInput[]
    OR?: CustomerInfoWhereInput[]
    NOT?: CustomerInfoWhereInput | CustomerInfoWhereInput[]
    rating?: FloatNullableFilter<"CustomerInfo"> | number | null
    ratingCount?: IntFilter<"CustomerInfo"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    orders?: OrderListRelationFilter
  }, "id" | "userId">

  export type CustomerInfoOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrderInput | SortOrder
    ratingCount?: SortOrder
    _count?: CustomerInfoCountOrderByAggregateInput
    _avg?: CustomerInfoAvgOrderByAggregateInput
    _max?: CustomerInfoMaxOrderByAggregateInput
    _min?: CustomerInfoMinOrderByAggregateInput
    _sum?: CustomerInfoSumOrderByAggregateInput
  }

  export type CustomerInfoScalarWhereWithAggregatesInput = {
    AND?: CustomerInfoScalarWhereWithAggregatesInput | CustomerInfoScalarWhereWithAggregatesInput[]
    OR?: CustomerInfoScalarWhereWithAggregatesInput[]
    NOT?: CustomerInfoScalarWhereWithAggregatesInput | CustomerInfoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomerInfo"> | string
    userId?: StringWithAggregatesFilter<"CustomerInfo"> | string
    rating?: FloatNullableWithAggregatesFilter<"CustomerInfo"> | number | null
    ratingCount?: IntWithAggregatesFilter<"CustomerInfo"> | number
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: StringFilter<"Order"> | string
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    customerId?: StringFilter<"Order"> | string
    status?: EnumOrderStatusEnumFilter<"Order"> | $Enums.OrderStatusEnum
    title?: StringFilter<"Order"> | string
    description?: StringNullableFilter<"Order"> | string | null
    files?: StringNullableListFilter<"Order">
    tags?: StringNullableListFilter<"Order">
    views?: IntFilter<"Order"> | number
    costType?: EnumCostTypeEnumFilter<"Order"> | $Enums.CostTypeEnum
    cost?: FloatNullableFilter<"Order"> | number | null
    comment?: StringNullableFilter<"Order"> | string | null
    responsesCount?: IntFilter<"Order"> | number
    specializationId?: StringFilter<"Order"> | string
    executorId?: StringNullableFilter<"Order"> | string | null
    doneExecutorId?: StringNullableFilter<"Order"> | string | null
    customer?: XOR<CustomerInfoRelationFilter, CustomerInfoWhereInput>
    responses?: ResponseListRelationFilter
    specialization?: XOR<SpecializationRelationFilter, SpecializationWhereInput>
    executor?: XOR<ExecutorInfoNullableRelationFilter, ExecutorInfoWhereInput> | null
    doneExecutor?: XOR<ExecutorInfoNullableRelationFilter, ExecutorInfoWhereInput> | null
  }

  export type OrderOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    files?: SortOrder
    tags?: SortOrder
    views?: SortOrder
    costType?: SortOrder
    cost?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    responsesCount?: SortOrder
    specializationId?: SortOrder
    executorId?: SortOrderInput | SortOrder
    doneExecutorId?: SortOrderInput | SortOrder
    customer?: CustomerInfoOrderByWithRelationAndSearchRelevanceInput
    responses?: ResponseOrderByRelationAggregateInput
    specialization?: SpecializationOrderByWithRelationAndSearchRelevanceInput
    executor?: ExecutorInfoOrderByWithRelationAndSearchRelevanceInput
    doneExecutor?: ExecutorInfoOrderByWithRelationAndSearchRelevanceInput
    _relevance?: OrderOrderByRelevanceInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    customerId?: StringFilter<"Order"> | string
    status?: EnumOrderStatusEnumFilter<"Order"> | $Enums.OrderStatusEnum
    title?: StringFilter<"Order"> | string
    description?: StringNullableFilter<"Order"> | string | null
    files?: StringNullableListFilter<"Order">
    tags?: StringNullableListFilter<"Order">
    views?: IntFilter<"Order"> | number
    costType?: EnumCostTypeEnumFilter<"Order"> | $Enums.CostTypeEnum
    cost?: FloatNullableFilter<"Order"> | number | null
    comment?: StringNullableFilter<"Order"> | string | null
    responsesCount?: IntFilter<"Order"> | number
    specializationId?: StringFilter<"Order"> | string
    executorId?: StringNullableFilter<"Order"> | string | null
    doneExecutorId?: StringNullableFilter<"Order"> | string | null
    customer?: XOR<CustomerInfoRelationFilter, CustomerInfoWhereInput>
    responses?: ResponseListRelationFilter
    specialization?: XOR<SpecializationRelationFilter, SpecializationWhereInput>
    executor?: XOR<ExecutorInfoNullableRelationFilter, ExecutorInfoWhereInput> | null
    doneExecutor?: XOR<ExecutorInfoNullableRelationFilter, ExecutorInfoWhereInput> | null
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    files?: SortOrder
    tags?: SortOrder
    views?: SortOrder
    costType?: SortOrder
    cost?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    responsesCount?: SortOrder
    specializationId?: SortOrder
    executorId?: SortOrderInput | SortOrder
    doneExecutorId?: SortOrderInput | SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    customerId?: StringWithAggregatesFilter<"Order"> | string
    status?: EnumOrderStatusEnumWithAggregatesFilter<"Order"> | $Enums.OrderStatusEnum
    title?: StringWithAggregatesFilter<"Order"> | string
    description?: StringNullableWithAggregatesFilter<"Order"> | string | null
    files?: StringNullableListFilter<"Order">
    tags?: StringNullableListFilter<"Order">
    views?: IntWithAggregatesFilter<"Order"> | number
    costType?: EnumCostTypeEnumWithAggregatesFilter<"Order"> | $Enums.CostTypeEnum
    cost?: FloatNullableWithAggregatesFilter<"Order"> | number | null
    comment?: StringNullableWithAggregatesFilter<"Order"> | string | null
    responsesCount?: IntWithAggregatesFilter<"Order"> | number
    specializationId?: StringWithAggregatesFilter<"Order"> | string
    executorId?: StringNullableWithAggregatesFilter<"Order"> | string | null
    doneExecutorId?: StringNullableWithAggregatesFilter<"Order"> | string | null
  }

  export type ResponseWhereInput = {
    AND?: ResponseWhereInput | ResponseWhereInput[]
    OR?: ResponseWhereInput[]
    NOT?: ResponseWhereInput | ResponseWhereInput[]
    id?: StringFilter<"Response"> | string
    createdAt?: DateTimeFilter<"Response"> | Date | string
    orderId?: StringFilter<"Response"> | string
    executorId?: StringFilter<"Response"> | string
    comment?: StringFilter<"Response"> | string
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    executor?: XOR<ExecutorInfoRelationFilter, ExecutorInfoWhereInput>
  }

  export type ResponseOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    createdAt?: SortOrder
    orderId?: SortOrder
    executorId?: SortOrder
    comment?: SortOrder
    order?: OrderOrderByWithRelationAndSearchRelevanceInput
    executor?: ExecutorInfoOrderByWithRelationAndSearchRelevanceInput
    _relevance?: ResponseOrderByRelevanceInput
  }

  export type ResponseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    orderId_executorId?: ResponseOrderIdExecutorIdCompoundUniqueInput
    AND?: ResponseWhereInput | ResponseWhereInput[]
    OR?: ResponseWhereInput[]
    NOT?: ResponseWhereInput | ResponseWhereInput[]
    createdAt?: DateTimeFilter<"Response"> | Date | string
    orderId?: StringFilter<"Response"> | string
    executorId?: StringFilter<"Response"> | string
    comment?: StringFilter<"Response"> | string
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    executor?: XOR<ExecutorInfoRelationFilter, ExecutorInfoWhereInput>
  }, "id" | "orderId_executorId">

  export type ResponseOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    orderId?: SortOrder
    executorId?: SortOrder
    comment?: SortOrder
    _count?: ResponseCountOrderByAggregateInput
    _max?: ResponseMaxOrderByAggregateInput
    _min?: ResponseMinOrderByAggregateInput
  }

  export type ResponseScalarWhereWithAggregatesInput = {
    AND?: ResponseScalarWhereWithAggregatesInput | ResponseScalarWhereWithAggregatesInput[]
    OR?: ResponseScalarWhereWithAggregatesInput[]
    NOT?: ResponseScalarWhereWithAggregatesInput | ResponseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Response"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Response"> | Date | string
    orderId?: StringWithAggregatesFilter<"Response"> | string
    executorId?: StringWithAggregatesFilter<"Response"> | string
    comment?: StringWithAggregatesFilter<"Response"> | string
  }

  export type SpecializationWhereInput = {
    AND?: SpecializationWhereInput | SpecializationWhereInput[]
    OR?: SpecializationWhereInput[]
    NOT?: SpecializationWhereInput | SpecializationWhereInput[]
    id?: StringFilter<"Specialization"> | string
    title?: StringFilter<"Specialization"> | string
    topLevelTitle?: StringFilter<"Specialization"> | string
    orders?: OrderListRelationFilter
    executors?: ExecutorInfoListRelationFilter
  }

  export type SpecializationOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    title?: SortOrder
    topLevelTitle?: SortOrder
    orders?: OrderOrderByRelationAggregateInput
    executors?: ExecutorInfoOrderByRelationAggregateInput
    _relevance?: SpecializationOrderByRelevanceInput
  }

  export type SpecializationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    title?: string
    AND?: SpecializationWhereInput | SpecializationWhereInput[]
    OR?: SpecializationWhereInput[]
    NOT?: SpecializationWhereInput | SpecializationWhereInput[]
    topLevelTitle?: StringFilter<"Specialization"> | string
    orders?: OrderListRelationFilter
    executors?: ExecutorInfoListRelationFilter
  }, "id" | "title">

  export type SpecializationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    topLevelTitle?: SortOrder
    _count?: SpecializationCountOrderByAggregateInput
    _max?: SpecializationMaxOrderByAggregateInput
    _min?: SpecializationMinOrderByAggregateInput
  }

  export type SpecializationScalarWhereWithAggregatesInput = {
    AND?: SpecializationScalarWhereWithAggregatesInput | SpecializationScalarWhereWithAggregatesInput[]
    OR?: SpecializationScalarWhereWithAggregatesInput[]
    NOT?: SpecializationScalarWhereWithAggregatesInput | SpecializationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Specialization"> | string
    title?: StringWithAggregatesFilter<"Specialization"> | string
    topLevelTitle?: StringWithAggregatesFilter<"Specialization"> | string
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: StringFilter<"Contact"> | string
    userId?: StringFilter<"Contact"> | string
    site?: StringNullableFilter<"Contact"> | string | null
    phone?: StringNullableFilter<"Contact"> | string | null
    mail?: StringNullableFilter<"Contact"> | string | null
    telegram?: StringNullableFilter<"Contact"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ContactOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    userId?: SortOrder
    site?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    mail?: SortOrderInput | SortOrder
    telegram?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationAndSearchRelevanceInput
    _relevance?: ContactOrderByRelevanceInput
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    site?: StringNullableFilter<"Contact"> | string | null
    phone?: StringNullableFilter<"Contact"> | string | null
    mail?: StringNullableFilter<"Contact"> | string | null
    telegram?: StringNullableFilter<"Contact"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    site?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    mail?: SortOrderInput | SortOrder
    telegram?: SortOrderInput | SortOrder
    _count?: ContactCountOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contact"> | string
    userId?: StringWithAggregatesFilter<"Contact"> | string
    site?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    mail?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    telegram?: StringNullableWithAggregatesFilter<"Contact"> | string | null
  }

  export type TopUpBalanceWhereInput = {
    AND?: TopUpBalanceWhereInput | TopUpBalanceWhereInput[]
    OR?: TopUpBalanceWhereInput[]
    NOT?: TopUpBalanceWhereInput | TopUpBalanceWhereInput[]
    id?: StringFilter<"TopUpBalance"> | string
    createdAt?: DateTimeFilter<"TopUpBalance"> | Date | string
    sum?: FloatFilter<"TopUpBalance"> | number
    reason?: StringFilter<"TopUpBalance"> | string
    toUserId?: StringNullableFilter<"TopUpBalance"> | string | null
    toUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type TopUpBalanceOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sum?: SortOrder
    reason?: SortOrder
    toUserId?: SortOrderInput | SortOrder
    toUser?: UserOrderByWithRelationAndSearchRelevanceInput
    _relevance?: TopUpBalanceOrderByRelevanceInput
  }

  export type TopUpBalanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TopUpBalanceWhereInput | TopUpBalanceWhereInput[]
    OR?: TopUpBalanceWhereInput[]
    NOT?: TopUpBalanceWhereInput | TopUpBalanceWhereInput[]
    createdAt?: DateTimeFilter<"TopUpBalance"> | Date | string
    sum?: FloatFilter<"TopUpBalance"> | number
    reason?: StringFilter<"TopUpBalance"> | string
    toUserId?: StringNullableFilter<"TopUpBalance"> | string | null
    toUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type TopUpBalanceOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sum?: SortOrder
    reason?: SortOrder
    toUserId?: SortOrderInput | SortOrder
    _count?: TopUpBalanceCountOrderByAggregateInput
    _avg?: TopUpBalanceAvgOrderByAggregateInput
    _max?: TopUpBalanceMaxOrderByAggregateInput
    _min?: TopUpBalanceMinOrderByAggregateInput
    _sum?: TopUpBalanceSumOrderByAggregateInput
  }

  export type TopUpBalanceScalarWhereWithAggregatesInput = {
    AND?: TopUpBalanceScalarWhereWithAggregatesInput | TopUpBalanceScalarWhereWithAggregatesInput[]
    OR?: TopUpBalanceScalarWhereWithAggregatesInput[]
    NOT?: TopUpBalanceScalarWhereWithAggregatesInput | TopUpBalanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TopUpBalance"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TopUpBalance"> | Date | string
    sum?: FloatWithAggregatesFilter<"TopUpBalance"> | number
    reason?: StringWithAggregatesFilter<"TopUpBalance"> | string
    toUserId?: StringNullableWithAggregatesFilter<"TopUpBalance"> | string | null
  }

  export type DecreaseBalanceWhereInput = {
    AND?: DecreaseBalanceWhereInput | DecreaseBalanceWhereInput[]
    OR?: DecreaseBalanceWhereInput[]
    NOT?: DecreaseBalanceWhereInput | DecreaseBalanceWhereInput[]
    id?: StringFilter<"DecreaseBalance"> | string
    createdAt?: DateTimeFilter<"DecreaseBalance"> | Date | string
    sum?: FloatFilter<"DecreaseBalance"> | number
    reason?: StringFilter<"DecreaseBalance"> | string
    fromUserId?: StringNullableFilter<"DecreaseBalance"> | string | null
    fromUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type DecreaseBalanceOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sum?: SortOrder
    reason?: SortOrder
    fromUserId?: SortOrderInput | SortOrder
    fromUser?: UserOrderByWithRelationAndSearchRelevanceInput
    _relevance?: DecreaseBalanceOrderByRelevanceInput
  }

  export type DecreaseBalanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DecreaseBalanceWhereInput | DecreaseBalanceWhereInput[]
    OR?: DecreaseBalanceWhereInput[]
    NOT?: DecreaseBalanceWhereInput | DecreaseBalanceWhereInput[]
    createdAt?: DateTimeFilter<"DecreaseBalance"> | Date | string
    sum?: FloatFilter<"DecreaseBalance"> | number
    reason?: StringFilter<"DecreaseBalance"> | string
    fromUserId?: StringNullableFilter<"DecreaseBalance"> | string | null
    fromUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type DecreaseBalanceOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sum?: SortOrder
    reason?: SortOrder
    fromUserId?: SortOrderInput | SortOrder
    _count?: DecreaseBalanceCountOrderByAggregateInput
    _avg?: DecreaseBalanceAvgOrderByAggregateInput
    _max?: DecreaseBalanceMaxOrderByAggregateInput
    _min?: DecreaseBalanceMinOrderByAggregateInput
    _sum?: DecreaseBalanceSumOrderByAggregateInput
  }

  export type DecreaseBalanceScalarWhereWithAggregatesInput = {
    AND?: DecreaseBalanceScalarWhereWithAggregatesInput | DecreaseBalanceScalarWhereWithAggregatesInput[]
    OR?: DecreaseBalanceScalarWhereWithAggregatesInput[]
    NOT?: DecreaseBalanceScalarWhereWithAggregatesInput | DecreaseBalanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DecreaseBalance"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DecreaseBalance"> | Date | string
    sum?: FloatWithAggregatesFilter<"DecreaseBalance"> | number
    reason?: StringWithAggregatesFilter<"DecreaseBalance"> | string
    fromUserId?: StringNullableWithAggregatesFilter<"DecreaseBalance"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.UserRoleEnum
    name?: string | null
    family?: string | null
    dateOfBirth?: Date | string | null
    city?: string | null
    logo?: string | null
    balance?: number | null
    executorInfo?: ExecutorInfoCreateNestedOneWithoutUserInput
    custoremInfo?: CustomerInfoCreateNestedOneWithoutUserInput
    contact?: ContactCreateNestedOneWithoutUserInput
    topUpBalance?: TopUpBalanceCreateNestedManyWithoutToUserInput
    decreaseBalance?: DecreaseBalanceCreateNestedManyWithoutFromUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.UserRoleEnum
    name?: string | null
    family?: string | null
    dateOfBirth?: Date | string | null
    city?: string | null
    logo?: string | null
    balance?: number | null
    executorInfo?: ExecutorInfoUncheckedCreateNestedOneWithoutUserInput
    custoremInfo?: CustomerInfoUncheckedCreateNestedOneWithoutUserInput
    contact?: ContactUncheckedCreateNestedOneWithoutUserInput
    topUpBalance?: TopUpBalanceUncheckedCreateNestedManyWithoutToUserInput
    decreaseBalance?: DecreaseBalanceUncheckedCreateNestedManyWithoutFromUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    name?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    executorInfo?: ExecutorInfoUpdateOneWithoutUserNestedInput
    custoremInfo?: CustomerInfoUpdateOneWithoutUserNestedInput
    contact?: ContactUpdateOneWithoutUserNestedInput
    topUpBalance?: TopUpBalanceUpdateManyWithoutToUserNestedInput
    decreaseBalance?: DecreaseBalanceUpdateManyWithoutFromUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    name?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    executorInfo?: ExecutorInfoUncheckedUpdateOneWithoutUserNestedInput
    custoremInfo?: CustomerInfoUncheckedUpdateOneWithoutUserNestedInput
    contact?: ContactUncheckedUpdateOneWithoutUserNestedInput
    topUpBalance?: TopUpBalanceUncheckedUpdateManyWithoutToUserNestedInput
    decreaseBalance?: DecreaseBalanceUncheckedUpdateManyWithoutFromUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.UserRoleEnum
    name?: string | null
    family?: string | null
    dateOfBirth?: Date | string | null
    city?: string | null
    logo?: string | null
    balance?: number | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    name?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    name?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ExecutorInfoCreateInput = {
    id?: string
    rating?: number | null
    ratingCount?: number
    description?: string | null
    classification?: string | null
    tags?: ExecutorInfoCreatetagsInput | string[]
    expirience?: $Enums.ExpirienceEnum
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    user: UserCreateNestedOneWithoutExecutorInfoInput
    responses?: ResponseCreateNestedManyWithoutExecutorInput
    specializations?: SpecializationCreateNestedManyWithoutExecutorsInput
    activeOrders?: OrderCreateNestedManyWithoutExecutorInput
    doneOrders?: OrderCreateNestedManyWithoutDoneExecutorInput
  }

  export type ExecutorInfoUncheckedCreateInput = {
    id?: string
    userId: string
    rating?: number | null
    ratingCount?: number
    description?: string | null
    classification?: string | null
    tags?: ExecutorInfoCreatetagsInput | string[]
    expirience?: $Enums.ExpirienceEnum
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    responses?: ResponseUncheckedCreateNestedManyWithoutExecutorInput
    specializations?: SpecializationUncheckedCreateNestedManyWithoutExecutorsInput
    activeOrders?: OrderUncheckedCreateNestedManyWithoutExecutorInput
    doneOrders?: OrderUncheckedCreateNestedManyWithoutDoneExecutorInput
  }

  export type ExecutorInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutExecutorInfoNestedInput
    responses?: ResponseUpdateManyWithoutExecutorNestedInput
    specializations?: SpecializationUpdateManyWithoutExecutorsNestedInput
    activeOrders?: OrderUpdateManyWithoutExecutorNestedInput
    doneOrders?: OrderUpdateManyWithoutDoneExecutorNestedInput
  }

  export type ExecutorInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    responses?: ResponseUncheckedUpdateManyWithoutExecutorNestedInput
    specializations?: SpecializationUncheckedUpdateManyWithoutExecutorsNestedInput
    activeOrders?: OrderUncheckedUpdateManyWithoutExecutorNestedInput
    doneOrders?: OrderUncheckedUpdateManyWithoutDoneExecutorNestedInput
  }

  export type ExecutorInfoCreateManyInput = {
    id?: string
    userId: string
    rating?: number | null
    ratingCount?: number
    description?: string | null
    classification?: string | null
    tags?: ExecutorInfoCreatetagsInput | string[]
    expirience?: $Enums.ExpirienceEnum
    costType?: $Enums.CostTypeEnum
    cost?: number | null
  }

  export type ExecutorInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ExecutorInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type CustomerInfoCreateInput = {
    id?: string
    rating?: number | null
    ratingCount?: number
    user: UserCreateNestedOneWithoutCustoremInfoInput
    orders?: OrderCreateNestedManyWithoutCustomerInput
  }

  export type CustomerInfoUncheckedCreateInput = {
    id?: string
    userId: string
    rating?: number | null
    ratingCount?: number
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutCustoremInfoNestedInput
    orders?: OrderUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerInfoCreateManyInput = {
    id?: string
    userId: string
    rating?: number | null
    ratingCount?: number
  }

  export type CustomerInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
  }

  export type CustomerInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
  }

  export type OrderCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    customer: CustomerInfoCreateNestedOneWithoutOrdersInput
    responses?: ResponseCreateNestedManyWithoutOrderInput
    specialization: SpecializationCreateNestedOneWithoutOrdersInput
    executor?: ExecutorInfoCreateNestedOneWithoutActiveOrdersInput
    doneExecutor?: ExecutorInfoCreateNestedOneWithoutDoneOrdersInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customerId: string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    specializationId: string
    executorId?: string | null
    doneExecutorId?: string | null
    responses?: ResponseUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    customer?: CustomerInfoUpdateOneRequiredWithoutOrdersNestedInput
    responses?: ResponseUpdateManyWithoutOrderNestedInput
    specialization?: SpecializationUpdateOneRequiredWithoutOrdersNestedInput
    executor?: ExecutorInfoUpdateOneWithoutActiveOrdersNestedInput
    doneExecutor?: ExecutorInfoUpdateOneWithoutDoneOrdersNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    specializationId?: StringFieldUpdateOperationsInput | string
    executorId?: NullableStringFieldUpdateOperationsInput | string | null
    doneExecutorId?: NullableStringFieldUpdateOperationsInput | string | null
    responses?: ResponseUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customerId: string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    specializationId: string
    executorId?: string | null
    doneExecutorId?: string | null
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    specializationId?: StringFieldUpdateOperationsInput | string
    executorId?: NullableStringFieldUpdateOperationsInput | string | null
    doneExecutorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResponseCreateInput = {
    id?: string
    createdAt?: Date | string
    comment: string
    order: OrderCreateNestedOneWithoutResponsesInput
    executor: ExecutorInfoCreateNestedOneWithoutResponsesInput
  }

  export type ResponseUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    orderId: string
    executorId: string
    comment: string
  }

  export type ResponseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    order?: OrderUpdateOneRequiredWithoutResponsesNestedInput
    executor?: ExecutorInfoUpdateOneRequiredWithoutResponsesNestedInput
  }

  export type ResponseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: StringFieldUpdateOperationsInput | string
    executorId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type ResponseCreateManyInput = {
    id?: string
    createdAt?: Date | string
    orderId: string
    executorId: string
    comment: string
  }

  export type ResponseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type ResponseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: StringFieldUpdateOperationsInput | string
    executorId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type SpecializationCreateInput = {
    id?: string
    title: string
    topLevelTitle: string
    orders?: OrderCreateNestedManyWithoutSpecializationInput
    executors?: ExecutorInfoCreateNestedManyWithoutSpecializationsInput
  }

  export type SpecializationUncheckedCreateInput = {
    id?: string
    title: string
    topLevelTitle: string
    orders?: OrderUncheckedCreateNestedManyWithoutSpecializationInput
    executors?: ExecutorInfoUncheckedCreateNestedManyWithoutSpecializationsInput
  }

  export type SpecializationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topLevelTitle?: StringFieldUpdateOperationsInput | string
    orders?: OrderUpdateManyWithoutSpecializationNestedInput
    executors?: ExecutorInfoUpdateManyWithoutSpecializationsNestedInput
  }

  export type SpecializationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topLevelTitle?: StringFieldUpdateOperationsInput | string
    orders?: OrderUncheckedUpdateManyWithoutSpecializationNestedInput
    executors?: ExecutorInfoUncheckedUpdateManyWithoutSpecializationsNestedInput
  }

  export type SpecializationCreateManyInput = {
    id?: string
    title: string
    topLevelTitle: string
  }

  export type SpecializationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topLevelTitle?: StringFieldUpdateOperationsInput | string
  }

  export type SpecializationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topLevelTitle?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateInput = {
    id?: string
    site?: string | null
    phone?: string | null
    mail?: string | null
    telegram?: string | null
    user: UserCreateNestedOneWithoutContactInput
  }

  export type ContactUncheckedCreateInput = {
    id?: string
    userId: string
    site?: string | null
    phone?: string | null
    mail?: string | null
    telegram?: string | null
  }

  export type ContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    site?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    telegram?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    site?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    telegram?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactCreateManyInput = {
    id?: string
    userId: string
    site?: string | null
    phone?: string | null
    mail?: string | null
    telegram?: string | null
  }

  export type ContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    site?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    telegram?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    site?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    telegram?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TopUpBalanceCreateInput = {
    id?: string
    createdAt?: Date | string
    sum: number
    reason: string
    toUser?: UserCreateNestedOneWithoutTopUpBalanceInput
  }

  export type TopUpBalanceUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    sum: number
    reason: string
    toUserId?: string | null
  }

  export type TopUpBalanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sum?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    toUser?: UserUpdateOneWithoutTopUpBalanceNestedInput
  }

  export type TopUpBalanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sum?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    toUserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TopUpBalanceCreateManyInput = {
    id?: string
    createdAt?: Date | string
    sum: number
    reason: string
    toUserId?: string | null
  }

  export type TopUpBalanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sum?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type TopUpBalanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sum?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    toUserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DecreaseBalanceCreateInput = {
    id?: string
    createdAt?: Date | string
    sum: number
    reason: string
    fromUser?: UserCreateNestedOneWithoutDecreaseBalanceInput
  }

  export type DecreaseBalanceUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    sum: number
    reason: string
    fromUserId?: string | null
  }

  export type DecreaseBalanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sum?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    fromUser?: UserUpdateOneWithoutDecreaseBalanceNestedInput
  }

  export type DecreaseBalanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sum?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    fromUserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DecreaseBalanceCreateManyInput = {
    id?: string
    createdAt?: Date | string
    sum: number
    reason: string
    fromUserId?: string | null
  }

  export type DecreaseBalanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sum?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type DecreaseBalanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sum?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    fromUserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoleEnum | EnumUserRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleEnumFilter<$PrismaModel> | $Enums.UserRoleEnum
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ExecutorInfoNullableRelationFilter = {
    is?: ExecutorInfoWhereInput | null
    isNot?: ExecutorInfoWhereInput | null
  }

  export type CustomerInfoNullableRelationFilter = {
    is?: CustomerInfoWhereInput | null
    isNot?: CustomerInfoWhereInput | null
  }

  export type ContactNullableRelationFilter = {
    is?: ContactWhereInput | null
    isNot?: ContactWhereInput | null
  }

  export type TopUpBalanceListRelationFilter = {
    every?: TopUpBalanceWhereInput
    some?: TopUpBalanceWhereInput
    none?: TopUpBalanceWhereInput
  }

  export type DecreaseBalanceListRelationFilter = {
    every?: DecreaseBalanceWhereInput
    some?: DecreaseBalanceWhereInput
    none?: DecreaseBalanceWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TopUpBalanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DecreaseBalanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    name?: SortOrder
    family?: SortOrder
    dateOfBirth?: SortOrder
    city?: SortOrder
    logo?: SortOrder
    balance?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    balance?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    name?: SortOrder
    family?: SortOrder
    dateOfBirth?: SortOrder
    city?: SortOrder
    logo?: SortOrder
    balance?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    name?: SortOrder
    family?: SortOrder
    dateOfBirth?: SortOrder
    city?: SortOrder
    logo?: SortOrder
    balance?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    balance?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoleEnum | EnumUserRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleEnumWithAggregatesFilter<$PrismaModel> | $Enums.UserRoleEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleEnumFilter<$PrismaModel>
    _max?: NestedEnumUserRoleEnumFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumExpirienceEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.ExpirienceEnum | EnumExpirienceEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ExpirienceEnum[] | ListEnumExpirienceEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExpirienceEnum[] | ListEnumExpirienceEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumExpirienceEnumFilter<$PrismaModel> | $Enums.ExpirienceEnum
  }

  export type EnumCostTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.CostTypeEnum | EnumCostTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CostTypeEnum[] | ListEnumCostTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.CostTypeEnum[] | ListEnumCostTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumCostTypeEnumFilter<$PrismaModel> | $Enums.CostTypeEnum
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ResponseListRelationFilter = {
    every?: ResponseWhereInput
    some?: ResponseWhereInput
    none?: ResponseWhereInput
  }

  export type SpecializationListRelationFilter = {
    every?: SpecializationWhereInput
    some?: SpecializationWhereInput
    none?: SpecializationWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type ResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpecializationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExecutorInfoOrderByRelevanceInput = {
    fields: ExecutorInfoOrderByRelevanceFieldEnum | ExecutorInfoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ExecutorInfoCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    description?: SortOrder
    classification?: SortOrder
    tags?: SortOrder
    expirience?: SortOrder
    costType?: SortOrder
    cost?: SortOrder
  }

  export type ExecutorInfoAvgOrderByAggregateInput = {
    rating?: SortOrder
    ratingCount?: SortOrder
    cost?: SortOrder
  }

  export type ExecutorInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    description?: SortOrder
    classification?: SortOrder
    expirience?: SortOrder
    costType?: SortOrder
    cost?: SortOrder
  }

  export type ExecutorInfoMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    description?: SortOrder
    classification?: SortOrder
    expirience?: SortOrder
    costType?: SortOrder
    cost?: SortOrder
  }

  export type ExecutorInfoSumOrderByAggregateInput = {
    rating?: SortOrder
    ratingCount?: SortOrder
    cost?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumExpirienceEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExpirienceEnum | EnumExpirienceEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ExpirienceEnum[] | ListEnumExpirienceEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExpirienceEnum[] | ListEnumExpirienceEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumExpirienceEnumWithAggregatesFilter<$PrismaModel> | $Enums.ExpirienceEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExpirienceEnumFilter<$PrismaModel>
    _max?: NestedEnumExpirienceEnumFilter<$PrismaModel>
  }

  export type EnumCostTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CostTypeEnum | EnumCostTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CostTypeEnum[] | ListEnumCostTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.CostTypeEnum[] | ListEnumCostTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumCostTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.CostTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCostTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumCostTypeEnumFilter<$PrismaModel>
  }

  export type CustomerInfoOrderByRelevanceInput = {
    fields: CustomerInfoOrderByRelevanceFieldEnum | CustomerInfoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CustomerInfoCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type CustomerInfoAvgOrderByAggregateInput = {
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type CustomerInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type CustomerInfoMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type CustomerInfoSumOrderByAggregateInput = {
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumOrderStatusEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatusEnum | EnumOrderStatusEnumFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatusEnum[] | ListEnumOrderStatusEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatusEnum[] | ListEnumOrderStatusEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusEnumFilter<$PrismaModel> | $Enums.OrderStatusEnum
  }

  export type CustomerInfoRelationFilter = {
    is?: CustomerInfoWhereInput
    isNot?: CustomerInfoWhereInput
  }

  export type SpecializationRelationFilter = {
    is?: SpecializationWhereInput
    isNot?: SpecializationWhereInput
  }

  export type OrderOrderByRelevanceInput = {
    fields: OrderOrderByRelevanceFieldEnum | OrderOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    files?: SortOrder
    tags?: SortOrder
    views?: SortOrder
    costType?: SortOrder
    cost?: SortOrder
    comment?: SortOrder
    responsesCount?: SortOrder
    specializationId?: SortOrder
    executorId?: SortOrder
    doneExecutorId?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    views?: SortOrder
    cost?: SortOrder
    responsesCount?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    views?: SortOrder
    costType?: SortOrder
    cost?: SortOrder
    comment?: SortOrder
    responsesCount?: SortOrder
    specializationId?: SortOrder
    executorId?: SortOrder
    doneExecutorId?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    views?: SortOrder
    costType?: SortOrder
    cost?: SortOrder
    comment?: SortOrder
    responsesCount?: SortOrder
    specializationId?: SortOrder
    executorId?: SortOrder
    doneExecutorId?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    views?: SortOrder
    cost?: SortOrder
    responsesCount?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumOrderStatusEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatusEnum | EnumOrderStatusEnumFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatusEnum[] | ListEnumOrderStatusEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatusEnum[] | ListEnumOrderStatusEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusEnumWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatusEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusEnumFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusEnumFilter<$PrismaModel>
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type ExecutorInfoRelationFilter = {
    is?: ExecutorInfoWhereInput
    isNot?: ExecutorInfoWhereInput
  }

  export type ResponseOrderByRelevanceInput = {
    fields: ResponseOrderByRelevanceFieldEnum | ResponseOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ResponseOrderIdExecutorIdCompoundUniqueInput = {
    orderId: string
    executorId: string
  }

  export type ResponseCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    orderId?: SortOrder
    executorId?: SortOrder
    comment?: SortOrder
  }

  export type ResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    orderId?: SortOrder
    executorId?: SortOrder
    comment?: SortOrder
  }

  export type ResponseMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    orderId?: SortOrder
    executorId?: SortOrder
    comment?: SortOrder
  }

  export type ExecutorInfoListRelationFilter = {
    every?: ExecutorInfoWhereInput
    some?: ExecutorInfoWhereInput
    none?: ExecutorInfoWhereInput
  }

  export type ExecutorInfoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpecializationOrderByRelevanceInput = {
    fields: SpecializationOrderByRelevanceFieldEnum | SpecializationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SpecializationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    topLevelTitle?: SortOrder
  }

  export type SpecializationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    topLevelTitle?: SortOrder
  }

  export type SpecializationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    topLevelTitle?: SortOrder
  }

  export type ContactOrderByRelevanceInput = {
    fields: ContactOrderByRelevanceFieldEnum | ContactOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    site?: SortOrder
    phone?: SortOrder
    mail?: SortOrder
    telegram?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    site?: SortOrder
    phone?: SortOrder
    mail?: SortOrder
    telegram?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    site?: SortOrder
    phone?: SortOrder
    mail?: SortOrder
    telegram?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TopUpBalanceOrderByRelevanceInput = {
    fields: TopUpBalanceOrderByRelevanceFieldEnum | TopUpBalanceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TopUpBalanceCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sum?: SortOrder
    reason?: SortOrder
    toUserId?: SortOrder
  }

  export type TopUpBalanceAvgOrderByAggregateInput = {
    sum?: SortOrder
  }

  export type TopUpBalanceMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sum?: SortOrder
    reason?: SortOrder
    toUserId?: SortOrder
  }

  export type TopUpBalanceMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sum?: SortOrder
    reason?: SortOrder
    toUserId?: SortOrder
  }

  export type TopUpBalanceSumOrderByAggregateInput = {
    sum?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DecreaseBalanceOrderByRelevanceInput = {
    fields: DecreaseBalanceOrderByRelevanceFieldEnum | DecreaseBalanceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DecreaseBalanceCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sum?: SortOrder
    reason?: SortOrder
    fromUserId?: SortOrder
  }

  export type DecreaseBalanceAvgOrderByAggregateInput = {
    sum?: SortOrder
  }

  export type DecreaseBalanceMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sum?: SortOrder
    reason?: SortOrder
    fromUserId?: SortOrder
  }

  export type DecreaseBalanceMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sum?: SortOrder
    reason?: SortOrder
    fromUserId?: SortOrder
  }

  export type DecreaseBalanceSumOrderByAggregateInput = {
    sum?: SortOrder
  }

  export type ExecutorInfoCreateNestedOneWithoutUserInput = {
    create?: XOR<ExecutorInfoCreateWithoutUserInput, ExecutorInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: ExecutorInfoCreateOrConnectWithoutUserInput
    connect?: ExecutorInfoWhereUniqueInput
  }

  export type CustomerInfoCreateNestedOneWithoutUserInput = {
    create?: XOR<CustomerInfoCreateWithoutUserInput, CustomerInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerInfoCreateOrConnectWithoutUserInput
    connect?: CustomerInfoWhereUniqueInput
  }

  export type ContactCreateNestedOneWithoutUserInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput>
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput
    connect?: ContactWhereUniqueInput
  }

  export type TopUpBalanceCreateNestedManyWithoutToUserInput = {
    create?: XOR<TopUpBalanceCreateWithoutToUserInput, TopUpBalanceUncheckedCreateWithoutToUserInput> | TopUpBalanceCreateWithoutToUserInput[] | TopUpBalanceUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: TopUpBalanceCreateOrConnectWithoutToUserInput | TopUpBalanceCreateOrConnectWithoutToUserInput[]
    createMany?: TopUpBalanceCreateManyToUserInputEnvelope
    connect?: TopUpBalanceWhereUniqueInput | TopUpBalanceWhereUniqueInput[]
  }

  export type DecreaseBalanceCreateNestedManyWithoutFromUserInput = {
    create?: XOR<DecreaseBalanceCreateWithoutFromUserInput, DecreaseBalanceUncheckedCreateWithoutFromUserInput> | DecreaseBalanceCreateWithoutFromUserInput[] | DecreaseBalanceUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: DecreaseBalanceCreateOrConnectWithoutFromUserInput | DecreaseBalanceCreateOrConnectWithoutFromUserInput[]
    createMany?: DecreaseBalanceCreateManyFromUserInputEnvelope
    connect?: DecreaseBalanceWhereUniqueInput | DecreaseBalanceWhereUniqueInput[]
  }

  export type ExecutorInfoUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ExecutorInfoCreateWithoutUserInput, ExecutorInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: ExecutorInfoCreateOrConnectWithoutUserInput
    connect?: ExecutorInfoWhereUniqueInput
  }

  export type CustomerInfoUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CustomerInfoCreateWithoutUserInput, CustomerInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerInfoCreateOrConnectWithoutUserInput
    connect?: CustomerInfoWhereUniqueInput
  }

  export type ContactUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput>
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput
    connect?: ContactWhereUniqueInput
  }

  export type TopUpBalanceUncheckedCreateNestedManyWithoutToUserInput = {
    create?: XOR<TopUpBalanceCreateWithoutToUserInput, TopUpBalanceUncheckedCreateWithoutToUserInput> | TopUpBalanceCreateWithoutToUserInput[] | TopUpBalanceUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: TopUpBalanceCreateOrConnectWithoutToUserInput | TopUpBalanceCreateOrConnectWithoutToUserInput[]
    createMany?: TopUpBalanceCreateManyToUserInputEnvelope
    connect?: TopUpBalanceWhereUniqueInput | TopUpBalanceWhereUniqueInput[]
  }

  export type DecreaseBalanceUncheckedCreateNestedManyWithoutFromUserInput = {
    create?: XOR<DecreaseBalanceCreateWithoutFromUserInput, DecreaseBalanceUncheckedCreateWithoutFromUserInput> | DecreaseBalanceCreateWithoutFromUserInput[] | DecreaseBalanceUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: DecreaseBalanceCreateOrConnectWithoutFromUserInput | DecreaseBalanceCreateOrConnectWithoutFromUserInput[]
    createMany?: DecreaseBalanceCreateManyFromUserInputEnvelope
    connect?: DecreaseBalanceWhereUniqueInput | DecreaseBalanceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleEnumFieldUpdateOperationsInput = {
    set?: $Enums.UserRoleEnum
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ExecutorInfoUpdateOneWithoutUserNestedInput = {
    create?: XOR<ExecutorInfoCreateWithoutUserInput, ExecutorInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: ExecutorInfoCreateOrConnectWithoutUserInput
    upsert?: ExecutorInfoUpsertWithoutUserInput
    disconnect?: ExecutorInfoWhereInput | boolean
    delete?: ExecutorInfoWhereInput | boolean
    connect?: ExecutorInfoWhereUniqueInput
    update?: XOR<XOR<ExecutorInfoUpdateToOneWithWhereWithoutUserInput, ExecutorInfoUpdateWithoutUserInput>, ExecutorInfoUncheckedUpdateWithoutUserInput>
  }

  export type CustomerInfoUpdateOneWithoutUserNestedInput = {
    create?: XOR<CustomerInfoCreateWithoutUserInput, CustomerInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerInfoCreateOrConnectWithoutUserInput
    upsert?: CustomerInfoUpsertWithoutUserInput
    disconnect?: CustomerInfoWhereInput | boolean
    delete?: CustomerInfoWhereInput | boolean
    connect?: CustomerInfoWhereUniqueInput
    update?: XOR<XOR<CustomerInfoUpdateToOneWithWhereWithoutUserInput, CustomerInfoUpdateWithoutUserInput>, CustomerInfoUncheckedUpdateWithoutUserInput>
  }

  export type ContactUpdateOneWithoutUserNestedInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput>
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput
    upsert?: ContactUpsertWithoutUserInput
    disconnect?: ContactWhereInput | boolean
    delete?: ContactWhereInput | boolean
    connect?: ContactWhereUniqueInput
    update?: XOR<XOR<ContactUpdateToOneWithWhereWithoutUserInput, ContactUpdateWithoutUserInput>, ContactUncheckedUpdateWithoutUserInput>
  }

  export type TopUpBalanceUpdateManyWithoutToUserNestedInput = {
    create?: XOR<TopUpBalanceCreateWithoutToUserInput, TopUpBalanceUncheckedCreateWithoutToUserInput> | TopUpBalanceCreateWithoutToUserInput[] | TopUpBalanceUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: TopUpBalanceCreateOrConnectWithoutToUserInput | TopUpBalanceCreateOrConnectWithoutToUserInput[]
    upsert?: TopUpBalanceUpsertWithWhereUniqueWithoutToUserInput | TopUpBalanceUpsertWithWhereUniqueWithoutToUserInput[]
    createMany?: TopUpBalanceCreateManyToUserInputEnvelope
    set?: TopUpBalanceWhereUniqueInput | TopUpBalanceWhereUniqueInput[]
    disconnect?: TopUpBalanceWhereUniqueInput | TopUpBalanceWhereUniqueInput[]
    delete?: TopUpBalanceWhereUniqueInput | TopUpBalanceWhereUniqueInput[]
    connect?: TopUpBalanceWhereUniqueInput | TopUpBalanceWhereUniqueInput[]
    update?: TopUpBalanceUpdateWithWhereUniqueWithoutToUserInput | TopUpBalanceUpdateWithWhereUniqueWithoutToUserInput[]
    updateMany?: TopUpBalanceUpdateManyWithWhereWithoutToUserInput | TopUpBalanceUpdateManyWithWhereWithoutToUserInput[]
    deleteMany?: TopUpBalanceScalarWhereInput | TopUpBalanceScalarWhereInput[]
  }

  export type DecreaseBalanceUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<DecreaseBalanceCreateWithoutFromUserInput, DecreaseBalanceUncheckedCreateWithoutFromUserInput> | DecreaseBalanceCreateWithoutFromUserInput[] | DecreaseBalanceUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: DecreaseBalanceCreateOrConnectWithoutFromUserInput | DecreaseBalanceCreateOrConnectWithoutFromUserInput[]
    upsert?: DecreaseBalanceUpsertWithWhereUniqueWithoutFromUserInput | DecreaseBalanceUpsertWithWhereUniqueWithoutFromUserInput[]
    createMany?: DecreaseBalanceCreateManyFromUserInputEnvelope
    set?: DecreaseBalanceWhereUniqueInput | DecreaseBalanceWhereUniqueInput[]
    disconnect?: DecreaseBalanceWhereUniqueInput | DecreaseBalanceWhereUniqueInput[]
    delete?: DecreaseBalanceWhereUniqueInput | DecreaseBalanceWhereUniqueInput[]
    connect?: DecreaseBalanceWhereUniqueInput | DecreaseBalanceWhereUniqueInput[]
    update?: DecreaseBalanceUpdateWithWhereUniqueWithoutFromUserInput | DecreaseBalanceUpdateWithWhereUniqueWithoutFromUserInput[]
    updateMany?: DecreaseBalanceUpdateManyWithWhereWithoutFromUserInput | DecreaseBalanceUpdateManyWithWhereWithoutFromUserInput[]
    deleteMany?: DecreaseBalanceScalarWhereInput | DecreaseBalanceScalarWhereInput[]
  }

  export type ExecutorInfoUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ExecutorInfoCreateWithoutUserInput, ExecutorInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: ExecutorInfoCreateOrConnectWithoutUserInput
    upsert?: ExecutorInfoUpsertWithoutUserInput
    disconnect?: ExecutorInfoWhereInput | boolean
    delete?: ExecutorInfoWhereInput | boolean
    connect?: ExecutorInfoWhereUniqueInput
    update?: XOR<XOR<ExecutorInfoUpdateToOneWithWhereWithoutUserInput, ExecutorInfoUpdateWithoutUserInput>, ExecutorInfoUncheckedUpdateWithoutUserInput>
  }

  export type CustomerInfoUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CustomerInfoCreateWithoutUserInput, CustomerInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerInfoCreateOrConnectWithoutUserInput
    upsert?: CustomerInfoUpsertWithoutUserInput
    disconnect?: CustomerInfoWhereInput | boolean
    delete?: CustomerInfoWhereInput | boolean
    connect?: CustomerInfoWhereUniqueInput
    update?: XOR<XOR<CustomerInfoUpdateToOneWithWhereWithoutUserInput, CustomerInfoUpdateWithoutUserInput>, CustomerInfoUncheckedUpdateWithoutUserInput>
  }

  export type ContactUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput>
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput
    upsert?: ContactUpsertWithoutUserInput
    disconnect?: ContactWhereInput | boolean
    delete?: ContactWhereInput | boolean
    connect?: ContactWhereUniqueInput
    update?: XOR<XOR<ContactUpdateToOneWithWhereWithoutUserInput, ContactUpdateWithoutUserInput>, ContactUncheckedUpdateWithoutUserInput>
  }

  export type TopUpBalanceUncheckedUpdateManyWithoutToUserNestedInput = {
    create?: XOR<TopUpBalanceCreateWithoutToUserInput, TopUpBalanceUncheckedCreateWithoutToUserInput> | TopUpBalanceCreateWithoutToUserInput[] | TopUpBalanceUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: TopUpBalanceCreateOrConnectWithoutToUserInput | TopUpBalanceCreateOrConnectWithoutToUserInput[]
    upsert?: TopUpBalanceUpsertWithWhereUniqueWithoutToUserInput | TopUpBalanceUpsertWithWhereUniqueWithoutToUserInput[]
    createMany?: TopUpBalanceCreateManyToUserInputEnvelope
    set?: TopUpBalanceWhereUniqueInput | TopUpBalanceWhereUniqueInput[]
    disconnect?: TopUpBalanceWhereUniqueInput | TopUpBalanceWhereUniqueInput[]
    delete?: TopUpBalanceWhereUniqueInput | TopUpBalanceWhereUniqueInput[]
    connect?: TopUpBalanceWhereUniqueInput | TopUpBalanceWhereUniqueInput[]
    update?: TopUpBalanceUpdateWithWhereUniqueWithoutToUserInput | TopUpBalanceUpdateWithWhereUniqueWithoutToUserInput[]
    updateMany?: TopUpBalanceUpdateManyWithWhereWithoutToUserInput | TopUpBalanceUpdateManyWithWhereWithoutToUserInput[]
    deleteMany?: TopUpBalanceScalarWhereInput | TopUpBalanceScalarWhereInput[]
  }

  export type DecreaseBalanceUncheckedUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<DecreaseBalanceCreateWithoutFromUserInput, DecreaseBalanceUncheckedCreateWithoutFromUserInput> | DecreaseBalanceCreateWithoutFromUserInput[] | DecreaseBalanceUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: DecreaseBalanceCreateOrConnectWithoutFromUserInput | DecreaseBalanceCreateOrConnectWithoutFromUserInput[]
    upsert?: DecreaseBalanceUpsertWithWhereUniqueWithoutFromUserInput | DecreaseBalanceUpsertWithWhereUniqueWithoutFromUserInput[]
    createMany?: DecreaseBalanceCreateManyFromUserInputEnvelope
    set?: DecreaseBalanceWhereUniqueInput | DecreaseBalanceWhereUniqueInput[]
    disconnect?: DecreaseBalanceWhereUniqueInput | DecreaseBalanceWhereUniqueInput[]
    delete?: DecreaseBalanceWhereUniqueInput | DecreaseBalanceWhereUniqueInput[]
    connect?: DecreaseBalanceWhereUniqueInput | DecreaseBalanceWhereUniqueInput[]
    update?: DecreaseBalanceUpdateWithWhereUniqueWithoutFromUserInput | DecreaseBalanceUpdateWithWhereUniqueWithoutFromUserInput[]
    updateMany?: DecreaseBalanceUpdateManyWithWhereWithoutFromUserInput | DecreaseBalanceUpdateManyWithWhereWithoutFromUserInput[]
    deleteMany?: DecreaseBalanceScalarWhereInput | DecreaseBalanceScalarWhereInput[]
  }

  export type ExecutorInfoCreatetagsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutExecutorInfoInput = {
    create?: XOR<UserCreateWithoutExecutorInfoInput, UserUncheckedCreateWithoutExecutorInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutExecutorInfoInput
    connect?: UserWhereUniqueInput
  }

  export type ResponseCreateNestedManyWithoutExecutorInput = {
    create?: XOR<ResponseCreateWithoutExecutorInput, ResponseUncheckedCreateWithoutExecutorInput> | ResponseCreateWithoutExecutorInput[] | ResponseUncheckedCreateWithoutExecutorInput[]
    connectOrCreate?: ResponseCreateOrConnectWithoutExecutorInput | ResponseCreateOrConnectWithoutExecutorInput[]
    createMany?: ResponseCreateManyExecutorInputEnvelope
    connect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
  }

  export type SpecializationCreateNestedManyWithoutExecutorsInput = {
    create?: XOR<SpecializationCreateWithoutExecutorsInput, SpecializationUncheckedCreateWithoutExecutorsInput> | SpecializationCreateWithoutExecutorsInput[] | SpecializationUncheckedCreateWithoutExecutorsInput[]
    connectOrCreate?: SpecializationCreateOrConnectWithoutExecutorsInput | SpecializationCreateOrConnectWithoutExecutorsInput[]
    connect?: SpecializationWhereUniqueInput | SpecializationWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutExecutorInput = {
    create?: XOR<OrderCreateWithoutExecutorInput, OrderUncheckedCreateWithoutExecutorInput> | OrderCreateWithoutExecutorInput[] | OrderUncheckedCreateWithoutExecutorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutExecutorInput | OrderCreateOrConnectWithoutExecutorInput[]
    createMany?: OrderCreateManyExecutorInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutDoneExecutorInput = {
    create?: XOR<OrderCreateWithoutDoneExecutorInput, OrderUncheckedCreateWithoutDoneExecutorInput> | OrderCreateWithoutDoneExecutorInput[] | OrderUncheckedCreateWithoutDoneExecutorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDoneExecutorInput | OrderCreateOrConnectWithoutDoneExecutorInput[]
    createMany?: OrderCreateManyDoneExecutorInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ResponseUncheckedCreateNestedManyWithoutExecutorInput = {
    create?: XOR<ResponseCreateWithoutExecutorInput, ResponseUncheckedCreateWithoutExecutorInput> | ResponseCreateWithoutExecutorInput[] | ResponseUncheckedCreateWithoutExecutorInput[]
    connectOrCreate?: ResponseCreateOrConnectWithoutExecutorInput | ResponseCreateOrConnectWithoutExecutorInput[]
    createMany?: ResponseCreateManyExecutorInputEnvelope
    connect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
  }

  export type SpecializationUncheckedCreateNestedManyWithoutExecutorsInput = {
    create?: XOR<SpecializationCreateWithoutExecutorsInput, SpecializationUncheckedCreateWithoutExecutorsInput> | SpecializationCreateWithoutExecutorsInput[] | SpecializationUncheckedCreateWithoutExecutorsInput[]
    connectOrCreate?: SpecializationCreateOrConnectWithoutExecutorsInput | SpecializationCreateOrConnectWithoutExecutorsInput[]
    connect?: SpecializationWhereUniqueInput | SpecializationWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutExecutorInput = {
    create?: XOR<OrderCreateWithoutExecutorInput, OrderUncheckedCreateWithoutExecutorInput> | OrderCreateWithoutExecutorInput[] | OrderUncheckedCreateWithoutExecutorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutExecutorInput | OrderCreateOrConnectWithoutExecutorInput[]
    createMany?: OrderCreateManyExecutorInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutDoneExecutorInput = {
    create?: XOR<OrderCreateWithoutDoneExecutorInput, OrderUncheckedCreateWithoutDoneExecutorInput> | OrderCreateWithoutDoneExecutorInput[] | OrderUncheckedCreateWithoutDoneExecutorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDoneExecutorInput | OrderCreateOrConnectWithoutDoneExecutorInput[]
    createMany?: OrderCreateManyDoneExecutorInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ExecutorInfoUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumExpirienceEnumFieldUpdateOperationsInput = {
    set?: $Enums.ExpirienceEnum
  }

  export type EnumCostTypeEnumFieldUpdateOperationsInput = {
    set?: $Enums.CostTypeEnum
  }

  export type UserUpdateOneRequiredWithoutExecutorInfoNestedInput = {
    create?: XOR<UserCreateWithoutExecutorInfoInput, UserUncheckedCreateWithoutExecutorInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutExecutorInfoInput
    upsert?: UserUpsertWithoutExecutorInfoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutExecutorInfoInput, UserUpdateWithoutExecutorInfoInput>, UserUncheckedUpdateWithoutExecutorInfoInput>
  }

  export type ResponseUpdateManyWithoutExecutorNestedInput = {
    create?: XOR<ResponseCreateWithoutExecutorInput, ResponseUncheckedCreateWithoutExecutorInput> | ResponseCreateWithoutExecutorInput[] | ResponseUncheckedCreateWithoutExecutorInput[]
    connectOrCreate?: ResponseCreateOrConnectWithoutExecutorInput | ResponseCreateOrConnectWithoutExecutorInput[]
    upsert?: ResponseUpsertWithWhereUniqueWithoutExecutorInput | ResponseUpsertWithWhereUniqueWithoutExecutorInput[]
    createMany?: ResponseCreateManyExecutorInputEnvelope
    set?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    disconnect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    delete?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    connect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    update?: ResponseUpdateWithWhereUniqueWithoutExecutorInput | ResponseUpdateWithWhereUniqueWithoutExecutorInput[]
    updateMany?: ResponseUpdateManyWithWhereWithoutExecutorInput | ResponseUpdateManyWithWhereWithoutExecutorInput[]
    deleteMany?: ResponseScalarWhereInput | ResponseScalarWhereInput[]
  }

  export type SpecializationUpdateManyWithoutExecutorsNestedInput = {
    create?: XOR<SpecializationCreateWithoutExecutorsInput, SpecializationUncheckedCreateWithoutExecutorsInput> | SpecializationCreateWithoutExecutorsInput[] | SpecializationUncheckedCreateWithoutExecutorsInput[]
    connectOrCreate?: SpecializationCreateOrConnectWithoutExecutorsInput | SpecializationCreateOrConnectWithoutExecutorsInput[]
    upsert?: SpecializationUpsertWithWhereUniqueWithoutExecutorsInput | SpecializationUpsertWithWhereUniqueWithoutExecutorsInput[]
    set?: SpecializationWhereUniqueInput | SpecializationWhereUniqueInput[]
    disconnect?: SpecializationWhereUniqueInput | SpecializationWhereUniqueInput[]
    delete?: SpecializationWhereUniqueInput | SpecializationWhereUniqueInput[]
    connect?: SpecializationWhereUniqueInput | SpecializationWhereUniqueInput[]
    update?: SpecializationUpdateWithWhereUniqueWithoutExecutorsInput | SpecializationUpdateWithWhereUniqueWithoutExecutorsInput[]
    updateMany?: SpecializationUpdateManyWithWhereWithoutExecutorsInput | SpecializationUpdateManyWithWhereWithoutExecutorsInput[]
    deleteMany?: SpecializationScalarWhereInput | SpecializationScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutExecutorNestedInput = {
    create?: XOR<OrderCreateWithoutExecutorInput, OrderUncheckedCreateWithoutExecutorInput> | OrderCreateWithoutExecutorInput[] | OrderUncheckedCreateWithoutExecutorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutExecutorInput | OrderCreateOrConnectWithoutExecutorInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutExecutorInput | OrderUpsertWithWhereUniqueWithoutExecutorInput[]
    createMany?: OrderCreateManyExecutorInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutExecutorInput | OrderUpdateWithWhereUniqueWithoutExecutorInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutExecutorInput | OrderUpdateManyWithWhereWithoutExecutorInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutDoneExecutorNestedInput = {
    create?: XOR<OrderCreateWithoutDoneExecutorInput, OrderUncheckedCreateWithoutDoneExecutorInput> | OrderCreateWithoutDoneExecutorInput[] | OrderUncheckedCreateWithoutDoneExecutorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDoneExecutorInput | OrderCreateOrConnectWithoutDoneExecutorInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutDoneExecutorInput | OrderUpsertWithWhereUniqueWithoutDoneExecutorInput[]
    createMany?: OrderCreateManyDoneExecutorInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutDoneExecutorInput | OrderUpdateWithWhereUniqueWithoutDoneExecutorInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutDoneExecutorInput | OrderUpdateManyWithWhereWithoutDoneExecutorInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ResponseUncheckedUpdateManyWithoutExecutorNestedInput = {
    create?: XOR<ResponseCreateWithoutExecutorInput, ResponseUncheckedCreateWithoutExecutorInput> | ResponseCreateWithoutExecutorInput[] | ResponseUncheckedCreateWithoutExecutorInput[]
    connectOrCreate?: ResponseCreateOrConnectWithoutExecutorInput | ResponseCreateOrConnectWithoutExecutorInput[]
    upsert?: ResponseUpsertWithWhereUniqueWithoutExecutorInput | ResponseUpsertWithWhereUniqueWithoutExecutorInput[]
    createMany?: ResponseCreateManyExecutorInputEnvelope
    set?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    disconnect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    delete?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    connect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    update?: ResponseUpdateWithWhereUniqueWithoutExecutorInput | ResponseUpdateWithWhereUniqueWithoutExecutorInput[]
    updateMany?: ResponseUpdateManyWithWhereWithoutExecutorInput | ResponseUpdateManyWithWhereWithoutExecutorInput[]
    deleteMany?: ResponseScalarWhereInput | ResponseScalarWhereInput[]
  }

  export type SpecializationUncheckedUpdateManyWithoutExecutorsNestedInput = {
    create?: XOR<SpecializationCreateWithoutExecutorsInput, SpecializationUncheckedCreateWithoutExecutorsInput> | SpecializationCreateWithoutExecutorsInput[] | SpecializationUncheckedCreateWithoutExecutorsInput[]
    connectOrCreate?: SpecializationCreateOrConnectWithoutExecutorsInput | SpecializationCreateOrConnectWithoutExecutorsInput[]
    upsert?: SpecializationUpsertWithWhereUniqueWithoutExecutorsInput | SpecializationUpsertWithWhereUniqueWithoutExecutorsInput[]
    set?: SpecializationWhereUniqueInput | SpecializationWhereUniqueInput[]
    disconnect?: SpecializationWhereUniqueInput | SpecializationWhereUniqueInput[]
    delete?: SpecializationWhereUniqueInput | SpecializationWhereUniqueInput[]
    connect?: SpecializationWhereUniqueInput | SpecializationWhereUniqueInput[]
    update?: SpecializationUpdateWithWhereUniqueWithoutExecutorsInput | SpecializationUpdateWithWhereUniqueWithoutExecutorsInput[]
    updateMany?: SpecializationUpdateManyWithWhereWithoutExecutorsInput | SpecializationUpdateManyWithWhereWithoutExecutorsInput[]
    deleteMany?: SpecializationScalarWhereInput | SpecializationScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutExecutorNestedInput = {
    create?: XOR<OrderCreateWithoutExecutorInput, OrderUncheckedCreateWithoutExecutorInput> | OrderCreateWithoutExecutorInput[] | OrderUncheckedCreateWithoutExecutorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutExecutorInput | OrderCreateOrConnectWithoutExecutorInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutExecutorInput | OrderUpsertWithWhereUniqueWithoutExecutorInput[]
    createMany?: OrderCreateManyExecutorInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutExecutorInput | OrderUpdateWithWhereUniqueWithoutExecutorInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutExecutorInput | OrderUpdateManyWithWhereWithoutExecutorInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutDoneExecutorNestedInput = {
    create?: XOR<OrderCreateWithoutDoneExecutorInput, OrderUncheckedCreateWithoutDoneExecutorInput> | OrderCreateWithoutDoneExecutorInput[] | OrderUncheckedCreateWithoutDoneExecutorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDoneExecutorInput | OrderCreateOrConnectWithoutDoneExecutorInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutDoneExecutorInput | OrderUpsertWithWhereUniqueWithoutDoneExecutorInput[]
    createMany?: OrderCreateManyDoneExecutorInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutDoneExecutorInput | OrderUpdateWithWhereUniqueWithoutDoneExecutorInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutDoneExecutorInput | OrderUpdateManyWithWhereWithoutDoneExecutorInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCustoremInfoInput = {
    create?: XOR<UserCreateWithoutCustoremInfoInput, UserUncheckedCreateWithoutCustoremInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustoremInfoInput
    connect?: UserWhereUniqueInput
  }

  export type OrderCreateNestedManyWithoutCustomerInput = {
    create?: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput> | OrderCreateWithoutCustomerInput[] | OrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCustomerInput | OrderCreateOrConnectWithoutCustomerInput[]
    createMany?: OrderCreateManyCustomerInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput> | OrderCreateWithoutCustomerInput[] | OrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCustomerInput | OrderCreateOrConnectWithoutCustomerInput[]
    createMany?: OrderCreateManyCustomerInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCustoremInfoNestedInput = {
    create?: XOR<UserCreateWithoutCustoremInfoInput, UserUncheckedCreateWithoutCustoremInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustoremInfoInput
    upsert?: UserUpsertWithoutCustoremInfoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCustoremInfoInput, UserUpdateWithoutCustoremInfoInput>, UserUncheckedUpdateWithoutCustoremInfoInput>
  }

  export type OrderUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput> | OrderCreateWithoutCustomerInput[] | OrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCustomerInput | OrderCreateOrConnectWithoutCustomerInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutCustomerInput | OrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: OrderCreateManyCustomerInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutCustomerInput | OrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutCustomerInput | OrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput> | OrderCreateWithoutCustomerInput[] | OrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCustomerInput | OrderCreateOrConnectWithoutCustomerInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutCustomerInput | OrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: OrderCreateManyCustomerInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutCustomerInput | OrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutCustomerInput | OrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderCreatefilesInput = {
    set: string[]
  }

  export type OrderCreatetagsInput = {
    set: string[]
  }

  export type CustomerInfoCreateNestedOneWithoutOrdersInput = {
    create?: XOR<CustomerInfoCreateWithoutOrdersInput, CustomerInfoUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: CustomerInfoCreateOrConnectWithoutOrdersInput
    connect?: CustomerInfoWhereUniqueInput
  }

  export type ResponseCreateNestedManyWithoutOrderInput = {
    create?: XOR<ResponseCreateWithoutOrderInput, ResponseUncheckedCreateWithoutOrderInput> | ResponseCreateWithoutOrderInput[] | ResponseUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ResponseCreateOrConnectWithoutOrderInput | ResponseCreateOrConnectWithoutOrderInput[]
    createMany?: ResponseCreateManyOrderInputEnvelope
    connect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
  }

  export type SpecializationCreateNestedOneWithoutOrdersInput = {
    create?: XOR<SpecializationCreateWithoutOrdersInput, SpecializationUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: SpecializationCreateOrConnectWithoutOrdersInput
    connect?: SpecializationWhereUniqueInput
  }

  export type ExecutorInfoCreateNestedOneWithoutActiveOrdersInput = {
    create?: XOR<ExecutorInfoCreateWithoutActiveOrdersInput, ExecutorInfoUncheckedCreateWithoutActiveOrdersInput>
    connectOrCreate?: ExecutorInfoCreateOrConnectWithoutActiveOrdersInput
    connect?: ExecutorInfoWhereUniqueInput
  }

  export type ExecutorInfoCreateNestedOneWithoutDoneOrdersInput = {
    create?: XOR<ExecutorInfoCreateWithoutDoneOrdersInput, ExecutorInfoUncheckedCreateWithoutDoneOrdersInput>
    connectOrCreate?: ExecutorInfoCreateOrConnectWithoutDoneOrdersInput
    connect?: ExecutorInfoWhereUniqueInput
  }

  export type ResponseUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<ResponseCreateWithoutOrderInput, ResponseUncheckedCreateWithoutOrderInput> | ResponseCreateWithoutOrderInput[] | ResponseUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ResponseCreateOrConnectWithoutOrderInput | ResponseCreateOrConnectWithoutOrderInput[]
    createMany?: ResponseCreateManyOrderInputEnvelope
    connect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumOrderStatusEnumFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatusEnum
  }

  export type OrderUpdatefilesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type OrderUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CustomerInfoUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<CustomerInfoCreateWithoutOrdersInput, CustomerInfoUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: CustomerInfoCreateOrConnectWithoutOrdersInput
    upsert?: CustomerInfoUpsertWithoutOrdersInput
    connect?: CustomerInfoWhereUniqueInput
    update?: XOR<XOR<CustomerInfoUpdateToOneWithWhereWithoutOrdersInput, CustomerInfoUpdateWithoutOrdersInput>, CustomerInfoUncheckedUpdateWithoutOrdersInput>
  }

  export type ResponseUpdateManyWithoutOrderNestedInput = {
    create?: XOR<ResponseCreateWithoutOrderInput, ResponseUncheckedCreateWithoutOrderInput> | ResponseCreateWithoutOrderInput[] | ResponseUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ResponseCreateOrConnectWithoutOrderInput | ResponseCreateOrConnectWithoutOrderInput[]
    upsert?: ResponseUpsertWithWhereUniqueWithoutOrderInput | ResponseUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: ResponseCreateManyOrderInputEnvelope
    set?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    disconnect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    delete?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    connect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    update?: ResponseUpdateWithWhereUniqueWithoutOrderInput | ResponseUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: ResponseUpdateManyWithWhereWithoutOrderInput | ResponseUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: ResponseScalarWhereInput | ResponseScalarWhereInput[]
  }

  export type SpecializationUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<SpecializationCreateWithoutOrdersInput, SpecializationUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: SpecializationCreateOrConnectWithoutOrdersInput
    upsert?: SpecializationUpsertWithoutOrdersInput
    connect?: SpecializationWhereUniqueInput
    update?: XOR<XOR<SpecializationUpdateToOneWithWhereWithoutOrdersInput, SpecializationUpdateWithoutOrdersInput>, SpecializationUncheckedUpdateWithoutOrdersInput>
  }

  export type ExecutorInfoUpdateOneWithoutActiveOrdersNestedInput = {
    create?: XOR<ExecutorInfoCreateWithoutActiveOrdersInput, ExecutorInfoUncheckedCreateWithoutActiveOrdersInput>
    connectOrCreate?: ExecutorInfoCreateOrConnectWithoutActiveOrdersInput
    upsert?: ExecutorInfoUpsertWithoutActiveOrdersInput
    disconnect?: ExecutorInfoWhereInput | boolean
    delete?: ExecutorInfoWhereInput | boolean
    connect?: ExecutorInfoWhereUniqueInput
    update?: XOR<XOR<ExecutorInfoUpdateToOneWithWhereWithoutActiveOrdersInput, ExecutorInfoUpdateWithoutActiveOrdersInput>, ExecutorInfoUncheckedUpdateWithoutActiveOrdersInput>
  }

  export type ExecutorInfoUpdateOneWithoutDoneOrdersNestedInput = {
    create?: XOR<ExecutorInfoCreateWithoutDoneOrdersInput, ExecutorInfoUncheckedCreateWithoutDoneOrdersInput>
    connectOrCreate?: ExecutorInfoCreateOrConnectWithoutDoneOrdersInput
    upsert?: ExecutorInfoUpsertWithoutDoneOrdersInput
    disconnect?: ExecutorInfoWhereInput | boolean
    delete?: ExecutorInfoWhereInput | boolean
    connect?: ExecutorInfoWhereUniqueInput
    update?: XOR<XOR<ExecutorInfoUpdateToOneWithWhereWithoutDoneOrdersInput, ExecutorInfoUpdateWithoutDoneOrdersInput>, ExecutorInfoUncheckedUpdateWithoutDoneOrdersInput>
  }

  export type ResponseUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<ResponseCreateWithoutOrderInput, ResponseUncheckedCreateWithoutOrderInput> | ResponseCreateWithoutOrderInput[] | ResponseUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ResponseCreateOrConnectWithoutOrderInput | ResponseCreateOrConnectWithoutOrderInput[]
    upsert?: ResponseUpsertWithWhereUniqueWithoutOrderInput | ResponseUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: ResponseCreateManyOrderInputEnvelope
    set?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    disconnect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    delete?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    connect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    update?: ResponseUpdateWithWhereUniqueWithoutOrderInput | ResponseUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: ResponseUpdateManyWithWhereWithoutOrderInput | ResponseUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: ResponseScalarWhereInput | ResponseScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutResponsesInput = {
    create?: XOR<OrderCreateWithoutResponsesInput, OrderUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: OrderCreateOrConnectWithoutResponsesInput
    connect?: OrderWhereUniqueInput
  }

  export type ExecutorInfoCreateNestedOneWithoutResponsesInput = {
    create?: XOR<ExecutorInfoCreateWithoutResponsesInput, ExecutorInfoUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: ExecutorInfoCreateOrConnectWithoutResponsesInput
    connect?: ExecutorInfoWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutResponsesNestedInput = {
    create?: XOR<OrderCreateWithoutResponsesInput, OrderUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: OrderCreateOrConnectWithoutResponsesInput
    upsert?: OrderUpsertWithoutResponsesInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutResponsesInput, OrderUpdateWithoutResponsesInput>, OrderUncheckedUpdateWithoutResponsesInput>
  }

  export type ExecutorInfoUpdateOneRequiredWithoutResponsesNestedInput = {
    create?: XOR<ExecutorInfoCreateWithoutResponsesInput, ExecutorInfoUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: ExecutorInfoCreateOrConnectWithoutResponsesInput
    upsert?: ExecutorInfoUpsertWithoutResponsesInput
    connect?: ExecutorInfoWhereUniqueInput
    update?: XOR<XOR<ExecutorInfoUpdateToOneWithWhereWithoutResponsesInput, ExecutorInfoUpdateWithoutResponsesInput>, ExecutorInfoUncheckedUpdateWithoutResponsesInput>
  }

  export type OrderCreateNestedManyWithoutSpecializationInput = {
    create?: XOR<OrderCreateWithoutSpecializationInput, OrderUncheckedCreateWithoutSpecializationInput> | OrderCreateWithoutSpecializationInput[] | OrderUncheckedCreateWithoutSpecializationInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutSpecializationInput | OrderCreateOrConnectWithoutSpecializationInput[]
    createMany?: OrderCreateManySpecializationInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ExecutorInfoCreateNestedManyWithoutSpecializationsInput = {
    create?: XOR<ExecutorInfoCreateWithoutSpecializationsInput, ExecutorInfoUncheckedCreateWithoutSpecializationsInput> | ExecutorInfoCreateWithoutSpecializationsInput[] | ExecutorInfoUncheckedCreateWithoutSpecializationsInput[]
    connectOrCreate?: ExecutorInfoCreateOrConnectWithoutSpecializationsInput | ExecutorInfoCreateOrConnectWithoutSpecializationsInput[]
    connect?: ExecutorInfoWhereUniqueInput | ExecutorInfoWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutSpecializationInput = {
    create?: XOR<OrderCreateWithoutSpecializationInput, OrderUncheckedCreateWithoutSpecializationInput> | OrderCreateWithoutSpecializationInput[] | OrderUncheckedCreateWithoutSpecializationInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutSpecializationInput | OrderCreateOrConnectWithoutSpecializationInput[]
    createMany?: OrderCreateManySpecializationInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ExecutorInfoUncheckedCreateNestedManyWithoutSpecializationsInput = {
    create?: XOR<ExecutorInfoCreateWithoutSpecializationsInput, ExecutorInfoUncheckedCreateWithoutSpecializationsInput> | ExecutorInfoCreateWithoutSpecializationsInput[] | ExecutorInfoUncheckedCreateWithoutSpecializationsInput[]
    connectOrCreate?: ExecutorInfoCreateOrConnectWithoutSpecializationsInput | ExecutorInfoCreateOrConnectWithoutSpecializationsInput[]
    connect?: ExecutorInfoWhereUniqueInput | ExecutorInfoWhereUniqueInput[]
  }

  export type OrderUpdateManyWithoutSpecializationNestedInput = {
    create?: XOR<OrderCreateWithoutSpecializationInput, OrderUncheckedCreateWithoutSpecializationInput> | OrderCreateWithoutSpecializationInput[] | OrderUncheckedCreateWithoutSpecializationInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutSpecializationInput | OrderCreateOrConnectWithoutSpecializationInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutSpecializationInput | OrderUpsertWithWhereUniqueWithoutSpecializationInput[]
    createMany?: OrderCreateManySpecializationInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutSpecializationInput | OrderUpdateWithWhereUniqueWithoutSpecializationInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutSpecializationInput | OrderUpdateManyWithWhereWithoutSpecializationInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ExecutorInfoUpdateManyWithoutSpecializationsNestedInput = {
    create?: XOR<ExecutorInfoCreateWithoutSpecializationsInput, ExecutorInfoUncheckedCreateWithoutSpecializationsInput> | ExecutorInfoCreateWithoutSpecializationsInput[] | ExecutorInfoUncheckedCreateWithoutSpecializationsInput[]
    connectOrCreate?: ExecutorInfoCreateOrConnectWithoutSpecializationsInput | ExecutorInfoCreateOrConnectWithoutSpecializationsInput[]
    upsert?: ExecutorInfoUpsertWithWhereUniqueWithoutSpecializationsInput | ExecutorInfoUpsertWithWhereUniqueWithoutSpecializationsInput[]
    set?: ExecutorInfoWhereUniqueInput | ExecutorInfoWhereUniqueInput[]
    disconnect?: ExecutorInfoWhereUniqueInput | ExecutorInfoWhereUniqueInput[]
    delete?: ExecutorInfoWhereUniqueInput | ExecutorInfoWhereUniqueInput[]
    connect?: ExecutorInfoWhereUniqueInput | ExecutorInfoWhereUniqueInput[]
    update?: ExecutorInfoUpdateWithWhereUniqueWithoutSpecializationsInput | ExecutorInfoUpdateWithWhereUniqueWithoutSpecializationsInput[]
    updateMany?: ExecutorInfoUpdateManyWithWhereWithoutSpecializationsInput | ExecutorInfoUpdateManyWithWhereWithoutSpecializationsInput[]
    deleteMany?: ExecutorInfoScalarWhereInput | ExecutorInfoScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutSpecializationNestedInput = {
    create?: XOR<OrderCreateWithoutSpecializationInput, OrderUncheckedCreateWithoutSpecializationInput> | OrderCreateWithoutSpecializationInput[] | OrderUncheckedCreateWithoutSpecializationInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutSpecializationInput | OrderCreateOrConnectWithoutSpecializationInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutSpecializationInput | OrderUpsertWithWhereUniqueWithoutSpecializationInput[]
    createMany?: OrderCreateManySpecializationInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutSpecializationInput | OrderUpdateWithWhereUniqueWithoutSpecializationInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutSpecializationInput | OrderUpdateManyWithWhereWithoutSpecializationInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ExecutorInfoUncheckedUpdateManyWithoutSpecializationsNestedInput = {
    create?: XOR<ExecutorInfoCreateWithoutSpecializationsInput, ExecutorInfoUncheckedCreateWithoutSpecializationsInput> | ExecutorInfoCreateWithoutSpecializationsInput[] | ExecutorInfoUncheckedCreateWithoutSpecializationsInput[]
    connectOrCreate?: ExecutorInfoCreateOrConnectWithoutSpecializationsInput | ExecutorInfoCreateOrConnectWithoutSpecializationsInput[]
    upsert?: ExecutorInfoUpsertWithWhereUniqueWithoutSpecializationsInput | ExecutorInfoUpsertWithWhereUniqueWithoutSpecializationsInput[]
    set?: ExecutorInfoWhereUniqueInput | ExecutorInfoWhereUniqueInput[]
    disconnect?: ExecutorInfoWhereUniqueInput | ExecutorInfoWhereUniqueInput[]
    delete?: ExecutorInfoWhereUniqueInput | ExecutorInfoWhereUniqueInput[]
    connect?: ExecutorInfoWhereUniqueInput | ExecutorInfoWhereUniqueInput[]
    update?: ExecutorInfoUpdateWithWhereUniqueWithoutSpecializationsInput | ExecutorInfoUpdateWithWhereUniqueWithoutSpecializationsInput[]
    updateMany?: ExecutorInfoUpdateManyWithWhereWithoutSpecializationsInput | ExecutorInfoUpdateManyWithWhereWithoutSpecializationsInput[]
    deleteMany?: ExecutorInfoScalarWhereInput | ExecutorInfoScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutContactInput = {
    create?: XOR<UserCreateWithoutContactInput, UserUncheckedCreateWithoutContactInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutContactNestedInput = {
    create?: XOR<UserCreateWithoutContactInput, UserUncheckedCreateWithoutContactInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactInput
    upsert?: UserUpsertWithoutContactInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContactInput, UserUpdateWithoutContactInput>, UserUncheckedUpdateWithoutContactInput>
  }

  export type UserCreateNestedOneWithoutTopUpBalanceInput = {
    create?: XOR<UserCreateWithoutTopUpBalanceInput, UserUncheckedCreateWithoutTopUpBalanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutTopUpBalanceInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutTopUpBalanceNestedInput = {
    create?: XOR<UserCreateWithoutTopUpBalanceInput, UserUncheckedCreateWithoutTopUpBalanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutTopUpBalanceInput
    upsert?: UserUpsertWithoutTopUpBalanceInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTopUpBalanceInput, UserUpdateWithoutTopUpBalanceInput>, UserUncheckedUpdateWithoutTopUpBalanceInput>
  }

  export type UserCreateNestedOneWithoutDecreaseBalanceInput = {
    create?: XOR<UserCreateWithoutDecreaseBalanceInput, UserUncheckedCreateWithoutDecreaseBalanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutDecreaseBalanceInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutDecreaseBalanceNestedInput = {
    create?: XOR<UserCreateWithoutDecreaseBalanceInput, UserUncheckedCreateWithoutDecreaseBalanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutDecreaseBalanceInput
    upsert?: UserUpsertWithoutDecreaseBalanceInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDecreaseBalanceInput, UserUpdateWithoutDecreaseBalanceInput>, UserUncheckedUpdateWithoutDecreaseBalanceInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoleEnum | EnumUserRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleEnumFilter<$PrismaModel> | $Enums.UserRoleEnum
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoleEnum | EnumUserRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleEnumWithAggregatesFilter<$PrismaModel> | $Enums.UserRoleEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleEnumFilter<$PrismaModel>
    _max?: NestedEnumUserRoleEnumFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumExpirienceEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.ExpirienceEnum | EnumExpirienceEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ExpirienceEnum[] | ListEnumExpirienceEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExpirienceEnum[] | ListEnumExpirienceEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumExpirienceEnumFilter<$PrismaModel> | $Enums.ExpirienceEnum
  }

  export type NestedEnumCostTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.CostTypeEnum | EnumCostTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CostTypeEnum[] | ListEnumCostTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.CostTypeEnum[] | ListEnumCostTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumCostTypeEnumFilter<$PrismaModel> | $Enums.CostTypeEnum
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumExpirienceEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExpirienceEnum | EnumExpirienceEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ExpirienceEnum[] | ListEnumExpirienceEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExpirienceEnum[] | ListEnumExpirienceEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumExpirienceEnumWithAggregatesFilter<$PrismaModel> | $Enums.ExpirienceEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExpirienceEnumFilter<$PrismaModel>
    _max?: NestedEnumExpirienceEnumFilter<$PrismaModel>
  }

  export type NestedEnumCostTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CostTypeEnum | EnumCostTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CostTypeEnum[] | ListEnumCostTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.CostTypeEnum[] | ListEnumCostTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumCostTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.CostTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCostTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumCostTypeEnumFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumOrderStatusEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatusEnum | EnumOrderStatusEnumFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatusEnum[] | ListEnumOrderStatusEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatusEnum[] | ListEnumOrderStatusEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusEnumFilter<$PrismaModel> | $Enums.OrderStatusEnum
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatusEnum | EnumOrderStatusEnumFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatusEnum[] | ListEnumOrderStatusEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatusEnum[] | ListEnumOrderStatusEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusEnumWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatusEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusEnumFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusEnumFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ExecutorInfoCreateWithoutUserInput = {
    id?: string
    rating?: number | null
    ratingCount?: number
    description?: string | null
    classification?: string | null
    tags?: ExecutorInfoCreatetagsInput | string[]
    expirience?: $Enums.ExpirienceEnum
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    responses?: ResponseCreateNestedManyWithoutExecutorInput
    specializations?: SpecializationCreateNestedManyWithoutExecutorsInput
    activeOrders?: OrderCreateNestedManyWithoutExecutorInput
    doneOrders?: OrderCreateNestedManyWithoutDoneExecutorInput
  }

  export type ExecutorInfoUncheckedCreateWithoutUserInput = {
    id?: string
    rating?: number | null
    ratingCount?: number
    description?: string | null
    classification?: string | null
    tags?: ExecutorInfoCreatetagsInput | string[]
    expirience?: $Enums.ExpirienceEnum
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    responses?: ResponseUncheckedCreateNestedManyWithoutExecutorInput
    specializations?: SpecializationUncheckedCreateNestedManyWithoutExecutorsInput
    activeOrders?: OrderUncheckedCreateNestedManyWithoutExecutorInput
    doneOrders?: OrderUncheckedCreateNestedManyWithoutDoneExecutorInput
  }

  export type ExecutorInfoCreateOrConnectWithoutUserInput = {
    where: ExecutorInfoWhereUniqueInput
    create: XOR<ExecutorInfoCreateWithoutUserInput, ExecutorInfoUncheckedCreateWithoutUserInput>
  }

  export type CustomerInfoCreateWithoutUserInput = {
    id?: string
    rating?: number | null
    ratingCount?: number
    orders?: OrderCreateNestedManyWithoutCustomerInput
  }

  export type CustomerInfoUncheckedCreateWithoutUserInput = {
    id?: string
    rating?: number | null
    ratingCount?: number
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerInfoCreateOrConnectWithoutUserInput = {
    where: CustomerInfoWhereUniqueInput
    create: XOR<CustomerInfoCreateWithoutUserInput, CustomerInfoUncheckedCreateWithoutUserInput>
  }

  export type ContactCreateWithoutUserInput = {
    id?: string
    site?: string | null
    phone?: string | null
    mail?: string | null
    telegram?: string | null
  }

  export type ContactUncheckedCreateWithoutUserInput = {
    id?: string
    site?: string | null
    phone?: string | null
    mail?: string | null
    telegram?: string | null
  }

  export type ContactCreateOrConnectWithoutUserInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput>
  }

  export type TopUpBalanceCreateWithoutToUserInput = {
    id?: string
    createdAt?: Date | string
    sum: number
    reason: string
  }

  export type TopUpBalanceUncheckedCreateWithoutToUserInput = {
    id?: string
    createdAt?: Date | string
    sum: number
    reason: string
  }

  export type TopUpBalanceCreateOrConnectWithoutToUserInput = {
    where: TopUpBalanceWhereUniqueInput
    create: XOR<TopUpBalanceCreateWithoutToUserInput, TopUpBalanceUncheckedCreateWithoutToUserInput>
  }

  export type TopUpBalanceCreateManyToUserInputEnvelope = {
    data: TopUpBalanceCreateManyToUserInput | TopUpBalanceCreateManyToUserInput[]
    skipDuplicates?: boolean
  }

  export type DecreaseBalanceCreateWithoutFromUserInput = {
    id?: string
    createdAt?: Date | string
    sum: number
    reason: string
  }

  export type DecreaseBalanceUncheckedCreateWithoutFromUserInput = {
    id?: string
    createdAt?: Date | string
    sum: number
    reason: string
  }

  export type DecreaseBalanceCreateOrConnectWithoutFromUserInput = {
    where: DecreaseBalanceWhereUniqueInput
    create: XOR<DecreaseBalanceCreateWithoutFromUserInput, DecreaseBalanceUncheckedCreateWithoutFromUserInput>
  }

  export type DecreaseBalanceCreateManyFromUserInputEnvelope = {
    data: DecreaseBalanceCreateManyFromUserInput | DecreaseBalanceCreateManyFromUserInput[]
    skipDuplicates?: boolean
  }

  export type ExecutorInfoUpsertWithoutUserInput = {
    update: XOR<ExecutorInfoUpdateWithoutUserInput, ExecutorInfoUncheckedUpdateWithoutUserInput>
    create: XOR<ExecutorInfoCreateWithoutUserInput, ExecutorInfoUncheckedCreateWithoutUserInput>
    where?: ExecutorInfoWhereInput
  }

  export type ExecutorInfoUpdateToOneWithWhereWithoutUserInput = {
    where?: ExecutorInfoWhereInput
    data: XOR<ExecutorInfoUpdateWithoutUserInput, ExecutorInfoUncheckedUpdateWithoutUserInput>
  }

  export type ExecutorInfoUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    responses?: ResponseUpdateManyWithoutExecutorNestedInput
    specializations?: SpecializationUpdateManyWithoutExecutorsNestedInput
    activeOrders?: OrderUpdateManyWithoutExecutorNestedInput
    doneOrders?: OrderUpdateManyWithoutDoneExecutorNestedInput
  }

  export type ExecutorInfoUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    responses?: ResponseUncheckedUpdateManyWithoutExecutorNestedInput
    specializations?: SpecializationUncheckedUpdateManyWithoutExecutorsNestedInput
    activeOrders?: OrderUncheckedUpdateManyWithoutExecutorNestedInput
    doneOrders?: OrderUncheckedUpdateManyWithoutDoneExecutorNestedInput
  }

  export type CustomerInfoUpsertWithoutUserInput = {
    update: XOR<CustomerInfoUpdateWithoutUserInput, CustomerInfoUncheckedUpdateWithoutUserInput>
    create: XOR<CustomerInfoCreateWithoutUserInput, CustomerInfoUncheckedCreateWithoutUserInput>
    where?: CustomerInfoWhereInput
  }

  export type CustomerInfoUpdateToOneWithWhereWithoutUserInput = {
    where?: CustomerInfoWhereInput
    data: XOR<CustomerInfoUpdateWithoutUserInput, CustomerInfoUncheckedUpdateWithoutUserInput>
  }

  export type CustomerInfoUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    orders?: OrderUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerInfoUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type ContactUpsertWithoutUserInput = {
    update: XOR<ContactUpdateWithoutUserInput, ContactUncheckedUpdateWithoutUserInput>
    create: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput>
    where?: ContactWhereInput
  }

  export type ContactUpdateToOneWithWhereWithoutUserInput = {
    where?: ContactWhereInput
    data: XOR<ContactUpdateWithoutUserInput, ContactUncheckedUpdateWithoutUserInput>
  }

  export type ContactUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    site?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    telegram?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    site?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    mail?: NullableStringFieldUpdateOperationsInput | string | null
    telegram?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TopUpBalanceUpsertWithWhereUniqueWithoutToUserInput = {
    where: TopUpBalanceWhereUniqueInput
    update: XOR<TopUpBalanceUpdateWithoutToUserInput, TopUpBalanceUncheckedUpdateWithoutToUserInput>
    create: XOR<TopUpBalanceCreateWithoutToUserInput, TopUpBalanceUncheckedCreateWithoutToUserInput>
  }

  export type TopUpBalanceUpdateWithWhereUniqueWithoutToUserInput = {
    where: TopUpBalanceWhereUniqueInput
    data: XOR<TopUpBalanceUpdateWithoutToUserInput, TopUpBalanceUncheckedUpdateWithoutToUserInput>
  }

  export type TopUpBalanceUpdateManyWithWhereWithoutToUserInput = {
    where: TopUpBalanceScalarWhereInput
    data: XOR<TopUpBalanceUpdateManyMutationInput, TopUpBalanceUncheckedUpdateManyWithoutToUserInput>
  }

  export type TopUpBalanceScalarWhereInput = {
    AND?: TopUpBalanceScalarWhereInput | TopUpBalanceScalarWhereInput[]
    OR?: TopUpBalanceScalarWhereInput[]
    NOT?: TopUpBalanceScalarWhereInput | TopUpBalanceScalarWhereInput[]
    id?: StringFilter<"TopUpBalance"> | string
    createdAt?: DateTimeFilter<"TopUpBalance"> | Date | string
    sum?: FloatFilter<"TopUpBalance"> | number
    reason?: StringFilter<"TopUpBalance"> | string
    toUserId?: StringNullableFilter<"TopUpBalance"> | string | null
  }

  export type DecreaseBalanceUpsertWithWhereUniqueWithoutFromUserInput = {
    where: DecreaseBalanceWhereUniqueInput
    update: XOR<DecreaseBalanceUpdateWithoutFromUserInput, DecreaseBalanceUncheckedUpdateWithoutFromUserInput>
    create: XOR<DecreaseBalanceCreateWithoutFromUserInput, DecreaseBalanceUncheckedCreateWithoutFromUserInput>
  }

  export type DecreaseBalanceUpdateWithWhereUniqueWithoutFromUserInput = {
    where: DecreaseBalanceWhereUniqueInput
    data: XOR<DecreaseBalanceUpdateWithoutFromUserInput, DecreaseBalanceUncheckedUpdateWithoutFromUserInput>
  }

  export type DecreaseBalanceUpdateManyWithWhereWithoutFromUserInput = {
    where: DecreaseBalanceScalarWhereInput
    data: XOR<DecreaseBalanceUpdateManyMutationInput, DecreaseBalanceUncheckedUpdateManyWithoutFromUserInput>
  }

  export type DecreaseBalanceScalarWhereInput = {
    AND?: DecreaseBalanceScalarWhereInput | DecreaseBalanceScalarWhereInput[]
    OR?: DecreaseBalanceScalarWhereInput[]
    NOT?: DecreaseBalanceScalarWhereInput | DecreaseBalanceScalarWhereInput[]
    id?: StringFilter<"DecreaseBalance"> | string
    createdAt?: DateTimeFilter<"DecreaseBalance"> | Date | string
    sum?: FloatFilter<"DecreaseBalance"> | number
    reason?: StringFilter<"DecreaseBalance"> | string
    fromUserId?: StringNullableFilter<"DecreaseBalance"> | string | null
  }

  export type UserCreateWithoutExecutorInfoInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.UserRoleEnum
    name?: string | null
    family?: string | null
    dateOfBirth?: Date | string | null
    city?: string | null
    logo?: string | null
    balance?: number | null
    custoremInfo?: CustomerInfoCreateNestedOneWithoutUserInput
    contact?: ContactCreateNestedOneWithoutUserInput
    topUpBalance?: TopUpBalanceCreateNestedManyWithoutToUserInput
    decreaseBalance?: DecreaseBalanceCreateNestedManyWithoutFromUserInput
  }

  export type UserUncheckedCreateWithoutExecutorInfoInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.UserRoleEnum
    name?: string | null
    family?: string | null
    dateOfBirth?: Date | string | null
    city?: string | null
    logo?: string | null
    balance?: number | null
    custoremInfo?: CustomerInfoUncheckedCreateNestedOneWithoutUserInput
    contact?: ContactUncheckedCreateNestedOneWithoutUserInput
    topUpBalance?: TopUpBalanceUncheckedCreateNestedManyWithoutToUserInput
    decreaseBalance?: DecreaseBalanceUncheckedCreateNestedManyWithoutFromUserInput
  }

  export type UserCreateOrConnectWithoutExecutorInfoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExecutorInfoInput, UserUncheckedCreateWithoutExecutorInfoInput>
  }

  export type ResponseCreateWithoutExecutorInput = {
    id?: string
    createdAt?: Date | string
    comment: string
    order: OrderCreateNestedOneWithoutResponsesInput
  }

  export type ResponseUncheckedCreateWithoutExecutorInput = {
    id?: string
    createdAt?: Date | string
    orderId: string
    comment: string
  }

  export type ResponseCreateOrConnectWithoutExecutorInput = {
    where: ResponseWhereUniqueInput
    create: XOR<ResponseCreateWithoutExecutorInput, ResponseUncheckedCreateWithoutExecutorInput>
  }

  export type ResponseCreateManyExecutorInputEnvelope = {
    data: ResponseCreateManyExecutorInput | ResponseCreateManyExecutorInput[]
    skipDuplicates?: boolean
  }

  export type SpecializationCreateWithoutExecutorsInput = {
    id?: string
    title: string
    topLevelTitle: string
    orders?: OrderCreateNestedManyWithoutSpecializationInput
  }

  export type SpecializationUncheckedCreateWithoutExecutorsInput = {
    id?: string
    title: string
    topLevelTitle: string
    orders?: OrderUncheckedCreateNestedManyWithoutSpecializationInput
  }

  export type SpecializationCreateOrConnectWithoutExecutorsInput = {
    where: SpecializationWhereUniqueInput
    create: XOR<SpecializationCreateWithoutExecutorsInput, SpecializationUncheckedCreateWithoutExecutorsInput>
  }

  export type OrderCreateWithoutExecutorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    customer: CustomerInfoCreateNestedOneWithoutOrdersInput
    responses?: ResponseCreateNestedManyWithoutOrderInput
    specialization: SpecializationCreateNestedOneWithoutOrdersInput
    doneExecutor?: ExecutorInfoCreateNestedOneWithoutDoneOrdersInput
  }

  export type OrderUncheckedCreateWithoutExecutorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customerId: string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    specializationId: string
    doneExecutorId?: string | null
    responses?: ResponseUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutExecutorInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutExecutorInput, OrderUncheckedCreateWithoutExecutorInput>
  }

  export type OrderCreateManyExecutorInputEnvelope = {
    data: OrderCreateManyExecutorInput | OrderCreateManyExecutorInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutDoneExecutorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    customer: CustomerInfoCreateNestedOneWithoutOrdersInput
    responses?: ResponseCreateNestedManyWithoutOrderInput
    specialization: SpecializationCreateNestedOneWithoutOrdersInput
    executor?: ExecutorInfoCreateNestedOneWithoutActiveOrdersInput
  }

  export type OrderUncheckedCreateWithoutDoneExecutorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customerId: string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    specializationId: string
    executorId?: string | null
    responses?: ResponseUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutDoneExecutorInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutDoneExecutorInput, OrderUncheckedCreateWithoutDoneExecutorInput>
  }

  export type OrderCreateManyDoneExecutorInputEnvelope = {
    data: OrderCreateManyDoneExecutorInput | OrderCreateManyDoneExecutorInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutExecutorInfoInput = {
    update: XOR<UserUpdateWithoutExecutorInfoInput, UserUncheckedUpdateWithoutExecutorInfoInput>
    create: XOR<UserCreateWithoutExecutorInfoInput, UserUncheckedCreateWithoutExecutorInfoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutExecutorInfoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutExecutorInfoInput, UserUncheckedUpdateWithoutExecutorInfoInput>
  }

  export type UserUpdateWithoutExecutorInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    name?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    custoremInfo?: CustomerInfoUpdateOneWithoutUserNestedInput
    contact?: ContactUpdateOneWithoutUserNestedInput
    topUpBalance?: TopUpBalanceUpdateManyWithoutToUserNestedInput
    decreaseBalance?: DecreaseBalanceUpdateManyWithoutFromUserNestedInput
  }

  export type UserUncheckedUpdateWithoutExecutorInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    name?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    custoremInfo?: CustomerInfoUncheckedUpdateOneWithoutUserNestedInput
    contact?: ContactUncheckedUpdateOneWithoutUserNestedInput
    topUpBalance?: TopUpBalanceUncheckedUpdateManyWithoutToUserNestedInput
    decreaseBalance?: DecreaseBalanceUncheckedUpdateManyWithoutFromUserNestedInput
  }

  export type ResponseUpsertWithWhereUniqueWithoutExecutorInput = {
    where: ResponseWhereUniqueInput
    update: XOR<ResponseUpdateWithoutExecutorInput, ResponseUncheckedUpdateWithoutExecutorInput>
    create: XOR<ResponseCreateWithoutExecutorInput, ResponseUncheckedCreateWithoutExecutorInput>
  }

  export type ResponseUpdateWithWhereUniqueWithoutExecutorInput = {
    where: ResponseWhereUniqueInput
    data: XOR<ResponseUpdateWithoutExecutorInput, ResponseUncheckedUpdateWithoutExecutorInput>
  }

  export type ResponseUpdateManyWithWhereWithoutExecutorInput = {
    where: ResponseScalarWhereInput
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyWithoutExecutorInput>
  }

  export type ResponseScalarWhereInput = {
    AND?: ResponseScalarWhereInput | ResponseScalarWhereInput[]
    OR?: ResponseScalarWhereInput[]
    NOT?: ResponseScalarWhereInput | ResponseScalarWhereInput[]
    id?: StringFilter<"Response"> | string
    createdAt?: DateTimeFilter<"Response"> | Date | string
    orderId?: StringFilter<"Response"> | string
    executorId?: StringFilter<"Response"> | string
    comment?: StringFilter<"Response"> | string
  }

  export type SpecializationUpsertWithWhereUniqueWithoutExecutorsInput = {
    where: SpecializationWhereUniqueInput
    update: XOR<SpecializationUpdateWithoutExecutorsInput, SpecializationUncheckedUpdateWithoutExecutorsInput>
    create: XOR<SpecializationCreateWithoutExecutorsInput, SpecializationUncheckedCreateWithoutExecutorsInput>
  }

  export type SpecializationUpdateWithWhereUniqueWithoutExecutorsInput = {
    where: SpecializationWhereUniqueInput
    data: XOR<SpecializationUpdateWithoutExecutorsInput, SpecializationUncheckedUpdateWithoutExecutorsInput>
  }

  export type SpecializationUpdateManyWithWhereWithoutExecutorsInput = {
    where: SpecializationScalarWhereInput
    data: XOR<SpecializationUpdateManyMutationInput, SpecializationUncheckedUpdateManyWithoutExecutorsInput>
  }

  export type SpecializationScalarWhereInput = {
    AND?: SpecializationScalarWhereInput | SpecializationScalarWhereInput[]
    OR?: SpecializationScalarWhereInput[]
    NOT?: SpecializationScalarWhereInput | SpecializationScalarWhereInput[]
    id?: StringFilter<"Specialization"> | string
    title?: StringFilter<"Specialization"> | string
    topLevelTitle?: StringFilter<"Specialization"> | string
  }

  export type OrderUpsertWithWhereUniqueWithoutExecutorInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutExecutorInput, OrderUncheckedUpdateWithoutExecutorInput>
    create: XOR<OrderCreateWithoutExecutorInput, OrderUncheckedCreateWithoutExecutorInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutExecutorInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutExecutorInput, OrderUncheckedUpdateWithoutExecutorInput>
  }

  export type OrderUpdateManyWithWhereWithoutExecutorInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutExecutorInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: StringFilter<"Order"> | string
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    customerId?: StringFilter<"Order"> | string
    status?: EnumOrderStatusEnumFilter<"Order"> | $Enums.OrderStatusEnum
    title?: StringFilter<"Order"> | string
    description?: StringNullableFilter<"Order"> | string | null
    files?: StringNullableListFilter<"Order">
    tags?: StringNullableListFilter<"Order">
    views?: IntFilter<"Order"> | number
    costType?: EnumCostTypeEnumFilter<"Order"> | $Enums.CostTypeEnum
    cost?: FloatNullableFilter<"Order"> | number | null
    comment?: StringNullableFilter<"Order"> | string | null
    responsesCount?: IntFilter<"Order"> | number
    specializationId?: StringFilter<"Order"> | string
    executorId?: StringNullableFilter<"Order"> | string | null
    doneExecutorId?: StringNullableFilter<"Order"> | string | null
  }

  export type OrderUpsertWithWhereUniqueWithoutDoneExecutorInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutDoneExecutorInput, OrderUncheckedUpdateWithoutDoneExecutorInput>
    create: XOR<OrderCreateWithoutDoneExecutorInput, OrderUncheckedCreateWithoutDoneExecutorInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutDoneExecutorInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutDoneExecutorInput, OrderUncheckedUpdateWithoutDoneExecutorInput>
  }

  export type OrderUpdateManyWithWhereWithoutDoneExecutorInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutDoneExecutorInput>
  }

  export type UserCreateWithoutCustoremInfoInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.UserRoleEnum
    name?: string | null
    family?: string | null
    dateOfBirth?: Date | string | null
    city?: string | null
    logo?: string | null
    balance?: number | null
    executorInfo?: ExecutorInfoCreateNestedOneWithoutUserInput
    contact?: ContactCreateNestedOneWithoutUserInput
    topUpBalance?: TopUpBalanceCreateNestedManyWithoutToUserInput
    decreaseBalance?: DecreaseBalanceCreateNestedManyWithoutFromUserInput
  }

  export type UserUncheckedCreateWithoutCustoremInfoInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.UserRoleEnum
    name?: string | null
    family?: string | null
    dateOfBirth?: Date | string | null
    city?: string | null
    logo?: string | null
    balance?: number | null
    executorInfo?: ExecutorInfoUncheckedCreateNestedOneWithoutUserInput
    contact?: ContactUncheckedCreateNestedOneWithoutUserInput
    topUpBalance?: TopUpBalanceUncheckedCreateNestedManyWithoutToUserInput
    decreaseBalance?: DecreaseBalanceUncheckedCreateNestedManyWithoutFromUserInput
  }

  export type UserCreateOrConnectWithoutCustoremInfoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCustoremInfoInput, UserUncheckedCreateWithoutCustoremInfoInput>
  }

  export type OrderCreateWithoutCustomerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    responses?: ResponseCreateNestedManyWithoutOrderInput
    specialization: SpecializationCreateNestedOneWithoutOrdersInput
    executor?: ExecutorInfoCreateNestedOneWithoutActiveOrdersInput
    doneExecutor?: ExecutorInfoCreateNestedOneWithoutDoneOrdersInput
  }

  export type OrderUncheckedCreateWithoutCustomerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    specializationId: string
    executorId?: string | null
    doneExecutorId?: string | null
    responses?: ResponseUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutCustomerInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput>
  }

  export type OrderCreateManyCustomerInputEnvelope = {
    data: OrderCreateManyCustomerInput | OrderCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCustoremInfoInput = {
    update: XOR<UserUpdateWithoutCustoremInfoInput, UserUncheckedUpdateWithoutCustoremInfoInput>
    create: XOR<UserCreateWithoutCustoremInfoInput, UserUncheckedCreateWithoutCustoremInfoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCustoremInfoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCustoremInfoInput, UserUncheckedUpdateWithoutCustoremInfoInput>
  }

  export type UserUpdateWithoutCustoremInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    name?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    executorInfo?: ExecutorInfoUpdateOneWithoutUserNestedInput
    contact?: ContactUpdateOneWithoutUserNestedInput
    topUpBalance?: TopUpBalanceUpdateManyWithoutToUserNestedInput
    decreaseBalance?: DecreaseBalanceUpdateManyWithoutFromUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCustoremInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    name?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    executorInfo?: ExecutorInfoUncheckedUpdateOneWithoutUserNestedInput
    contact?: ContactUncheckedUpdateOneWithoutUserNestedInput
    topUpBalance?: TopUpBalanceUncheckedUpdateManyWithoutToUserNestedInput
    decreaseBalance?: DecreaseBalanceUncheckedUpdateManyWithoutFromUserNestedInput
  }

  export type OrderUpsertWithWhereUniqueWithoutCustomerInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutCustomerInput, OrderUncheckedUpdateWithoutCustomerInput>
    create: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutCustomerInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutCustomerInput, OrderUncheckedUpdateWithoutCustomerInput>
  }

  export type OrderUpdateManyWithWhereWithoutCustomerInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerInfoCreateWithoutOrdersInput = {
    id?: string
    rating?: number | null
    ratingCount?: number
    user: UserCreateNestedOneWithoutCustoremInfoInput
  }

  export type CustomerInfoUncheckedCreateWithoutOrdersInput = {
    id?: string
    userId: string
    rating?: number | null
    ratingCount?: number
  }

  export type CustomerInfoCreateOrConnectWithoutOrdersInput = {
    where: CustomerInfoWhereUniqueInput
    create: XOR<CustomerInfoCreateWithoutOrdersInput, CustomerInfoUncheckedCreateWithoutOrdersInput>
  }

  export type ResponseCreateWithoutOrderInput = {
    id?: string
    createdAt?: Date | string
    comment: string
    executor: ExecutorInfoCreateNestedOneWithoutResponsesInput
  }

  export type ResponseUncheckedCreateWithoutOrderInput = {
    id?: string
    createdAt?: Date | string
    executorId: string
    comment: string
  }

  export type ResponseCreateOrConnectWithoutOrderInput = {
    where: ResponseWhereUniqueInput
    create: XOR<ResponseCreateWithoutOrderInput, ResponseUncheckedCreateWithoutOrderInput>
  }

  export type ResponseCreateManyOrderInputEnvelope = {
    data: ResponseCreateManyOrderInput | ResponseCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type SpecializationCreateWithoutOrdersInput = {
    id?: string
    title: string
    topLevelTitle: string
    executors?: ExecutorInfoCreateNestedManyWithoutSpecializationsInput
  }

  export type SpecializationUncheckedCreateWithoutOrdersInput = {
    id?: string
    title: string
    topLevelTitle: string
    executors?: ExecutorInfoUncheckedCreateNestedManyWithoutSpecializationsInput
  }

  export type SpecializationCreateOrConnectWithoutOrdersInput = {
    where: SpecializationWhereUniqueInput
    create: XOR<SpecializationCreateWithoutOrdersInput, SpecializationUncheckedCreateWithoutOrdersInput>
  }

  export type ExecutorInfoCreateWithoutActiveOrdersInput = {
    id?: string
    rating?: number | null
    ratingCount?: number
    description?: string | null
    classification?: string | null
    tags?: ExecutorInfoCreatetagsInput | string[]
    expirience?: $Enums.ExpirienceEnum
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    user: UserCreateNestedOneWithoutExecutorInfoInput
    responses?: ResponseCreateNestedManyWithoutExecutorInput
    specializations?: SpecializationCreateNestedManyWithoutExecutorsInput
    doneOrders?: OrderCreateNestedManyWithoutDoneExecutorInput
  }

  export type ExecutorInfoUncheckedCreateWithoutActiveOrdersInput = {
    id?: string
    userId: string
    rating?: number | null
    ratingCount?: number
    description?: string | null
    classification?: string | null
    tags?: ExecutorInfoCreatetagsInput | string[]
    expirience?: $Enums.ExpirienceEnum
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    responses?: ResponseUncheckedCreateNestedManyWithoutExecutorInput
    specializations?: SpecializationUncheckedCreateNestedManyWithoutExecutorsInput
    doneOrders?: OrderUncheckedCreateNestedManyWithoutDoneExecutorInput
  }

  export type ExecutorInfoCreateOrConnectWithoutActiveOrdersInput = {
    where: ExecutorInfoWhereUniqueInput
    create: XOR<ExecutorInfoCreateWithoutActiveOrdersInput, ExecutorInfoUncheckedCreateWithoutActiveOrdersInput>
  }

  export type ExecutorInfoCreateWithoutDoneOrdersInput = {
    id?: string
    rating?: number | null
    ratingCount?: number
    description?: string | null
    classification?: string | null
    tags?: ExecutorInfoCreatetagsInput | string[]
    expirience?: $Enums.ExpirienceEnum
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    user: UserCreateNestedOneWithoutExecutorInfoInput
    responses?: ResponseCreateNestedManyWithoutExecutorInput
    specializations?: SpecializationCreateNestedManyWithoutExecutorsInput
    activeOrders?: OrderCreateNestedManyWithoutExecutorInput
  }

  export type ExecutorInfoUncheckedCreateWithoutDoneOrdersInput = {
    id?: string
    userId: string
    rating?: number | null
    ratingCount?: number
    description?: string | null
    classification?: string | null
    tags?: ExecutorInfoCreatetagsInput | string[]
    expirience?: $Enums.ExpirienceEnum
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    responses?: ResponseUncheckedCreateNestedManyWithoutExecutorInput
    specializations?: SpecializationUncheckedCreateNestedManyWithoutExecutorsInput
    activeOrders?: OrderUncheckedCreateNestedManyWithoutExecutorInput
  }

  export type ExecutorInfoCreateOrConnectWithoutDoneOrdersInput = {
    where: ExecutorInfoWhereUniqueInput
    create: XOR<ExecutorInfoCreateWithoutDoneOrdersInput, ExecutorInfoUncheckedCreateWithoutDoneOrdersInput>
  }

  export type CustomerInfoUpsertWithoutOrdersInput = {
    update: XOR<CustomerInfoUpdateWithoutOrdersInput, CustomerInfoUncheckedUpdateWithoutOrdersInput>
    create: XOR<CustomerInfoCreateWithoutOrdersInput, CustomerInfoUncheckedCreateWithoutOrdersInput>
    where?: CustomerInfoWhereInput
  }

  export type CustomerInfoUpdateToOneWithWhereWithoutOrdersInput = {
    where?: CustomerInfoWhereInput
    data: XOR<CustomerInfoUpdateWithoutOrdersInput, CustomerInfoUncheckedUpdateWithoutOrdersInput>
  }

  export type CustomerInfoUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutCustoremInfoNestedInput
  }

  export type CustomerInfoUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
  }

  export type ResponseUpsertWithWhereUniqueWithoutOrderInput = {
    where: ResponseWhereUniqueInput
    update: XOR<ResponseUpdateWithoutOrderInput, ResponseUncheckedUpdateWithoutOrderInput>
    create: XOR<ResponseCreateWithoutOrderInput, ResponseUncheckedCreateWithoutOrderInput>
  }

  export type ResponseUpdateWithWhereUniqueWithoutOrderInput = {
    where: ResponseWhereUniqueInput
    data: XOR<ResponseUpdateWithoutOrderInput, ResponseUncheckedUpdateWithoutOrderInput>
  }

  export type ResponseUpdateManyWithWhereWithoutOrderInput = {
    where: ResponseScalarWhereInput
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyWithoutOrderInput>
  }

  export type SpecializationUpsertWithoutOrdersInput = {
    update: XOR<SpecializationUpdateWithoutOrdersInput, SpecializationUncheckedUpdateWithoutOrdersInput>
    create: XOR<SpecializationCreateWithoutOrdersInput, SpecializationUncheckedCreateWithoutOrdersInput>
    where?: SpecializationWhereInput
  }

  export type SpecializationUpdateToOneWithWhereWithoutOrdersInput = {
    where?: SpecializationWhereInput
    data: XOR<SpecializationUpdateWithoutOrdersInput, SpecializationUncheckedUpdateWithoutOrdersInput>
  }

  export type SpecializationUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topLevelTitle?: StringFieldUpdateOperationsInput | string
    executors?: ExecutorInfoUpdateManyWithoutSpecializationsNestedInput
  }

  export type SpecializationUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topLevelTitle?: StringFieldUpdateOperationsInput | string
    executors?: ExecutorInfoUncheckedUpdateManyWithoutSpecializationsNestedInput
  }

  export type ExecutorInfoUpsertWithoutActiveOrdersInput = {
    update: XOR<ExecutorInfoUpdateWithoutActiveOrdersInput, ExecutorInfoUncheckedUpdateWithoutActiveOrdersInput>
    create: XOR<ExecutorInfoCreateWithoutActiveOrdersInput, ExecutorInfoUncheckedCreateWithoutActiveOrdersInput>
    where?: ExecutorInfoWhereInput
  }

  export type ExecutorInfoUpdateToOneWithWhereWithoutActiveOrdersInput = {
    where?: ExecutorInfoWhereInput
    data: XOR<ExecutorInfoUpdateWithoutActiveOrdersInput, ExecutorInfoUncheckedUpdateWithoutActiveOrdersInput>
  }

  export type ExecutorInfoUpdateWithoutActiveOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutExecutorInfoNestedInput
    responses?: ResponseUpdateManyWithoutExecutorNestedInput
    specializations?: SpecializationUpdateManyWithoutExecutorsNestedInput
    doneOrders?: OrderUpdateManyWithoutDoneExecutorNestedInput
  }

  export type ExecutorInfoUncheckedUpdateWithoutActiveOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    responses?: ResponseUncheckedUpdateManyWithoutExecutorNestedInput
    specializations?: SpecializationUncheckedUpdateManyWithoutExecutorsNestedInput
    doneOrders?: OrderUncheckedUpdateManyWithoutDoneExecutorNestedInput
  }

  export type ExecutorInfoUpsertWithoutDoneOrdersInput = {
    update: XOR<ExecutorInfoUpdateWithoutDoneOrdersInput, ExecutorInfoUncheckedUpdateWithoutDoneOrdersInput>
    create: XOR<ExecutorInfoCreateWithoutDoneOrdersInput, ExecutorInfoUncheckedCreateWithoutDoneOrdersInput>
    where?: ExecutorInfoWhereInput
  }

  export type ExecutorInfoUpdateToOneWithWhereWithoutDoneOrdersInput = {
    where?: ExecutorInfoWhereInput
    data: XOR<ExecutorInfoUpdateWithoutDoneOrdersInput, ExecutorInfoUncheckedUpdateWithoutDoneOrdersInput>
  }

  export type ExecutorInfoUpdateWithoutDoneOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutExecutorInfoNestedInput
    responses?: ResponseUpdateManyWithoutExecutorNestedInput
    specializations?: SpecializationUpdateManyWithoutExecutorsNestedInput
    activeOrders?: OrderUpdateManyWithoutExecutorNestedInput
  }

  export type ExecutorInfoUncheckedUpdateWithoutDoneOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    responses?: ResponseUncheckedUpdateManyWithoutExecutorNestedInput
    specializations?: SpecializationUncheckedUpdateManyWithoutExecutorsNestedInput
    activeOrders?: OrderUncheckedUpdateManyWithoutExecutorNestedInput
  }

  export type OrderCreateWithoutResponsesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    customer: CustomerInfoCreateNestedOneWithoutOrdersInput
    specialization: SpecializationCreateNestedOneWithoutOrdersInput
    executor?: ExecutorInfoCreateNestedOneWithoutActiveOrdersInput
    doneExecutor?: ExecutorInfoCreateNestedOneWithoutDoneOrdersInput
  }

  export type OrderUncheckedCreateWithoutResponsesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customerId: string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    specializationId: string
    executorId?: string | null
    doneExecutorId?: string | null
  }

  export type OrderCreateOrConnectWithoutResponsesInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutResponsesInput, OrderUncheckedCreateWithoutResponsesInput>
  }

  export type ExecutorInfoCreateWithoutResponsesInput = {
    id?: string
    rating?: number | null
    ratingCount?: number
    description?: string | null
    classification?: string | null
    tags?: ExecutorInfoCreatetagsInput | string[]
    expirience?: $Enums.ExpirienceEnum
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    user: UserCreateNestedOneWithoutExecutorInfoInput
    specializations?: SpecializationCreateNestedManyWithoutExecutorsInput
    activeOrders?: OrderCreateNestedManyWithoutExecutorInput
    doneOrders?: OrderCreateNestedManyWithoutDoneExecutorInput
  }

  export type ExecutorInfoUncheckedCreateWithoutResponsesInput = {
    id?: string
    userId: string
    rating?: number | null
    ratingCount?: number
    description?: string | null
    classification?: string | null
    tags?: ExecutorInfoCreatetagsInput | string[]
    expirience?: $Enums.ExpirienceEnum
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    specializations?: SpecializationUncheckedCreateNestedManyWithoutExecutorsInput
    activeOrders?: OrderUncheckedCreateNestedManyWithoutExecutorInput
    doneOrders?: OrderUncheckedCreateNestedManyWithoutDoneExecutorInput
  }

  export type ExecutorInfoCreateOrConnectWithoutResponsesInput = {
    where: ExecutorInfoWhereUniqueInput
    create: XOR<ExecutorInfoCreateWithoutResponsesInput, ExecutorInfoUncheckedCreateWithoutResponsesInput>
  }

  export type OrderUpsertWithoutResponsesInput = {
    update: XOR<OrderUpdateWithoutResponsesInput, OrderUncheckedUpdateWithoutResponsesInput>
    create: XOR<OrderCreateWithoutResponsesInput, OrderUncheckedCreateWithoutResponsesInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutResponsesInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutResponsesInput, OrderUncheckedUpdateWithoutResponsesInput>
  }

  export type OrderUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    customer?: CustomerInfoUpdateOneRequiredWithoutOrdersNestedInput
    specialization?: SpecializationUpdateOneRequiredWithoutOrdersNestedInput
    executor?: ExecutorInfoUpdateOneWithoutActiveOrdersNestedInput
    doneExecutor?: ExecutorInfoUpdateOneWithoutDoneOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    specializationId?: StringFieldUpdateOperationsInput | string
    executorId?: NullableStringFieldUpdateOperationsInput | string | null
    doneExecutorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExecutorInfoUpsertWithoutResponsesInput = {
    update: XOR<ExecutorInfoUpdateWithoutResponsesInput, ExecutorInfoUncheckedUpdateWithoutResponsesInput>
    create: XOR<ExecutorInfoCreateWithoutResponsesInput, ExecutorInfoUncheckedCreateWithoutResponsesInput>
    where?: ExecutorInfoWhereInput
  }

  export type ExecutorInfoUpdateToOneWithWhereWithoutResponsesInput = {
    where?: ExecutorInfoWhereInput
    data: XOR<ExecutorInfoUpdateWithoutResponsesInput, ExecutorInfoUncheckedUpdateWithoutResponsesInput>
  }

  export type ExecutorInfoUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutExecutorInfoNestedInput
    specializations?: SpecializationUpdateManyWithoutExecutorsNestedInput
    activeOrders?: OrderUpdateManyWithoutExecutorNestedInput
    doneOrders?: OrderUpdateManyWithoutDoneExecutorNestedInput
  }

  export type ExecutorInfoUncheckedUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    specializations?: SpecializationUncheckedUpdateManyWithoutExecutorsNestedInput
    activeOrders?: OrderUncheckedUpdateManyWithoutExecutorNestedInput
    doneOrders?: OrderUncheckedUpdateManyWithoutDoneExecutorNestedInput
  }

  export type OrderCreateWithoutSpecializationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    customer: CustomerInfoCreateNestedOneWithoutOrdersInput
    responses?: ResponseCreateNestedManyWithoutOrderInput
    executor?: ExecutorInfoCreateNestedOneWithoutActiveOrdersInput
    doneExecutor?: ExecutorInfoCreateNestedOneWithoutDoneOrdersInput
  }

  export type OrderUncheckedCreateWithoutSpecializationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customerId: string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    executorId?: string | null
    doneExecutorId?: string | null
    responses?: ResponseUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutSpecializationInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutSpecializationInput, OrderUncheckedCreateWithoutSpecializationInput>
  }

  export type OrderCreateManySpecializationInputEnvelope = {
    data: OrderCreateManySpecializationInput | OrderCreateManySpecializationInput[]
    skipDuplicates?: boolean
  }

  export type ExecutorInfoCreateWithoutSpecializationsInput = {
    id?: string
    rating?: number | null
    ratingCount?: number
    description?: string | null
    classification?: string | null
    tags?: ExecutorInfoCreatetagsInput | string[]
    expirience?: $Enums.ExpirienceEnum
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    user: UserCreateNestedOneWithoutExecutorInfoInput
    responses?: ResponseCreateNestedManyWithoutExecutorInput
    activeOrders?: OrderCreateNestedManyWithoutExecutorInput
    doneOrders?: OrderCreateNestedManyWithoutDoneExecutorInput
  }

  export type ExecutorInfoUncheckedCreateWithoutSpecializationsInput = {
    id?: string
    userId: string
    rating?: number | null
    ratingCount?: number
    description?: string | null
    classification?: string | null
    tags?: ExecutorInfoCreatetagsInput | string[]
    expirience?: $Enums.ExpirienceEnum
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    responses?: ResponseUncheckedCreateNestedManyWithoutExecutorInput
    activeOrders?: OrderUncheckedCreateNestedManyWithoutExecutorInput
    doneOrders?: OrderUncheckedCreateNestedManyWithoutDoneExecutorInput
  }

  export type ExecutorInfoCreateOrConnectWithoutSpecializationsInput = {
    where: ExecutorInfoWhereUniqueInput
    create: XOR<ExecutorInfoCreateWithoutSpecializationsInput, ExecutorInfoUncheckedCreateWithoutSpecializationsInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutSpecializationInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutSpecializationInput, OrderUncheckedUpdateWithoutSpecializationInput>
    create: XOR<OrderCreateWithoutSpecializationInput, OrderUncheckedCreateWithoutSpecializationInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutSpecializationInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutSpecializationInput, OrderUncheckedUpdateWithoutSpecializationInput>
  }

  export type OrderUpdateManyWithWhereWithoutSpecializationInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutSpecializationInput>
  }

  export type ExecutorInfoUpsertWithWhereUniqueWithoutSpecializationsInput = {
    where: ExecutorInfoWhereUniqueInput
    update: XOR<ExecutorInfoUpdateWithoutSpecializationsInput, ExecutorInfoUncheckedUpdateWithoutSpecializationsInput>
    create: XOR<ExecutorInfoCreateWithoutSpecializationsInput, ExecutorInfoUncheckedCreateWithoutSpecializationsInput>
  }

  export type ExecutorInfoUpdateWithWhereUniqueWithoutSpecializationsInput = {
    where: ExecutorInfoWhereUniqueInput
    data: XOR<ExecutorInfoUpdateWithoutSpecializationsInput, ExecutorInfoUncheckedUpdateWithoutSpecializationsInput>
  }

  export type ExecutorInfoUpdateManyWithWhereWithoutSpecializationsInput = {
    where: ExecutorInfoScalarWhereInput
    data: XOR<ExecutorInfoUpdateManyMutationInput, ExecutorInfoUncheckedUpdateManyWithoutSpecializationsInput>
  }

  export type ExecutorInfoScalarWhereInput = {
    AND?: ExecutorInfoScalarWhereInput | ExecutorInfoScalarWhereInput[]
    OR?: ExecutorInfoScalarWhereInput[]
    NOT?: ExecutorInfoScalarWhereInput | ExecutorInfoScalarWhereInput[]
    id?: StringFilter<"ExecutorInfo"> | string
    userId?: StringFilter<"ExecutorInfo"> | string
    rating?: FloatNullableFilter<"ExecutorInfo"> | number | null
    ratingCount?: IntFilter<"ExecutorInfo"> | number
    description?: StringNullableFilter<"ExecutorInfo"> | string | null
    classification?: StringNullableFilter<"ExecutorInfo"> | string | null
    tags?: StringNullableListFilter<"ExecutorInfo">
    expirience?: EnumExpirienceEnumFilter<"ExecutorInfo"> | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFilter<"ExecutorInfo"> | $Enums.CostTypeEnum
    cost?: FloatNullableFilter<"ExecutorInfo"> | number | null
  }

  export type UserCreateWithoutContactInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.UserRoleEnum
    name?: string | null
    family?: string | null
    dateOfBirth?: Date | string | null
    city?: string | null
    logo?: string | null
    balance?: number | null
    executorInfo?: ExecutorInfoCreateNestedOneWithoutUserInput
    custoremInfo?: CustomerInfoCreateNestedOneWithoutUserInput
    topUpBalance?: TopUpBalanceCreateNestedManyWithoutToUserInput
    decreaseBalance?: DecreaseBalanceCreateNestedManyWithoutFromUserInput
  }

  export type UserUncheckedCreateWithoutContactInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.UserRoleEnum
    name?: string | null
    family?: string | null
    dateOfBirth?: Date | string | null
    city?: string | null
    logo?: string | null
    balance?: number | null
    executorInfo?: ExecutorInfoUncheckedCreateNestedOneWithoutUserInput
    custoremInfo?: CustomerInfoUncheckedCreateNestedOneWithoutUserInput
    topUpBalance?: TopUpBalanceUncheckedCreateNestedManyWithoutToUserInput
    decreaseBalance?: DecreaseBalanceUncheckedCreateNestedManyWithoutFromUserInput
  }

  export type UserCreateOrConnectWithoutContactInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContactInput, UserUncheckedCreateWithoutContactInput>
  }

  export type UserUpsertWithoutContactInput = {
    update: XOR<UserUpdateWithoutContactInput, UserUncheckedUpdateWithoutContactInput>
    create: XOR<UserCreateWithoutContactInput, UserUncheckedCreateWithoutContactInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContactInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContactInput, UserUncheckedUpdateWithoutContactInput>
  }

  export type UserUpdateWithoutContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    name?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    executorInfo?: ExecutorInfoUpdateOneWithoutUserNestedInput
    custoremInfo?: CustomerInfoUpdateOneWithoutUserNestedInput
    topUpBalance?: TopUpBalanceUpdateManyWithoutToUserNestedInput
    decreaseBalance?: DecreaseBalanceUpdateManyWithoutFromUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    name?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    executorInfo?: ExecutorInfoUncheckedUpdateOneWithoutUserNestedInput
    custoremInfo?: CustomerInfoUncheckedUpdateOneWithoutUserNestedInput
    topUpBalance?: TopUpBalanceUncheckedUpdateManyWithoutToUserNestedInput
    decreaseBalance?: DecreaseBalanceUncheckedUpdateManyWithoutFromUserNestedInput
  }

  export type UserCreateWithoutTopUpBalanceInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.UserRoleEnum
    name?: string | null
    family?: string | null
    dateOfBirth?: Date | string | null
    city?: string | null
    logo?: string | null
    balance?: number | null
    executorInfo?: ExecutorInfoCreateNestedOneWithoutUserInput
    custoremInfo?: CustomerInfoCreateNestedOneWithoutUserInput
    contact?: ContactCreateNestedOneWithoutUserInput
    decreaseBalance?: DecreaseBalanceCreateNestedManyWithoutFromUserInput
  }

  export type UserUncheckedCreateWithoutTopUpBalanceInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.UserRoleEnum
    name?: string | null
    family?: string | null
    dateOfBirth?: Date | string | null
    city?: string | null
    logo?: string | null
    balance?: number | null
    executorInfo?: ExecutorInfoUncheckedCreateNestedOneWithoutUserInput
    custoremInfo?: CustomerInfoUncheckedCreateNestedOneWithoutUserInput
    contact?: ContactUncheckedCreateNestedOneWithoutUserInput
    decreaseBalance?: DecreaseBalanceUncheckedCreateNestedManyWithoutFromUserInput
  }

  export type UserCreateOrConnectWithoutTopUpBalanceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTopUpBalanceInput, UserUncheckedCreateWithoutTopUpBalanceInput>
  }

  export type UserUpsertWithoutTopUpBalanceInput = {
    update: XOR<UserUpdateWithoutTopUpBalanceInput, UserUncheckedUpdateWithoutTopUpBalanceInput>
    create: XOR<UserCreateWithoutTopUpBalanceInput, UserUncheckedCreateWithoutTopUpBalanceInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTopUpBalanceInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTopUpBalanceInput, UserUncheckedUpdateWithoutTopUpBalanceInput>
  }

  export type UserUpdateWithoutTopUpBalanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    name?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    executorInfo?: ExecutorInfoUpdateOneWithoutUserNestedInput
    custoremInfo?: CustomerInfoUpdateOneWithoutUserNestedInput
    contact?: ContactUpdateOneWithoutUserNestedInput
    decreaseBalance?: DecreaseBalanceUpdateManyWithoutFromUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTopUpBalanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    name?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    executorInfo?: ExecutorInfoUncheckedUpdateOneWithoutUserNestedInput
    custoremInfo?: CustomerInfoUncheckedUpdateOneWithoutUserNestedInput
    contact?: ContactUncheckedUpdateOneWithoutUserNestedInput
    decreaseBalance?: DecreaseBalanceUncheckedUpdateManyWithoutFromUserNestedInput
  }

  export type UserCreateWithoutDecreaseBalanceInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.UserRoleEnum
    name?: string | null
    family?: string | null
    dateOfBirth?: Date | string | null
    city?: string | null
    logo?: string | null
    balance?: number | null
    executorInfo?: ExecutorInfoCreateNestedOneWithoutUserInput
    custoremInfo?: CustomerInfoCreateNestedOneWithoutUserInput
    contact?: ContactCreateNestedOneWithoutUserInput
    topUpBalance?: TopUpBalanceCreateNestedManyWithoutToUserInput
  }

  export type UserUncheckedCreateWithoutDecreaseBalanceInput = {
    id?: string
    email: string
    passwordHash: string
    role?: $Enums.UserRoleEnum
    name?: string | null
    family?: string | null
    dateOfBirth?: Date | string | null
    city?: string | null
    logo?: string | null
    balance?: number | null
    executorInfo?: ExecutorInfoUncheckedCreateNestedOneWithoutUserInput
    custoremInfo?: CustomerInfoUncheckedCreateNestedOneWithoutUserInput
    contact?: ContactUncheckedCreateNestedOneWithoutUserInput
    topUpBalance?: TopUpBalanceUncheckedCreateNestedManyWithoutToUserInput
  }

  export type UserCreateOrConnectWithoutDecreaseBalanceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDecreaseBalanceInput, UserUncheckedCreateWithoutDecreaseBalanceInput>
  }

  export type UserUpsertWithoutDecreaseBalanceInput = {
    update: XOR<UserUpdateWithoutDecreaseBalanceInput, UserUncheckedUpdateWithoutDecreaseBalanceInput>
    create: XOR<UserCreateWithoutDecreaseBalanceInput, UserUncheckedCreateWithoutDecreaseBalanceInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDecreaseBalanceInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDecreaseBalanceInput, UserUncheckedUpdateWithoutDecreaseBalanceInput>
  }

  export type UserUpdateWithoutDecreaseBalanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    name?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    executorInfo?: ExecutorInfoUpdateOneWithoutUserNestedInput
    custoremInfo?: CustomerInfoUpdateOneWithoutUserNestedInput
    contact?: ContactUpdateOneWithoutUserNestedInput
    topUpBalance?: TopUpBalanceUpdateManyWithoutToUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDecreaseBalanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    name?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableFloatFieldUpdateOperationsInput | number | null
    executorInfo?: ExecutorInfoUncheckedUpdateOneWithoutUserNestedInput
    custoremInfo?: CustomerInfoUncheckedUpdateOneWithoutUserNestedInput
    contact?: ContactUncheckedUpdateOneWithoutUserNestedInput
    topUpBalance?: TopUpBalanceUncheckedUpdateManyWithoutToUserNestedInput
  }

  export type TopUpBalanceCreateManyToUserInput = {
    id?: string
    createdAt?: Date | string
    sum: number
    reason: string
  }

  export type DecreaseBalanceCreateManyFromUserInput = {
    id?: string
    createdAt?: Date | string
    sum: number
    reason: string
  }

  export type TopUpBalanceUpdateWithoutToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sum?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type TopUpBalanceUncheckedUpdateWithoutToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sum?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type TopUpBalanceUncheckedUpdateManyWithoutToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sum?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type DecreaseBalanceUpdateWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sum?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type DecreaseBalanceUncheckedUpdateWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sum?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type DecreaseBalanceUncheckedUpdateManyWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sum?: FloatFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ResponseCreateManyExecutorInput = {
    id?: string
    createdAt?: Date | string
    orderId: string
    comment: string
  }

  export type OrderCreateManyExecutorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customerId: string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    specializationId: string
    doneExecutorId?: string | null
  }

  export type OrderCreateManyDoneExecutorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customerId: string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    specializationId: string
    executorId?: string | null
  }

  export type ResponseUpdateWithoutExecutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    order?: OrderUpdateOneRequiredWithoutResponsesNestedInput
  }

  export type ResponseUncheckedUpdateWithoutExecutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type ResponseUncheckedUpdateManyWithoutExecutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type SpecializationUpdateWithoutExecutorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topLevelTitle?: StringFieldUpdateOperationsInput | string
    orders?: OrderUpdateManyWithoutSpecializationNestedInput
  }

  export type SpecializationUncheckedUpdateWithoutExecutorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topLevelTitle?: StringFieldUpdateOperationsInput | string
    orders?: OrderUncheckedUpdateManyWithoutSpecializationNestedInput
  }

  export type SpecializationUncheckedUpdateManyWithoutExecutorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topLevelTitle?: StringFieldUpdateOperationsInput | string
  }

  export type OrderUpdateWithoutExecutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    customer?: CustomerInfoUpdateOneRequiredWithoutOrdersNestedInput
    responses?: ResponseUpdateManyWithoutOrderNestedInput
    specialization?: SpecializationUpdateOneRequiredWithoutOrdersNestedInput
    doneExecutor?: ExecutorInfoUpdateOneWithoutDoneOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutExecutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    specializationId?: StringFieldUpdateOperationsInput | string
    doneExecutorId?: NullableStringFieldUpdateOperationsInput | string | null
    responses?: ResponseUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutExecutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    specializationId?: StringFieldUpdateOperationsInput | string
    doneExecutorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderUpdateWithoutDoneExecutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    customer?: CustomerInfoUpdateOneRequiredWithoutOrdersNestedInput
    responses?: ResponseUpdateManyWithoutOrderNestedInput
    specialization?: SpecializationUpdateOneRequiredWithoutOrdersNestedInput
    executor?: ExecutorInfoUpdateOneWithoutActiveOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutDoneExecutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    specializationId?: StringFieldUpdateOperationsInput | string
    executorId?: NullableStringFieldUpdateOperationsInput | string | null
    responses?: ResponseUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutDoneExecutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    specializationId?: StringFieldUpdateOperationsInput | string
    executorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderCreateManyCustomerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    specializationId: string
    executorId?: string | null
    doneExecutorId?: string | null
  }

  export type OrderUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    responses?: ResponseUpdateManyWithoutOrderNestedInput
    specialization?: SpecializationUpdateOneRequiredWithoutOrdersNestedInput
    executor?: ExecutorInfoUpdateOneWithoutActiveOrdersNestedInput
    doneExecutor?: ExecutorInfoUpdateOneWithoutDoneOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    specializationId?: StringFieldUpdateOperationsInput | string
    executorId?: NullableStringFieldUpdateOperationsInput | string | null
    doneExecutorId?: NullableStringFieldUpdateOperationsInput | string | null
    responses?: ResponseUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    specializationId?: StringFieldUpdateOperationsInput | string
    executorId?: NullableStringFieldUpdateOperationsInput | string | null
    doneExecutorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResponseCreateManyOrderInput = {
    id?: string
    createdAt?: Date | string
    executorId: string
    comment: string
  }

  export type ResponseUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    executor?: ExecutorInfoUpdateOneRequiredWithoutResponsesNestedInput
  }

  export type ResponseUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executorId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type ResponseUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executorId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateManySpecializationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customerId: string
    status?: $Enums.OrderStatusEnum
    title: string
    description?: string | null
    files?: OrderCreatefilesInput | string[]
    tags?: OrderCreatetagsInput | string[]
    views?: number
    costType?: $Enums.CostTypeEnum
    cost?: number | null
    comment?: string | null
    responsesCount?: number
    executorId?: string | null
    doneExecutorId?: string | null
  }

  export type OrderUpdateWithoutSpecializationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    customer?: CustomerInfoUpdateOneRequiredWithoutOrdersNestedInput
    responses?: ResponseUpdateManyWithoutOrderNestedInput
    executor?: ExecutorInfoUpdateOneWithoutActiveOrdersNestedInput
    doneExecutor?: ExecutorInfoUpdateOneWithoutDoneOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutSpecializationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    executorId?: NullableStringFieldUpdateOperationsInput | string | null
    doneExecutorId?: NullableStringFieldUpdateOperationsInput | string | null
    responses?: ResponseUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutSpecializationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusEnumFieldUpdateOperationsInput | $Enums.OrderStatusEnum
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    files?: OrderUpdatefilesInput | string[]
    tags?: OrderUpdatetagsInput | string[]
    views?: IntFieldUpdateOperationsInput | number
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    responsesCount?: IntFieldUpdateOperationsInput | number
    executorId?: NullableStringFieldUpdateOperationsInput | string | null
    doneExecutorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExecutorInfoUpdateWithoutSpecializationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutExecutorInfoNestedInput
    responses?: ResponseUpdateManyWithoutExecutorNestedInput
    activeOrders?: OrderUpdateManyWithoutExecutorNestedInput
    doneOrders?: OrderUpdateManyWithoutDoneExecutorNestedInput
  }

  export type ExecutorInfoUncheckedUpdateWithoutSpecializationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    responses?: ResponseUncheckedUpdateManyWithoutExecutorNestedInput
    activeOrders?: OrderUncheckedUpdateManyWithoutExecutorNestedInput
    doneOrders?: OrderUncheckedUpdateManyWithoutDoneExecutorNestedInput
  }

  export type ExecutorInfoUncheckedUpdateManyWithoutSpecializationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    ratingCount?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExecutorInfoUpdatetagsInput | string[]
    expirience?: EnumExpirienceEnumFieldUpdateOperationsInput | $Enums.ExpirienceEnum
    costType?: EnumCostTypeEnumFieldUpdateOperationsInput | $Enums.CostTypeEnum
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExecutorInfoCountOutputTypeDefaultArgs instead
     */
    export type ExecutorInfoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExecutorInfoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerInfoCountOutputTypeDefaultArgs instead
     */
    export type CustomerInfoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerInfoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderCountOutputTypeDefaultArgs instead
     */
    export type OrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SpecializationCountOutputTypeDefaultArgs instead
     */
    export type SpecializationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SpecializationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExecutorInfoDefaultArgs instead
     */
    export type ExecutorInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExecutorInfoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerInfoDefaultArgs instead
     */
    export type CustomerInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerInfoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderDefaultArgs instead
     */
    export type OrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResponseDefaultArgs instead
     */
    export type ResponseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResponseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SpecializationDefaultArgs instead
     */
    export type SpecializationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SpecializationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContactDefaultArgs instead
     */
    export type ContactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContactDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TopUpBalanceDefaultArgs instead
     */
    export type TopUpBalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TopUpBalanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DecreaseBalanceDefaultArgs instead
     */
    export type DecreaseBalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DecreaseBalanceDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}