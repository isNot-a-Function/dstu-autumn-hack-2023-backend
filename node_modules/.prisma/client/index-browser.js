
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.4.2
 * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
 */
Prisma.prismaVersion = {
  client: "5.4.2",
  engine: "ac9d7041ed77bcc8a8dbd2ab6616b39013829574"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  name: 'name',
  family: 'family',
  dateOfBirth: 'dateOfBirth',
  city: 'city',
  logo: 'logo',
  balance: 'balance'
};

exports.Prisma.ExecutorInfoScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  rating: 'rating',
  ratingCount: 'ratingCount',
  description: 'description',
  classification: 'classification',
  tags: 'tags',
  expirience: 'expirience',
  costType: 'costType',
  cost: 'cost'
};

exports.Prisma.CustomerInfoScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  rating: 'rating',
  ratingCount: 'ratingCount'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerId: 'customerId',
  status: 'status',
  title: 'title',
  description: 'description',
  files: 'files',
  tags: 'tags',
  views: 'views',
  costType: 'costType',
  cost: 'cost',
  comment: 'comment',
  responsesCount: 'responsesCount',
  specializationId: 'specializationId',
  executorId: 'executorId',
  doneExecutorId: 'doneExecutorId'
};

exports.Prisma.ResponseScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  orderId: 'orderId',
  executorId: 'executorId',
  comment: 'comment'
};

exports.Prisma.SpecializationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  topLevelTitle: 'topLevelTitle'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  site: 'site',
  phone: 'phone',
  mail: 'mail',
  telegram: 'telegram'
};

exports.Prisma.TopUpBalanceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  sum: 'sum',
  reason: 'reason',
  toUserId: 'toUserId'
};

exports.Prisma.DecreaseBalanceScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  sum: 'sum',
  reason: 'reason',
  fromUserId: 'fromUserId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  name: 'name',
  family: 'family',
  city: 'city',
  logo: 'logo'
};

exports.Prisma.ExecutorInfoOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  description: 'description',
  classification: 'classification',
  tags: 'tags'
};

exports.Prisma.CustomerInfoOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  title: 'title',
  description: 'description',
  files: 'files',
  tags: 'tags',
  comment: 'comment',
  specializationId: 'specializationId',
  executorId: 'executorId',
  doneExecutorId: 'doneExecutorId'
};

exports.Prisma.ResponseOrderByRelevanceFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  executorId: 'executorId',
  comment: 'comment'
};

exports.Prisma.SpecializationOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  topLevelTitle: 'topLevelTitle'
};

exports.Prisma.ContactOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  site: 'site',
  phone: 'phone',
  mail: 'mail',
  telegram: 'telegram'
};

exports.Prisma.TopUpBalanceOrderByRelevanceFieldEnum = {
  id: 'id',
  reason: 'reason',
  toUserId: 'toUserId'
};

exports.Prisma.DecreaseBalanceOrderByRelevanceFieldEnum = {
  id: 'id',
  reason: 'reason',
  fromUserId: 'fromUserId'
};
exports.UserRoleEnum = exports.$Enums.UserRoleEnum = {
  executor: 'executor',
  customer: 'customer'
};

exports.ExpirienceEnum = exports.$Enums.ExpirienceEnum = {
  lessYear: 'lessYear',
  overYear: 'overYear',
  overThreeYear: 'overThreeYear',
  overFiveYear: 'overFiveYear',
  overTeenYear: 'overTeenYear'
};

exports.CostTypeEnum = exports.$Enums.CostTypeEnum = {
  none: 'none',
  contract: 'contract',
  inHour: 'inHour',
  inOrder: 'inOrder'
};

exports.OrderStatusEnum = exports.$Enums.OrderStatusEnum = {
  active: 'active',
  inProcess: 'inProcess',
  inCheck: 'inCheck',
  archived: 'archived',
  done: 'done'
};

exports.Prisma.ModelName = {
  User: 'User',
  ExecutorInfo: 'ExecutorInfo',
  CustomerInfo: 'CustomerInfo',
  Order: 'Order',
  Response: 'Response',
  Specialization: 'Specialization',
  Contact: 'Contact',
  TopUpBalance: 'TopUpBalance',
  DecreaseBalance: 'DecreaseBalance'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
