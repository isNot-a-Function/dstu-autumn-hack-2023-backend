generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int             @id @default(autoincrement())
  createdAt    DateTime        @default(now())
  email        String          @unique
  passwordHash String
  role         UserRoleEnum    @default(customer)
  tgLink       String?
  vkLink       String?
  phone        String?
  fullname     String?
  logo         String?         @default("https://www.svgrepo.com/show/404636/avatar-people-person-profile-user.svg")
  messages     Message[]
  groups       MessagerGroup[]
  responses    Response[]
  answers      TaskAnswer[]
}

model Specialization {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  title      String
  directions Direction[]
}

model Direction {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  type             DirectionType?
  title            String
  description      String
  responses        Response[]
  specialization   Specialization @relation(fields: [specializationId], references: [id])
  specializationId Int
  test             Test?          @relation(fields: [testId], references: [id])
  testId           Int?
}

model Response {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  text        String?
  verdict     String?
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  direction   Direction @relation(fields: [directionId], references: [id])
  directionId Int
  tests       Test[]
  answers     Answer[]
}

model Test {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  title     String
  direction Direction[]
  tasks     Task[]
  answers   Answer[]
  response  Response[]
}

model Task {
  id                    Int          @id @default(autoincrement())
  createdAt             DateTime     @default(now())
  test                  Test?        @relation(fields: [testId], references: [id])
  testId                Int?
  type                  TaskType
  question              String
  variants              String[]
  correctSingleAnswer   Int?
  correctMultipleAnswer Int[]
  code                  String?
  taskAnswers           TaskAnswer[]
}

model Answer {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  answer      String?
  test        Test         @relation(fields: [testId], references: [id])
  testId      Int
  taskAnswers TaskAnswer[]
  response    Response[]
}

model TaskAnswer {
  id            Int    @id @default(autoincrement())
  answer        String
  verdict       Int?
  answerModel   Answer @relation(fields: [answerModelId], references: [id])
  answerModelId Int
  task          Task   @relation(fields: [taskId], references: [id])
  taskId        Int
  user          User   @relation(fields: [userId], references: [id])
  userId        Int
}

model MessagerGroup {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  creatorId Int?
  active    Boolean   @default(true)
  title     String    @default(uuid())
  icon      String    @default("https://vectips.com/wp-content/uploads/2020/08/tutorial-preview-large-1.png")
  users     User[]
  messages  Message[]
}

model Message {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  text      String
  files     String[]
  sender    User          @relation(fields: [senderId], references: [id])
  senderId  Int
  group     MessagerGroup @relation(fields: [groupId], references: [id])
  groupId   Int
}

enum UserRoleEnum {
  hr
  customer
}

enum TaskType {
  singleResponse
  multipleResponse
  detailedResponse
  codeResponse
}

enum DirectionType {
  internship
  practice
}
